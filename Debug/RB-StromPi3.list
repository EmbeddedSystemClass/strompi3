
RB-StromPi3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cbc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001318  08005d7c  08005d7c  00015d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007094  08007094  00017094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007098  08007098  00017098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000d4  20000000  0800709c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000590  200000d8  08007170  000200d8  2**3
                  ALLOC
  7 ._user_heap_stack 00000900  20000668  08007170  00020668  2**0
                  ALLOC
  8 .user_data    00000000  08007c00  08007c00  000200d4  2**0
                  CONTENTS
  9 .ARM.attributes 00000028  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026db8  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004556  00000000  00000000  00046eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000d62e  00000000  00000000  0004b40a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000013f0  00000000  00000000  00058a38  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001350  00000000  00000000  00059e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000128a6  00000000  00000000  0005b178  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001064b  00000000  00000000  0006da1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0005bef6  00000000  00000000  0007e069  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000d9f5f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003770  00000000  00000000  000d9fdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000d8 	.word	0x200000d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005d64 	.word	0x08005d64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000dc 	.word	0x200000dc
 8000104:	08005d64 	.word	0x08005d64

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000404:	b510      	push	{r4, lr}
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000406:	4a06      	ldr	r2, [pc, #24]	; (8000420 <HAL_Init+0x1c>)
 8000408:	6813      	ldr	r3, [r2, #0]
 800040a:	2110      	movs	r1, #16
 800040c:	430b      	orrs	r3, r1
 800040e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000410:	2000      	movs	r0, #0
 8000412:	f004 ff4b 	bl	80052ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000416:	f004 fea3 	bl	8005160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800041a:	2000      	movs	r0, #0
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	40022000 	.word	0x40022000

08000424 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000424:	4a02      	ldr	r2, [pc, #8]	; (8000430 <HAL_IncTick+0xc>)
 8000426:	6813      	ldr	r3, [r2, #0]
 8000428:	3301      	adds	r3, #1
 800042a:	6013      	str	r3, [r2, #0]
}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	200004a8 	.word	0x200004a8

08000434 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000434:	4b01      	ldr	r3, [pc, #4]	; (800043c <HAL_GetTick+0x8>)
 8000436:	6818      	ldr	r0, [r3, #0]
}
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	200004a8 	.word	0x200004a8

08000440 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000440:	b530      	push	{r4, r5, lr}
 8000442:	b083      	sub	sp, #12
 8000444:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000446:	2300      	movs	r3, #0
 8000448:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800044a:	6802      	ldr	r2, [r0, #0]
 800044c:	6891      	ldr	r1, [r2, #8]
 800044e:	3303      	adds	r3, #3
 8000450:	400b      	ands	r3, r1
 8000452:	2b01      	cmp	r3, #1
 8000454:	d011      	beq.n	800047a <ADC_Enable+0x3a>
 8000456:	2300      	movs	r3, #0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d142      	bne.n	80004e2 <ADC_Enable+0xa2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800045c:	6891      	ldr	r1, [r2, #8]
 800045e:	4b22      	ldr	r3, [pc, #136]	; (80004e8 <ADC_Enable+0xa8>)
 8000460:	4219      	tst	r1, r3
 8000462:	d116      	bne.n	8000492 <ADC_Enable+0x52>
      
      return HAL_ERROR;
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000464:	6893      	ldr	r3, [r2, #8]
 8000466:	2101      	movs	r1, #1
 8000468:	430b      	orrs	r3, r1
 800046a:	6093      	str	r3, [r2, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800046c:	4b1f      	ldr	r3, [pc, #124]	; (80004ec <ADC_Enable+0xac>)
 800046e:	6818      	ldr	r0, [r3, #0]
 8000470:	491f      	ldr	r1, [pc, #124]	; (80004f0 <ADC_Enable+0xb0>)
 8000472:	f7ff fe51 	bl	8000118 <__udivsi3>
 8000476:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8000478:	e018      	b.n	80004ac <ADC_Enable+0x6c>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800047a:	6813      	ldr	r3, [r2, #0]
 800047c:	07db      	lsls	r3, r3, #31
 800047e:	d404      	bmi.n	800048a <ADC_Enable+0x4a>
 8000480:	68d3      	ldr	r3, [r2, #12]
 8000482:	041b      	lsls	r3, r3, #16
 8000484:	d403      	bmi.n	800048e <ADC_Enable+0x4e>
 8000486:	2300      	movs	r3, #0
 8000488:	e7e6      	b.n	8000458 <ADC_Enable+0x18>
 800048a:	2301      	movs	r3, #1
 800048c:	e7e4      	b.n	8000458 <ADC_Enable+0x18>
 800048e:	2301      	movs	r3, #1
 8000490:	e7e2      	b.n	8000458 <ADC_Enable+0x18>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000492:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000494:	2210      	movs	r2, #16
 8000496:	4313      	orrs	r3, r2
 8000498:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800049a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800049c:	3a0f      	subs	r2, #15
 800049e:	4313      	orrs	r3, r2
 80004a0:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80004a2:	2001      	movs	r0, #1
 80004a4:	e01e      	b.n	80004e4 <ADC_Enable+0xa4>
    {
      wait_loop_index--;
 80004a6:	9b01      	ldr	r3, [sp, #4]
 80004a8:	3b01      	subs	r3, #1
 80004aa:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80004ac:	9b01      	ldr	r3, [sp, #4]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d1f9      	bne.n	80004a6 <ADC_Enable+0x66>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80004b2:	f7ff ffbf 	bl	8000434 <HAL_GetTick>
 80004b6:	0005      	movs	r5, r0
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80004b8:	6823      	ldr	r3, [r4, #0]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	07db      	lsls	r3, r3, #31
 80004be:	d40e      	bmi.n	80004de <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80004c0:	f7ff ffb8 	bl	8000434 <HAL_GetTick>
 80004c4:	1b40      	subs	r0, r0, r5
 80004c6:	2802      	cmp	r0, #2
 80004c8:	d9f6      	bls.n	80004b8 <ADC_Enable+0x78>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004cc:	2210      	movs	r2, #16
 80004ce:	4313      	orrs	r3, r2
 80004d0:	6463      	str	r3, [r4, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80004d4:	3a0f      	subs	r2, #15
 80004d6:	4313      	orrs	r3, r2
 80004d8:	64a3      	str	r3, [r4, #72]	; 0x48
      
        return HAL_ERROR;
 80004da:	2001      	movs	r0, #1
 80004dc:	e002      	b.n	80004e4 <ADC_Enable+0xa4>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80004de:	2000      	movs	r0, #0
 80004e0:	e000      	b.n	80004e4 <ADC_Enable+0xa4>
 80004e2:	2000      	movs	r0, #0
}
 80004e4:	b003      	add	sp, #12
 80004e6:	bd30      	pop	{r4, r5, pc}
 80004e8:	80000017 	.word	0x80000017
 80004ec:	2000006c 	.word	0x2000006c
 80004f0:	000f4240 	.word	0x000f4240

080004f4 <HAL_ADC_Init>:
{
 80004f4:	b570      	push	{r4, r5, r6, lr}
 80004f6:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 80004f8:	d100      	bne.n	80004fc <HAL_ADC_Init+0x8>
 80004fa:	e0b9      	b.n	8000670 <HAL_ADC_Init+0x17c>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80004fc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d100      	bne.n	8000504 <HAL_ADC_Init+0x10>
 8000502:	e080      	b.n	8000606 <HAL_ADC_Init+0x112>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000504:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000506:	06db      	lsls	r3, r3, #27
 8000508:	d500      	bpl.n	800050c <HAL_ADC_Init+0x18>
 800050a:	e0ab      	b.n	8000664 <HAL_ADC_Init+0x170>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800050c:	6822      	ldr	r2, [r4, #0]
 800050e:	6893      	ldr	r3, [r2, #8]
 8000510:	2104      	movs	r1, #4
 8000512:	400b      	ands	r3, r1
      (tmp_hal_status == HAL_OK)                                &&
 8000514:	d000      	beq.n	8000518 <HAL_ADC_Init+0x24>
 8000516:	e0a5      	b.n	8000664 <HAL_ADC_Init+0x170>
    ADC_STATE_CLR_SET(hadc->State,
 8000518:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800051a:	4856      	ldr	r0, [pc, #344]	; (8000674 <HAL_ADC_Init+0x180>)
 800051c:	4001      	ands	r1, r0
 800051e:	3006      	adds	r0, #6
 8000520:	30ff      	adds	r0, #255	; 0xff
 8000522:	4301      	orrs	r1, r0
 8000524:	6461      	str	r1, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000526:	6890      	ldr	r0, [r2, #8]
 8000528:	2103      	movs	r1, #3
 800052a:	4001      	ands	r1, r0
 800052c:	2901      	cmp	r1, #1
 800052e:	d070      	beq.n	8000612 <HAL_ADC_Init+0x11e>
 8000530:	2100      	movs	r1, #0
 8000532:	2900      	cmp	r1, #0
 8000534:	d10c      	bne.n	8000550 <HAL_ADC_Init+0x5c>
      MODIFY_REG(hadc->Instance->CFGR1,
 8000536:	68d1      	ldr	r1, [r2, #12]
 8000538:	2018      	movs	r0, #24
 800053a:	4381      	bics	r1, r0
 800053c:	68a0      	ldr	r0, [r4, #8]
 800053e:	4301      	orrs	r1, r0
 8000540:	60d1      	str	r1, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000542:	6821      	ldr	r1, [r4, #0]
 8000544:	690a      	ldr	r2, [r1, #16]
 8000546:	0092      	lsls	r2, r2, #2
 8000548:	0892      	lsrs	r2, r2, #2
 800054a:	6860      	ldr	r0, [r4, #4]
 800054c:	4302      	orrs	r2, r0
 800054e:	610a      	str	r2, [r1, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000550:	6821      	ldr	r1, [r4, #0]
 8000552:	68ca      	ldr	r2, [r1, #12]
 8000554:	4848      	ldr	r0, [pc, #288]	; (8000678 <HAL_ADC_Init+0x184>)
 8000556:	4002      	ands	r2, r0
 8000558:	60ca      	str	r2, [r1, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800055a:	69a2      	ldr	r2, [r4, #24]
 800055c:	0392      	lsls	r2, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800055e:	69e1      	ldr	r1, [r4, #28]
 8000560:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000562:	430a      	orrs	r2, r1
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000564:	6a20      	ldr	r0, [r4, #32]
 8000566:	0341      	lsls	r1, r0, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8000568:	430a      	orrs	r2, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800056a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800056c:	2901      	cmp	r1, #1
 800056e:	d05c      	beq.n	800062a <HAL_ADC_Init+0x136>
 8000570:	2180      	movs	r1, #128	; 0x80
 8000572:	0149      	lsls	r1, r1, #5
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000574:	430a      	orrs	r2, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8000576:	68e1      	ldr	r1, [r4, #12]
 8000578:	430a      	orrs	r2, r1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800057a:	6921      	ldr	r1, [r4, #16]
 800057c:	2902      	cmp	r1, #2
 800057e:	d056      	beq.n	800062e <HAL_ADC_Init+0x13a>
                 hadc->Init.DataAlign                                   |
 8000580:	4313      	orrs	r3, r2
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8000582:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000584:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000586:	4313      	orrs	r3, r2
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000588:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800058a:	2a01      	cmp	r2, #1
 800058c:	d051      	beq.n	8000632 <HAL_ADC_Init+0x13e>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800058e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000590:	21c2      	movs	r1, #194	; 0xc2
 8000592:	31ff      	adds	r1, #255	; 0xff
 8000594:	428a      	cmp	r2, r1
 8000596:	d002      	beq.n	800059e <HAL_ADC_Init+0xaa>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000598:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800059a:	430a      	orrs	r2, r1
 800059c:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800059e:	6821      	ldr	r1, [r4, #0]
 80005a0:	68ca      	ldr	r2, [r1, #12]
 80005a2:	431a      	orrs	r2, r3
 80005a4:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80005a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80005a8:	2180      	movs	r1, #128	; 0x80
 80005aa:	0549      	lsls	r1, r1, #21
 80005ac:	428a      	cmp	r2, r1
 80005ae:	d00d      	beq.n	80005cc <HAL_ADC_Init+0xd8>
 80005b0:	2a01      	cmp	r2, #1
 80005b2:	d00b      	beq.n	80005cc <HAL_ADC_Init+0xd8>
 80005b4:	2a02      	cmp	r2, #2
 80005b6:	d009      	beq.n	80005cc <HAL_ADC_Init+0xd8>
 80005b8:	2a03      	cmp	r2, #3
 80005ba:	d007      	beq.n	80005cc <HAL_ADC_Init+0xd8>
 80005bc:	2a04      	cmp	r2, #4
 80005be:	d005      	beq.n	80005cc <HAL_ADC_Init+0xd8>
 80005c0:	2a05      	cmp	r2, #5
 80005c2:	d003      	beq.n	80005cc <HAL_ADC_Init+0xd8>
 80005c4:	2a06      	cmp	r2, #6
 80005c6:	d001      	beq.n	80005cc <HAL_ADC_Init+0xd8>
 80005c8:	2a07      	cmp	r2, #7
 80005ca:	d10a      	bne.n	80005e2 <HAL_ADC_Init+0xee>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80005cc:	6820      	ldr	r0, [r4, #0]
 80005ce:	6941      	ldr	r1, [r0, #20]
 80005d0:	2207      	movs	r2, #7
 80005d2:	4391      	bics	r1, r2
 80005d4:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80005d6:	6820      	ldr	r0, [r4, #0]
 80005d8:	6941      	ldr	r1, [r0, #20]
 80005da:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80005dc:	402a      	ands	r2, r5
 80005de:	430a      	orrs	r2, r1
 80005e0:	6142      	str	r2, [r0, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80005e2:	6822      	ldr	r2, [r4, #0]
 80005e4:	68d2      	ldr	r2, [r2, #12]
 80005e6:	4925      	ldr	r1, [pc, #148]	; (800067c <HAL_ADC_Init+0x188>)
 80005e8:	400a      	ands	r2, r1
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d030      	beq.n	8000650 <HAL_ADC_Init+0x15c>
      ADC_STATE_CLR_SET(hadc->State,
 80005ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80005f0:	2212      	movs	r2, #18
 80005f2:	4393      	bics	r3, r2
 80005f4:	3a02      	subs	r2, #2
 80005f6:	4313      	orrs	r3, r2
 80005f8:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80005fc:	3a0f      	subs	r2, #15
 80005fe:	4313      	orrs	r3, r2
 8000600:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8000602:	2001      	movs	r0, #1
 8000604:	e033      	b.n	800066e <HAL_ADC_Init+0x17a>
    ADC_CLEAR_ERRORCODE(hadc);
 8000606:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 8000608:	2240      	movs	r2, #64	; 0x40
 800060a:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800060c:	f004 fdca 	bl	80051a4 <HAL_ADC_MspInit>
 8000610:	e778      	b.n	8000504 <HAL_ADC_Init+0x10>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000612:	6811      	ldr	r1, [r2, #0]
 8000614:	07c9      	lsls	r1, r1, #31
 8000616:	d404      	bmi.n	8000622 <HAL_ADC_Init+0x12e>
 8000618:	68d1      	ldr	r1, [r2, #12]
 800061a:	0409      	lsls	r1, r1, #16
 800061c:	d403      	bmi.n	8000626 <HAL_ADC_Init+0x132>
 800061e:	2100      	movs	r1, #0
 8000620:	e787      	b.n	8000532 <HAL_ADC_Init+0x3e>
 8000622:	2101      	movs	r1, #1
 8000624:	e785      	b.n	8000532 <HAL_ADC_Init+0x3e>
 8000626:	2101      	movs	r1, #1
 8000628:	e783      	b.n	8000532 <HAL_ADC_Init+0x3e>
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800062a:	0019      	movs	r1, r3
 800062c:	e7a2      	b.n	8000574 <HAL_ADC_Init+0x80>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800062e:	2304      	movs	r3, #4
 8000630:	e7a6      	b.n	8000580 <HAL_ADC_Init+0x8c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000632:	2800      	cmp	r0, #0
 8000634:	d103      	bne.n	800063e <HAL_ADC_Init+0x14a>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000636:	2280      	movs	r2, #128	; 0x80
 8000638:	0252      	lsls	r2, r2, #9
 800063a:	4313      	orrs	r3, r2
 800063c:	e7a7      	b.n	800058e <HAL_ADC_Init+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800063e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000640:	2120      	movs	r1, #32
 8000642:	430a      	orrs	r2, r1
 8000644:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000646:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000648:	391f      	subs	r1, #31
 800064a:	430a      	orrs	r2, r1
 800064c:	64a2      	str	r2, [r4, #72]	; 0x48
 800064e:	e79e      	b.n	800058e <HAL_ADC_Init+0x9a>
      ADC_CLEAR_ERRORCODE(hadc);
 8000650:	2300      	movs	r3, #0
 8000652:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8000654:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000656:	2203      	movs	r2, #3
 8000658:	4393      	bics	r3, r2
 800065a:	3a02      	subs	r2, #2
 800065c:	4313      	orrs	r3, r2
 800065e:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000660:	2000      	movs	r0, #0
 8000662:	e004      	b.n	800066e <HAL_ADC_Init+0x17a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000664:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000666:	2210      	movs	r2, #16
 8000668:	4313      	orrs	r3, r2
 800066a:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800066c:	2001      	movs	r0, #1
}
 800066e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000670:	2001      	movs	r0, #1
 8000672:	e7fc      	b.n	800066e <HAL_ADC_Init+0x17a>
 8000674:	fffffefd 	.word	0xfffffefd
 8000678:	fffe0219 	.word	0xfffe0219
 800067c:	833fffe7 	.word	0x833fffe7

08000680 <HAL_ADC_Start_DMA>:
{
 8000680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000682:	0004      	movs	r4, r0
 8000684:	000e      	movs	r6, r1
 8000686:	0017      	movs	r7, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000688:	6803      	ldr	r3, [r0, #0]
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	075b      	lsls	r3, r3, #29
 800068e:	d502      	bpl.n	8000696 <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_BUSY;
 8000690:	2502      	movs	r5, #2
}
 8000692:	0028      	movs	r0, r5
 8000694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8000696:	2340      	movs	r3, #64	; 0x40
 8000698:	5cc3      	ldrb	r3, [r0, r3]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d03a      	beq.n	8000714 <HAL_ADC_Start_DMA+0x94>
 800069e:	2201      	movs	r2, #1
 80006a0:	2340      	movs	r3, #64	; 0x40
 80006a2:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80006a4:	69c3      	ldr	r3, [r0, #28]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d032      	beq.n	8000710 <HAL_ADC_Start_DMA+0x90>
      tmp_hal_status = ADC_Enable(hadc);
 80006aa:	f7ff fec9 	bl	8000440 <ADC_Enable>
 80006ae:	0005      	movs	r5, r0
    if (tmp_hal_status == HAL_OK)
 80006b0:	2d00      	cmp	r5, #0
 80006b2:	d1ee      	bne.n	8000692 <HAL_ADC_Start_DMA+0x12>
      ADC_STATE_CLR_SET(hadc->State,
 80006b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80006b6:	4a18      	ldr	r2, [pc, #96]	; (8000718 <HAL_ADC_Start_DMA+0x98>)
 80006b8:	401a      	ands	r2, r3
 80006ba:	2380      	movs	r3, #128	; 0x80
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	4313      	orrs	r3, r2
 80006c0:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 80006c2:	2300      	movs	r3, #0
 80006c4:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 80006c6:	2240      	movs	r2, #64	; 0x40
 80006c8:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80006ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80006cc:	4a13      	ldr	r2, [pc, #76]	; (800071c <HAL_ADC_Start_DMA+0x9c>)
 80006ce:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80006d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80006d2:	4a13      	ldr	r2, [pc, #76]	; (8000720 <HAL_ADC_Start_DMA+0xa0>)
 80006d4:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80006d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80006d8:	4a12      	ldr	r2, [pc, #72]	; (8000724 <HAL_ADC_Start_DMA+0xa4>)
 80006da:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80006dc:	6823      	ldr	r3, [r4, #0]
 80006de:	221c      	movs	r2, #28
 80006e0:	601a      	str	r2, [r3, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80006e2:	6822      	ldr	r2, [r4, #0]
 80006e4:	6853      	ldr	r3, [r2, #4]
 80006e6:	2110      	movs	r1, #16
 80006e8:	430b      	orrs	r3, r1
 80006ea:	6053      	str	r3, [r2, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80006ec:	6822      	ldr	r2, [r4, #0]
 80006ee:	68d3      	ldr	r3, [r2, #12]
 80006f0:	390f      	subs	r1, #15
 80006f2:	430b      	orrs	r3, r1
 80006f4:	60d3      	str	r3, [r2, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80006f6:	6821      	ldr	r1, [r4, #0]
 80006f8:	3140      	adds	r1, #64	; 0x40
 80006fa:	003b      	movs	r3, r7
 80006fc:	0032      	movs	r2, r6
 80006fe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000700:	f000 fae6 	bl	8000cd0 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000704:	6822      	ldr	r2, [r4, #0]
 8000706:	6893      	ldr	r3, [r2, #8]
 8000708:	2104      	movs	r1, #4
 800070a:	430b      	orrs	r3, r1
 800070c:	6093      	str	r3, [r2, #8]
 800070e:	e7c0      	b.n	8000692 <HAL_ADC_Start_DMA+0x12>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000710:	2500      	movs	r5, #0
 8000712:	e7cd      	b.n	80006b0 <HAL_ADC_Start_DMA+0x30>
    __HAL_LOCK(hadc);
 8000714:	2502      	movs	r5, #2
 8000716:	e7bc      	b.n	8000692 <HAL_ADC_Start_DMA+0x12>
 8000718:	fffff0fe 	.word	0xfffff0fe
 800071c:	0800072d 	.word	0x0800072d
 8000720:	0800079f 	.word	0x0800079f
 8000724:	080007ab 	.word	0x080007ab

08000728 <HAL_ADC_ConvCpltCallback>:
}
 8000728:	4770      	bx	lr
	...

0800072c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800072c:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800072e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000732:	2150      	movs	r1, #80	; 0x50
 8000734:	4211      	tst	r1, r2
 8000736:	d12b      	bne.n	8000790 <ADC_DMAConvCplt+0x64>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000738:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800073a:	2280      	movs	r2, #128	; 0x80
 800073c:	0092      	lsls	r2, r2, #2
 800073e:	430a      	orrs	r2, r1
 8000740:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	68d0      	ldr	r0, [r2, #12]
 8000746:	21c0      	movs	r1, #192	; 0xc0
 8000748:	0109      	lsls	r1, r1, #4
 800074a:	4208      	tst	r0, r1
 800074c:	d113      	bne.n	8000776 <ADC_DMAConvCplt+0x4a>
 800074e:	6a19      	ldr	r1, [r3, #32]
 8000750:	2900      	cmp	r1, #0
 8000752:	d110      	bne.n	8000776 <ADC_DMAConvCplt+0x4a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000754:	6811      	ldr	r1, [r2, #0]
 8000756:	0709      	lsls	r1, r1, #28
 8000758:	d50d      	bpl.n	8000776 <ADC_DMAConvCplt+0x4a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800075a:	6891      	ldr	r1, [r2, #8]
 800075c:	0749      	lsls	r1, r1, #29
 800075e:	d40e      	bmi.n	800077e <ADC_DMAConvCplt+0x52>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000760:	6851      	ldr	r1, [r2, #4]
 8000762:	200c      	movs	r0, #12
 8000764:	4381      	bics	r1, r0
 8000766:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800076a:	490b      	ldr	r1, [pc, #44]	; (8000798 <ADC_DMAConvCplt+0x6c>)
 800076c:	400a      	ands	r2, r1
 800076e:	3104      	adds	r1, #4
 8000770:	31ff      	adds	r1, #255	; 0xff
 8000772:	430a      	orrs	r2, r1
 8000774:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8000776:	0018      	movs	r0, r3
 8000778:	f7ff ffd6 	bl	8000728 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 800077c:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800077e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000780:	2120      	movs	r1, #32
 8000782:	430a      	orrs	r2, r1
 8000784:	645a      	str	r2, [r3, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000786:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000788:	391f      	subs	r1, #31
 800078a:	430a      	orrs	r2, r1
 800078c:	649a      	str	r2, [r3, #72]	; 0x48
 800078e:	e7f2      	b.n	8000776 <ADC_DMAConvCplt+0x4a>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000794:	4798      	blx	r3
}
 8000796:	e7f1      	b.n	800077c <ADC_DMAConvCplt+0x50>
 8000798:	fffffefe 	.word	0xfffffefe

0800079c <HAL_ADC_ConvHalfCpltCallback>:
}
 800079c:	4770      	bx	lr

0800079e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800079e:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80007a0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80007a2:	f7ff fffb 	bl	800079c <HAL_ADC_ConvHalfCpltCallback>
}
 80007a6:	bd10      	pop	{r4, pc}

080007a8 <HAL_ADC_ErrorCallback>:
}
 80007a8:	4770      	bx	lr

080007aa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80007aa:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80007ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80007ae:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80007b0:	2240      	movs	r2, #64	; 0x40
 80007b2:	4313      	orrs	r3, r2
 80007b4:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80007b6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80007b8:	3a3c      	subs	r2, #60	; 0x3c
 80007ba:	4313      	orrs	r3, r2
 80007bc:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 80007be:	f7ff fff3 	bl	80007a8 <HAL_ADC_ErrorCallback>
}
 80007c2:	bd10      	pop	{r4, pc}

080007c4 <HAL_ADC_IRQHandler>:
{
 80007c4:	b510      	push	{r4, lr}
 80007c6:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80007c8:	6803      	ldr	r3, [r0, #0]
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	0752      	lsls	r2, r2, #29
 80007ce:	d502      	bpl.n	80007d6 <HAL_ADC_IRQHandler+0x12>
 80007d0:	685a      	ldr	r2, [r3, #4]
 80007d2:	0752      	lsls	r2, r2, #29
 80007d4:	d405      	bmi.n	80007e2 <HAL_ADC_IRQHandler+0x1e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80007d6:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80007d8:	0712      	lsls	r2, r2, #28
 80007da:	d529      	bpl.n	8000830 <HAL_ADC_IRQHandler+0x6c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80007dc:	685a      	ldr	r2, [r3, #4]
 80007de:	0712      	lsls	r2, r2, #28
 80007e0:	d526      	bpl.n	8000830 <HAL_ADC_IRQHandler+0x6c>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80007e2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80007e4:	06d2      	lsls	r2, r2, #27
 80007e6:	d404      	bmi.n	80007f2 <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80007e8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	0092      	lsls	r2, r2, #2
 80007ee:	430a      	orrs	r2, r1
 80007f0:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80007f2:	68d9      	ldr	r1, [r3, #12]
 80007f4:	22c0      	movs	r2, #192	; 0xc0
 80007f6:	0112      	lsls	r2, r2, #4
 80007f8:	4211      	tst	r1, r2
 80007fa:	d113      	bne.n	8000824 <HAL_ADC_IRQHandler+0x60>
 80007fc:	6a22      	ldr	r2, [r4, #32]
 80007fe:	2a00      	cmp	r2, #0
 8000800:	d110      	bne.n	8000824 <HAL_ADC_IRQHandler+0x60>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	0712      	lsls	r2, r2, #28
 8000806:	d50d      	bpl.n	8000824 <HAL_ADC_IRQHandler+0x60>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000808:	689a      	ldr	r2, [r3, #8]
 800080a:	0752      	lsls	r2, r2, #29
 800080c:	d431      	bmi.n	8000872 <HAL_ADC_IRQHandler+0xae>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800080e:	685a      	ldr	r2, [r3, #4]
 8000810:	210c      	movs	r1, #12
 8000812:	438a      	bics	r2, r1
 8000814:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8000816:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000818:	4a20      	ldr	r2, [pc, #128]	; (800089c <HAL_ADC_IRQHandler+0xd8>)
 800081a:	4013      	ands	r3, r2
 800081c:	3204      	adds	r2, #4
 800081e:	32ff      	adds	r2, #255	; 0xff
 8000820:	4313      	orrs	r3, r2
 8000822:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8000824:	0020      	movs	r0, r4
 8000826:	f7ff ff7f 	bl	8000728 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800082a:	6823      	ldr	r3, [r4, #0]
 800082c:	220c      	movs	r2, #12
 800082e:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000830:	6823      	ldr	r3, [r4, #0]
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	0612      	lsls	r2, r2, #24
 8000836:	d502      	bpl.n	800083e <HAL_ADC_IRQHandler+0x7a>
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	061b      	lsls	r3, r3, #24
 800083c:	d422      	bmi.n	8000884 <HAL_ADC_IRQHandler+0xc0>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800083e:	6823      	ldr	r3, [r4, #0]
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	06d2      	lsls	r2, r2, #27
 8000844:	d514      	bpl.n	8000870 <HAL_ADC_IRQHandler+0xac>
 8000846:	685a      	ldr	r2, [r3, #4]
 8000848:	06d2      	lsls	r2, r2, #27
 800084a:	d511      	bpl.n	8000870 <HAL_ADC_IRQHandler+0xac>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800084c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800084e:	2a01      	cmp	r2, #1
 8000850:	d002      	beq.n	8000858 <HAL_ADC_IRQHandler+0x94>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8000852:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000854:	07d2      	lsls	r2, r2, #31
 8000856:	d508      	bpl.n	800086a <HAL_ADC_IRQHandler+0xa6>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000858:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800085a:	2102      	movs	r1, #2
 800085c:	430a      	orrs	r2, r1
 800085e:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000860:	2210      	movs	r2, #16
 8000862:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8000864:	0020      	movs	r0, r4
 8000866:	f7ff ff9f 	bl	80007a8 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800086a:	6823      	ldr	r3, [r4, #0]
 800086c:	2210      	movs	r2, #16
 800086e:	601a      	str	r2, [r3, #0]
}
 8000870:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000872:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000874:	2220      	movs	r2, #32
 8000876:	4313      	orrs	r3, r2
 8000878:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800087a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800087c:	3a1f      	subs	r2, #31
 800087e:	4313      	orrs	r3, r2
 8000880:	64a3      	str	r3, [r4, #72]	; 0x48
 8000882:	e7cf      	b.n	8000824 <HAL_ADC_IRQHandler+0x60>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000884:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000886:	2380      	movs	r3, #128	; 0x80
 8000888:	025b      	lsls	r3, r3, #9
 800088a:	4313      	orrs	r3, r2
 800088c:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800088e:	0020      	movs	r0, r4
 8000890:	f003 fe3a 	bl	8004508 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000894:	6823      	ldr	r3, [r4, #0]
 8000896:	2280      	movs	r2, #128	; 0x80
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	e7d0      	b.n	800083e <HAL_ADC_IRQHandler+0x7a>
 800089c:	fffffefe 	.word	0xfffffefe

080008a0 <HAL_ADC_ConfigChannel>:
{
 80008a0:	b530      	push	{r4, r5, lr}
 80008a2:	b083      	sub	sp, #12
 80008a4:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 80008a6:	2300      	movs	r3, #0
 80008a8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80008aa:	3340      	adds	r3, #64	; 0x40
 80008ac:	5cc3      	ldrb	r3, [r0, r3]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d100      	bne.n	80008b4 <HAL_ADC_ConfigChannel+0x14>
 80008b2:	e08a      	b.n	80009ca <HAL_ADC_ConfigChannel+0x12a>
 80008b4:	2201      	movs	r2, #1
 80008b6:	2340      	movs	r3, #64	; 0x40
 80008b8:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80008ba:	6803      	ldr	r3, [r0, #0]
 80008bc:	689a      	ldr	r2, [r3, #8]
 80008be:	0752      	lsls	r2, r2, #29
 80008c0:	d475      	bmi.n	80009ae <HAL_ADC_ConfigChannel+0x10e>
    if (sConfig->Rank != ADC_RANK_NONE)
 80008c2:	4a43      	ldr	r2, [pc, #268]	; (80009d0 <HAL_ADC_ConfigChannel+0x130>)
 80008c4:	6848      	ldr	r0, [r1, #4]
 80008c6:	4290      	cmp	r0, r2
 80008c8:	d056      	beq.n	8000978 <HAL_ADC_ConfigChannel+0xd8>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80008ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80008cc:	2001      	movs	r0, #1
 80008ce:	680d      	ldr	r5, [r1, #0]
 80008d0:	40a8      	lsls	r0, r5
 80008d2:	4302      	orrs	r2, r0
 80008d4:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80008d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80008d8:	2280      	movs	r2, #128	; 0x80
 80008da:	0552      	lsls	r2, r2, #21
 80008dc:	4293      	cmp	r3, r2
 80008de:	d01e      	beq.n	800091e <HAL_ADC_ConfigChannel+0x7e>
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d01c      	beq.n	800091e <HAL_ADC_ConfigChannel+0x7e>
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d01a      	beq.n	800091e <HAL_ADC_ConfigChannel+0x7e>
 80008e8:	2b03      	cmp	r3, #3
 80008ea:	d018      	beq.n	800091e <HAL_ADC_ConfigChannel+0x7e>
 80008ec:	2b04      	cmp	r3, #4
 80008ee:	d016      	beq.n	800091e <HAL_ADC_ConfigChannel+0x7e>
 80008f0:	2b05      	cmp	r3, #5
 80008f2:	d014      	beq.n	800091e <HAL_ADC_ConfigChannel+0x7e>
 80008f4:	2b06      	cmp	r3, #6
 80008f6:	d012      	beq.n	800091e <HAL_ADC_ConfigChannel+0x7e>
 80008f8:	2b07      	cmp	r3, #7
 80008fa:	d010      	beq.n	800091e <HAL_ADC_ConfigChannel+0x7e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80008fc:	6822      	ldr	r2, [r4, #0]
 80008fe:	6950      	ldr	r0, [r2, #20]
 8000900:	2307      	movs	r3, #7
 8000902:	4003      	ands	r3, r0
 8000904:	6888      	ldr	r0, [r1, #8]
 8000906:	4298      	cmp	r0, r3
 8000908:	d009      	beq.n	800091e <HAL_ADC_ConfigChannel+0x7e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800090a:	6950      	ldr	r0, [r2, #20]
 800090c:	2307      	movs	r3, #7
 800090e:	4398      	bics	r0, r3
 8000910:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000912:	6820      	ldr	r0, [r4, #0]
 8000914:	6942      	ldr	r2, [r0, #20]
 8000916:	688d      	ldr	r5, [r1, #8]
 8000918:	402b      	ands	r3, r5
 800091a:	4313      	orrs	r3, r2
 800091c:	6143      	str	r3, [r0, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800091e:	680b      	ldr	r3, [r1, #0]
 8000920:	001a      	movs	r2, r3
 8000922:	3a10      	subs	r2, #16
 8000924:	2a02      	cmp	r2, #2
 8000926:	d84c      	bhi.n	80009c2 <HAL_ADC_ConfigChannel+0x122>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000928:	4a2a      	ldr	r2, [pc, #168]	; (80009d4 <HAL_ADC_ConfigChannel+0x134>)
 800092a:	6812      	ldr	r2, [r2, #0]
 800092c:	2b10      	cmp	r3, #16
 800092e:	d00e      	beq.n	800094e <HAL_ADC_ConfigChannel+0xae>
 8000930:	2b11      	cmp	r3, #17
 8000932:	d009      	beq.n	8000948 <HAL_ADC_ConfigChannel+0xa8>
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	045b      	lsls	r3, r3, #17
 8000938:	4313      	orrs	r3, r2
 800093a:	4a26      	ldr	r2, [pc, #152]	; (80009d4 <HAL_ADC_ConfigChannel+0x134>)
 800093c:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800093e:	680b      	ldr	r3, [r1, #0]
 8000940:	2b10      	cmp	r3, #16
 8000942:	d007      	beq.n	8000954 <HAL_ADC_ConfigChannel+0xb4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000944:	2000      	movs	r0, #0
 8000946:	e037      	b.n	80009b8 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000948:	2380      	movs	r3, #128	; 0x80
 800094a:	03db      	lsls	r3, r3, #15
 800094c:	e7f4      	b.n	8000938 <HAL_ADC_ConfigChannel+0x98>
 800094e:	2380      	movs	r3, #128	; 0x80
 8000950:	041b      	lsls	r3, r3, #16
 8000952:	e7f1      	b.n	8000938 <HAL_ADC_ConfigChannel+0x98>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000954:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <HAL_ADC_ConfigChannel+0x138>)
 8000956:	6818      	ldr	r0, [r3, #0]
 8000958:	4920      	ldr	r1, [pc, #128]	; (80009dc <HAL_ADC_ConfigChannel+0x13c>)
 800095a:	f7ff fbdd 	bl	8000118 <__udivsi3>
 800095e:	0083      	lsls	r3, r0, #2
 8000960:	1818      	adds	r0, r3, r0
 8000962:	0043      	lsls	r3, r0, #1
 8000964:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000966:	e002      	b.n	800096e <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8000968:	9b01      	ldr	r3, [sp, #4]
 800096a:	3b01      	subs	r3, #1
 800096c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800096e:	9b01      	ldr	r3, [sp, #4]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d1f9      	bne.n	8000968 <HAL_ADC_ConfigChannel+0xc8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000974:	2000      	movs	r0, #0
 8000976:	e01f      	b.n	80009b8 <HAL_ADC_ConfigChannel+0x118>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000978:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800097a:	2001      	movs	r0, #1
 800097c:	680d      	ldr	r5, [r1, #0]
 800097e:	40a8      	lsls	r0, r5
 8000980:	4382      	bics	r2, r0
 8000982:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000984:	680b      	ldr	r3, [r1, #0]
 8000986:	001a      	movs	r2, r3
 8000988:	3a10      	subs	r2, #16
 800098a:	2a02      	cmp	r2, #2
 800098c:	d81b      	bhi.n	80009c6 <HAL_ADC_ConfigChannel+0x126>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800098e:	4a11      	ldr	r2, [pc, #68]	; (80009d4 <HAL_ADC_ConfigChannel+0x134>)
 8000990:	6812      	ldr	r2, [r2, #0]
 8000992:	2b10      	cmp	r3, #16
 8000994:	d009      	beq.n	80009aa <HAL_ADC_ConfigChannel+0x10a>
 8000996:	2b11      	cmp	r3, #17
 8000998:	d005      	beq.n	80009a6 <HAL_ADC_ConfigChannel+0x106>
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <HAL_ADC_ConfigChannel+0x140>)
 800099c:	4013      	ands	r3, r2
 800099e:	4a0d      	ldr	r2, [pc, #52]	; (80009d4 <HAL_ADC_ConfigChannel+0x134>)
 80009a0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009a2:	2000      	movs	r0, #0
 80009a4:	e008      	b.n	80009b8 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <HAL_ADC_ConfigChannel+0x144>)
 80009a8:	e7f8      	b.n	800099c <HAL_ADC_ConfigChannel+0xfc>
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <HAL_ADC_ConfigChannel+0x148>)
 80009ac:	e7f6      	b.n	800099c <HAL_ADC_ConfigChannel+0xfc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009ae:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80009b0:	2220      	movs	r2, #32
 80009b2:	4313      	orrs	r3, r2
 80009b4:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80009b6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2340      	movs	r3, #64	; 0x40
 80009bc:	54e2      	strb	r2, [r4, r3]
}
 80009be:	b003      	add	sp, #12
 80009c0:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009c2:	2000      	movs	r0, #0
 80009c4:	e7f8      	b.n	80009b8 <HAL_ADC_ConfigChannel+0x118>
 80009c6:	2000      	movs	r0, #0
 80009c8:	e7f6      	b.n	80009b8 <HAL_ADC_ConfigChannel+0x118>
  __HAL_LOCK(hadc);
 80009ca:	2002      	movs	r0, #2
 80009cc:	e7f7      	b.n	80009be <HAL_ADC_ConfigChannel+0x11e>
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	00001001 	.word	0x00001001
 80009d4:	40012708 	.word	0x40012708
 80009d8:	2000006c 	.word	0x2000006c
 80009dc:	000f4240 	.word	0x000f4240
 80009e0:	feffffff 	.word	0xfeffffff
 80009e4:	ffbfffff 	.word	0xffbfffff
 80009e8:	ff7fffff 	.word	0xff7fffff

080009ec <HAL_ADC_AnalogWDGConfig>:
{
 80009ec:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	5cc3      	ldrb	r3, [r0, r3]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d048      	beq.n	8000a88 <HAL_ADC_AnalogWDGConfig+0x9c>
 80009f6:	2201      	movs	r2, #1
 80009f8:	2340      	movs	r3, #64	; 0x40
 80009fa:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80009fc:	6803      	ldr	r3, [r0, #0]
 80009fe:	689a      	ldr	r2, [r3, #8]
 8000a00:	0752      	lsls	r2, r2, #29
 8000a02:	d437      	bmi.n	8000a74 <HAL_ADC_AnalogWDGConfig+0x88>
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_AWDSGL |
 8000a04:	68da      	ldr	r2, [r3, #12]
 8000a06:	4c21      	ldr	r4, [pc, #132]	; (8000a8c <HAL_ADC_AnalogWDGConfig+0xa0>)
 8000a08:	4022      	ands	r2, r4
 8000a0a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= ( AnalogWDGConfig->WatchdogMode            |
 8000a0c:	6804      	ldr	r4, [r0, #0]
 8000a0e:	68e3      	ldr	r3, [r4, #12]
                               ADC_CFGR_AWDCH(AnalogWDGConfig->Channel)  );
 8000a10:	684a      	ldr	r2, [r1, #4]
 8000a12:	0692      	lsls	r2, r2, #26
    hadc->Instance->CFGR1 |= ( AnalogWDGConfig->WatchdogMode            |
 8000a14:	680d      	ldr	r5, [r1, #0]
 8000a16:	432a      	orrs	r2, r5
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	60e3      	str	r3, [r4, #12]
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8000a1c:	6805      	ldr	r5, [r0, #0]
 8000a1e:	68eb      	ldr	r3, [r5, #12]
 8000a20:	08db      	lsrs	r3, r3, #3
 8000a22:	2203      	movs	r2, #3
 8000a24:	4013      	ands	r3, r2
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	68cc      	ldr	r4, [r1, #12]
 8000a2a:	409c      	lsls	r4, r3
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8000a2c:	68eb      	ldr	r3, [r5, #12]
 8000a2e:	08db      	lsrs	r3, r3, #3
 8000a30:	401a      	ands	r2, r3
 8000a32:	0052      	lsls	r2, r2, #1
 8000a34:	690b      	ldr	r3, [r1, #16]
 8000a36:	4093      	lsls	r3, r2
    hadc->Instance->TR &= ~(ADC_TR_HT | ADC_TR_LT);
 8000a38:	6a2a      	ldr	r2, [r5, #32]
 8000a3a:	4e15      	ldr	r6, [pc, #84]	; (8000a90 <HAL_ADC_AnalogWDGConfig+0xa4>)
 8000a3c:	4032      	ands	r2, r6
 8000a3e:	622a      	str	r2, [r5, #32]
    hadc->Instance->TR |=  ( ADC_TRX_HIGHTHRESHOLD (tmpAWDHighThresholdShifted) |
 8000a40:	6805      	ldr	r5, [r0, #0]
 8000a42:	6a2a      	ldr	r2, [r5, #32]
 8000a44:	0424      	lsls	r4, r4, #16
 8000a46:	4323      	orrs	r3, r4
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	622b      	str	r3, [r5, #32]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_IT_AWD);
 8000a4c:	6803      	ldr	r3, [r0, #0]
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	601a      	str	r2, [r3, #0]
    if(AnalogWDGConfig->ITMode == ENABLE)
 8000a52:	688b      	ldr	r3, [r1, #8]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d006      	beq.n	8000a66 <HAL_ADC_AnalogWDGConfig+0x7a>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8000a58:	6802      	ldr	r2, [r0, #0]
 8000a5a:	6853      	ldr	r3, [r2, #4]
 8000a5c:	2180      	movs	r1, #128	; 0x80
 8000a5e:	438b      	bics	r3, r1
 8000a60:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a62:	2300      	movs	r3, #0
 8000a64:	e00b      	b.n	8000a7e <HAL_ADC_AnalogWDGConfig+0x92>
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8000a66:	6802      	ldr	r2, [r0, #0]
 8000a68:	6853      	ldr	r3, [r2, #4]
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	430b      	orrs	r3, r1
 8000a6e:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	e004      	b.n	8000a7e <HAL_ADC_AnalogWDGConfig+0x92>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a74:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000a76:	2220      	movs	r2, #32
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
  __HAL_UNLOCK(hadc);
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2240      	movs	r2, #64	; 0x40
 8000a82:	5481      	strb	r1, [r0, r2]
}
 8000a84:	0018      	movs	r0, r3
 8000a86:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8000a88:	2302      	movs	r3, #2
 8000a8a:	e7fb      	b.n	8000a84 <HAL_ADC_AnalogWDGConfig+0x98>
 8000a8c:	833fffff 	.word	0x833fffff
 8000a90:	f000f000 	.word	0xf000f000

08000a94 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8000a94:	b570      	push	{r4, r5, r6, lr}
 8000a96:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000a98:	2340      	movs	r3, #64	; 0x40
 8000a9a:	5cc3      	ldrb	r3, [r0, r3]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d055      	beq.n	8000b4c <HAL_ADCEx_Calibration_Start+0xb8>
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2340      	movs	r3, #64	; 0x40
 8000aa4:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000aa6:	6802      	ldr	r2, [r0, #0]
 8000aa8:	6891      	ldr	r1, [r2, #8]
 8000aaa:	3b3d      	subs	r3, #61	; 0x3d
 8000aac:	400b      	ands	r3, r1
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d00b      	beq.n	8000aca <HAL_ADCEx_Calibration_Start+0x36>
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d014      	beq.n	8000ae2 <HAL_ADCEx_Calibration_Start+0x4e>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ab8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000aba:	2220      	movs	r2, #32
 8000abc:	4313      	orrs	r3, r2
 8000abe:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8000ac0:	2001      	movs	r0, #1
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2340      	movs	r3, #64	; 0x40
 8000ac6:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8000ac8:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000aca:	6813      	ldr	r3, [r2, #0]
 8000acc:	07db      	lsls	r3, r3, #31
 8000ace:	d404      	bmi.n	8000ada <HAL_ADCEx_Calibration_Start+0x46>
 8000ad0:	68d3      	ldr	r3, [r2, #12]
 8000ad2:	041b      	lsls	r3, r3, #16
 8000ad4:	d403      	bmi.n	8000ade <HAL_ADCEx_Calibration_Start+0x4a>
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e7ec      	b.n	8000ab4 <HAL_ADCEx_Calibration_Start+0x20>
 8000ada:	2301      	movs	r3, #1
 8000adc:	e7ea      	b.n	8000ab4 <HAL_ADCEx_Calibration_Start+0x20>
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e7e8      	b.n	8000ab4 <HAL_ADCEx_Calibration_Start+0x20>
    ADC_STATE_CLR_SET(hadc->State, 
 8000ae2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ae4:	491a      	ldr	r1, [pc, #104]	; (8000b50 <HAL_ADCEx_Calibration_Start+0xbc>)
 8000ae6:	400b      	ands	r3, r1
 8000ae8:	3106      	adds	r1, #6
 8000aea:	31ff      	adds	r1, #255	; 0xff
 8000aec:	430b      	orrs	r3, r1
 8000aee:	6463      	str	r3, [r4, #68]	; 0x44
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8000af0:	68d6      	ldr	r6, [r2, #12]
 8000af2:	3101      	adds	r1, #1
 8000af4:	400e      	ands	r6, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8000af6:	68d3      	ldr	r3, [r2, #12]
 8000af8:	438b      	bics	r3, r1
 8000afa:	60d3      	str	r3, [r2, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8000afc:	6822      	ldr	r2, [r4, #0]
 8000afe:	6891      	ldr	r1, [r2, #8]
 8000b00:	2380      	movs	r3, #128	; 0x80
 8000b02:	061b      	lsls	r3, r3, #24
 8000b04:	430b      	orrs	r3, r1
 8000b06:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8000b08:	f7ff fc94 	bl	8000434 <HAL_GetTick>
 8000b0c:	0005      	movs	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8000b0e:	6823      	ldr	r3, [r4, #0]
 8000b10:	689a      	ldr	r2, [r3, #8]
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	da0f      	bge.n	8000b36 <HAL_ADCEx_Calibration_Start+0xa2>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000b16:	f7ff fc8d 	bl	8000434 <HAL_GetTick>
 8000b1a:	1b40      	subs	r0, r0, r5
 8000b1c:	2802      	cmp	r0, #2
 8000b1e:	d9f6      	bls.n	8000b0e <HAL_ADCEx_Calibration_Start+0x7a>
        ADC_STATE_CLR_SET(hadc->State,
 8000b20:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b22:	2212      	movs	r2, #18
 8000b24:	4393      	bics	r3, r2
 8000b26:	3a02      	subs	r2, #2
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2340      	movs	r3, #64	; 0x40
 8000b30:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 8000b32:	2001      	movs	r0, #1
 8000b34:	e7c8      	b.n	8000ac8 <HAL_ADCEx_Calibration_Start+0x34>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8000b36:	68da      	ldr	r2, [r3, #12]
 8000b38:	4316      	orrs	r6, r2
 8000b3a:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8000b3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b3e:	2203      	movs	r2, #3
 8000b40:	4393      	bics	r3, r2
 8000b42:	3a02      	subs	r2, #2
 8000b44:	4313      	orrs	r3, r2
 8000b46:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b48:	2000      	movs	r0, #0
 8000b4a:	e7ba      	b.n	8000ac2 <HAL_ADCEx_Calibration_Start+0x2e>
  __HAL_LOCK(hadc);
 8000b4c:	2002      	movs	r0, #2
 8000b4e:	e7bb      	b.n	8000ac8 <HAL_ADCEx_Calibration_Start+0x34>
 8000b50:	fffffefd 	.word	0xfffffefd

08000b54 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b54:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000b56:	2800      	cmp	r0, #0
 8000b58:	db11      	blt.n	8000b7e <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b5a:	0883      	lsrs	r3, r0, #2
 8000b5c:	4d14      	ldr	r5, [pc, #80]	; (8000bb0 <HAL_NVIC_SetPriority+0x5c>)
 8000b5e:	33c0      	adds	r3, #192	; 0xc0
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	595c      	ldr	r4, [r3, r5]
 8000b64:	2203      	movs	r2, #3
 8000b66:	4010      	ands	r0, r2
 8000b68:	00c0      	lsls	r0, r0, #3
 8000b6a:	32fc      	adds	r2, #252	; 0xfc
 8000b6c:	0016      	movs	r6, r2
 8000b6e:	4086      	lsls	r6, r0
 8000b70:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b72:	0189      	lsls	r1, r1, #6
 8000b74:	400a      	ands	r2, r1
 8000b76:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b78:	4322      	orrs	r2, r4
 8000b7a:	515a      	str	r2, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000b7c:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b7e:	b2c0      	uxtb	r0, r0
 8000b80:	230f      	movs	r3, #15
 8000b82:	4003      	ands	r3, r0
 8000b84:	3b08      	subs	r3, #8
 8000b86:	089b      	lsrs	r3, r3, #2
 8000b88:	3306      	adds	r3, #6
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	4a09      	ldr	r2, [pc, #36]	; (8000bb4 <HAL_NVIC_SetPriority+0x60>)
 8000b8e:	4694      	mov	ip, r2
 8000b90:	4463      	add	r3, ip
 8000b92:	685d      	ldr	r5, [r3, #4]
 8000b94:	2203      	movs	r2, #3
 8000b96:	4010      	ands	r0, r2
 8000b98:	00c0      	lsls	r0, r0, #3
 8000b9a:	24ff      	movs	r4, #255	; 0xff
 8000b9c:	0022      	movs	r2, r4
 8000b9e:	4082      	lsls	r2, r0
 8000ba0:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ba2:	0189      	lsls	r1, r1, #6
 8000ba4:	400c      	ands	r4, r1
 8000ba6:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba8:	432c      	orrs	r4, r5
 8000baa:	605c      	str	r4, [r3, #4]
 8000bac:	e7e6      	b.n	8000b7c <HAL_NVIC_SetPriority+0x28>
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	e000e100 	.word	0xe000e100
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000bb8:	231f      	movs	r3, #31
 8000bba:	4018      	ands	r0, r3
 8000bbc:	3b1e      	subs	r3, #30
 8000bbe:	4083      	lsls	r3, r0
 8000bc0:	4a01      	ldr	r2, [pc, #4]	; (8000bc8 <HAL_NVIC_EnableIRQ+0x10>)
 8000bc2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000bc4:	4770      	bx	lr
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	e000e100 	.word	0xe000e100

08000bcc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bcc:	3801      	subs	r0, #1
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <HAL_SYSTICK_Config+0x2c>)
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	d80f      	bhi.n	8000bf4 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd4:	4a09      	ldr	r2, [pc, #36]	; (8000bfc <HAL_SYSTICK_Config+0x30>)
 8000bd6:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <HAL_SYSTICK_Config+0x34>)
 8000bda:	6a03      	ldr	r3, [r0, #32]
 8000bdc:	021b      	lsls	r3, r3, #8
 8000bde:	0a1b      	lsrs	r3, r3, #8
 8000be0:	21c0      	movs	r1, #192	; 0xc0
 8000be2:	0609      	lsls	r1, r1, #24
 8000be4:	430b      	orrs	r3, r1
 8000be6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be8:	2300      	movs	r3, #0
 8000bea:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bec:	3307      	adds	r3, #7
 8000bee:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf0:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000bf2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000bf4:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000bf6:	e7fc      	b.n	8000bf2 <HAL_SYSTICK_Config+0x26>
 8000bf8:	00ffffff 	.word	0x00ffffff
 8000bfc:	e000e010 	.word	0xe000e010
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000c04:	2804      	cmp	r0, #4
 8000c06:	d005      	beq.n	8000c14 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000c08:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000c0a:	6813      	ldr	r3, [r2, #0]
 8000c0c:	2104      	movs	r1, #4
 8000c0e:	438b      	bics	r3, r1
 8000c10:	6013      	str	r3, [r2, #0]
  }
}
 8000c12:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c14:	4a02      	ldr	r2, [pc, #8]	; (8000c20 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000c16:	6813      	ldr	r3, [r2, #0]
 8000c18:	2104      	movs	r1, #4
 8000c1a:	430b      	orrs	r3, r1
 8000c1c:	6013      	str	r3, [r2, #0]
 8000c1e:	e7f8      	b.n	8000c12 <HAL_SYSTICK_CLKSourceConfig+0xe>
 8000c20:	e000e010 	.word	0xe000e010

08000c24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c24:	b570      	push	{r4, r5, r6, lr}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c26:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8000c28:	2401      	movs	r4, #1
 8000c2a:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8000c2c:	40b4      	lsls	r4, r6
 8000c2e:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000c30:	6804      	ldr	r4, [r0, #0]
 8000c32:	6063      	str	r3, [r4, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000c34:	6843      	ldr	r3, [r0, #4]
 8000c36:	2b10      	cmp	r3, #16
 8000c38:	d004      	beq.n	8000c44 <DMA_SetConfig+0x20>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000c3a:	6803      	ldr	r3, [r0, #0]
 8000c3c:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000c3e:	6803      	ldr	r3, [r0, #0]
 8000c40:	60da      	str	r2, [r3, #12]
  }
}
 8000c42:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8000c44:	6803      	ldr	r3, [r0, #0]
 8000c46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000c48:	6803      	ldr	r3, [r0, #0]
 8000c4a:	60d9      	str	r1, [r3, #12]
 8000c4c:	e7f9      	b.n	8000c42 <DMA_SetConfig+0x1e>
	...

08000c50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000c50:	b510      	push	{r4, lr}
 8000c52:	0004      	movs	r4, r0
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c54:	6803      	ldr	r3, [r0, #0]
 8000c56:	4a06      	ldr	r2, [pc, #24]	; (8000c70 <DMA_CalcBaseAndBitshift+0x20>)
 8000c58:	4694      	mov	ip, r2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	2114      	movs	r1, #20
 8000c60:	f7ff fa5a 	bl	8000118 <__udivsi3>
 8000c64:	0080      	lsls	r0, r0, #2
 8000c66:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c68:	4b02      	ldr	r3, [pc, #8]	; (8000c74 <DMA_CalcBaseAndBitshift+0x24>)
 8000c6a:	63e3      	str	r3, [r4, #60]	; 0x3c
#endif
}
 8000c6c:	bd10      	pop	{r4, pc}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	bffdfff8 	.word	0xbffdfff8
 8000c74:	40020000 	.word	0x40020000

08000c78 <HAL_DMA_Init>:
{ 
 8000c78:	b570      	push	{r4, r5, r6, lr}
 8000c7a:	1e04      	subs	r4, r0, #0
  if(NULL == hdma)
 8000c7c:	d024      	beq.n	8000cc8 <HAL_DMA_Init+0x50>
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c7e:	2521      	movs	r5, #33	; 0x21
 8000c80:	2302      	movs	r3, #2
 8000c82:	5543      	strb	r3, [r0, r5]
  tmp = hdma->Instance->CCR;
 8000c84:	6801      	ldr	r1, [r0, #0]
 8000c86:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c88:	4a10      	ldr	r2, [pc, #64]	; (8000ccc <HAL_DMA_Init+0x54>)
 8000c8a:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8000c8c:	6843      	ldr	r3, [r0, #4]
 8000c8e:	6880      	ldr	r0, [r0, #8]
 8000c90:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c92:	68e0      	ldr	r0, [r4, #12]
 8000c94:	4303      	orrs	r3, r0
 8000c96:	6920      	ldr	r0, [r4, #16]
 8000c98:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c9a:	6960      	ldr	r0, [r4, #20]
 8000c9c:	4303      	orrs	r3, r0
 8000c9e:	69a0      	ldr	r0, [r4, #24]
 8000ca0:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ca2:	69e0      	ldr	r0, [r4, #28]
 8000ca4:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8000ca6:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8000ca8:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8000caa:	0020      	movs	r0, r4
 8000cac:	f7ff ffd0 	bl	8000c50 <DMA_CalcBaseAndBitshift>
  hdma->XferCpltCallback = NULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62a3      	str	r3, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000cb4:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000cb6:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000cb8:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cba:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8000cc0:	321f      	adds	r2, #31
 8000cc2:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8000cc4:	2000      	movs	r0, #0
}  
 8000cc6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000cc8:	2001      	movs	r0, #1
 8000cca:	e7fc      	b.n	8000cc6 <HAL_DMA_Init+0x4e>
 8000ccc:	ffffc00f 	.word	0xffffc00f

08000cd0 <HAL_DMA_Start_IT>:
{
 8000cd0:	b570      	push	{r4, r5, r6, lr}
 8000cd2:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8000cd4:	2020      	movs	r0, #32
 8000cd6:	5c20      	ldrb	r0, [r4, r0]
 8000cd8:	2801      	cmp	r0, #1
 8000cda:	d032      	beq.n	8000d42 <HAL_DMA_Start_IT+0x72>
 8000cdc:	2501      	movs	r5, #1
 8000cde:	2020      	movs	r0, #32
 8000ce0:	5425      	strb	r5, [r4, r0]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ce2:	3001      	adds	r0, #1
 8000ce4:	5c20      	ldrb	r0, [r4, r0]
 8000ce6:	2801      	cmp	r0, #1
 8000ce8:	d004      	beq.n	8000cf4 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8000cea:	2200      	movs	r2, #0
 8000cec:	2320      	movs	r3, #32
 8000cee:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 8000cf0:	2002      	movs	r0, #2
} 
 8000cf2:	bd70      	pop	{r4, r5, r6, pc}
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000cf4:	3501      	adds	r5, #1
 8000cf6:	3020      	adds	r0, #32
 8000cf8:	5425      	strb	r5, [r4, r0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cfe:	6825      	ldr	r5, [r4, #0]
 8000d00:	6828      	ldr	r0, [r5, #0]
 8000d02:	2601      	movs	r6, #1
 8000d04:	43b0      	bics	r0, r6
 8000d06:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d08:	0020      	movs	r0, r4
 8000d0a:	f7ff ff8b 	bl	8000c24 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8000d0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d00b      	beq.n	8000d2c <HAL_DMA_Start_IT+0x5c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d14:	6822      	ldr	r2, [r4, #0]
 8000d16:	6813      	ldr	r3, [r2, #0]
 8000d18:	210e      	movs	r1, #14
 8000d1a:	430b      	orrs	r3, r1
 8000d1c:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000d1e:	6822      	ldr	r2, [r4, #0]
 8000d20:	6813      	ldr	r3, [r2, #0]
 8000d22:	2101      	movs	r1, #1
 8000d24:	430b      	orrs	r3, r1
 8000d26:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000d28:	2000      	movs	r0, #0
 8000d2a:	e7e2      	b.n	8000cf2 <HAL_DMA_Start_IT+0x22>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000d2c:	6822      	ldr	r2, [r4, #0]
 8000d2e:	6813      	ldr	r3, [r2, #0]
 8000d30:	210a      	movs	r1, #10
 8000d32:	430b      	orrs	r3, r1
 8000d34:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d36:	6822      	ldr	r2, [r4, #0]
 8000d38:	6813      	ldr	r3, [r2, #0]
 8000d3a:	3906      	subs	r1, #6
 8000d3c:	438b      	bics	r3, r1
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	e7ed      	b.n	8000d1e <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8000d42:	2002      	movs	r0, #2
 8000d44:	e7d5      	b.n	8000cf2 <HAL_DMA_Start_IT+0x22>

08000d46 <HAL_DMA_Abort_IT>:
{  
 8000d46:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d48:	2321      	movs	r3, #33	; 0x21
 8000d4a:	5cc3      	ldrb	r3, [r0, r3]
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d003      	beq.n	8000d58 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d50:	2304      	movs	r3, #4
 8000d52:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000d54:	2001      	movs	r0, #1
}
 8000d56:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d58:	6802      	ldr	r2, [r0, #0]
 8000d5a:	6813      	ldr	r3, [r2, #0]
 8000d5c:	210e      	movs	r1, #14
 8000d5e:	438b      	bics	r3, r1
 8000d60:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d62:	6801      	ldr	r1, [r0, #0]
 8000d64:	680a      	ldr	r2, [r1, #0]
 8000d66:	2301      	movs	r3, #1
 8000d68:	439a      	bics	r2, r3
 8000d6a:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d6c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000d6e:	0019      	movs	r1, r3
 8000d70:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8000d72:	40a1      	lsls	r1, r4
 8000d74:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000d76:	2221      	movs	r2, #33	; 0x21
 8000d78:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	331f      	adds	r3, #31
 8000d7e:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 8000d80:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d002      	beq.n	8000d8c <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8000d86:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000d88:	2000      	movs	r0, #0
 8000d8a:	e7e4      	b.n	8000d56 <HAL_DMA_Abort_IT+0x10>
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	e7e2      	b.n	8000d56 <HAL_DMA_Abort_IT+0x10>

08000d90 <HAL_DMA_IRQHandler>:
{
 8000d90:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d92:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000d94:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000d96:	6804      	ldr	r4, [r0, #0]
 8000d98:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000d9a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	408b      	lsls	r3, r1
 8000da0:	4213      	tst	r3, r2
 8000da2:	d012      	beq.n	8000dca <HAL_DMA_IRQHandler+0x3a>
 8000da4:	076b      	lsls	r3, r5, #29
 8000da6:	d510      	bpl.n	8000dca <HAL_DMA_IRQHandler+0x3a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000da8:	6823      	ldr	r3, [r4, #0]
 8000daa:	069b      	lsls	r3, r3, #26
 8000dac:	d403      	bmi.n	8000db6 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000dae:	6823      	ldr	r3, [r4, #0]
 8000db0:	2204      	movs	r2, #4
 8000db2:	4393      	bics	r3, r2
 8000db4:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000db6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000db8:	2304      	movs	r3, #4
 8000dba:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000dbc:	408b      	lsls	r3, r1
 8000dbe:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000dc0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d000      	beq.n	8000dc8 <HAL_DMA_IRQHandler+0x38>
  		hdma->XferHalfCpltCallback(hdma);
 8000dc6:	4798      	blx	r3
}  
 8000dc8:	bd70      	pop	{r4, r5, r6, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000dca:	2302      	movs	r3, #2
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	4213      	tst	r3, r2
 8000dd0:	d018      	beq.n	8000e04 <HAL_DMA_IRQHandler+0x74>
 8000dd2:	07ab      	lsls	r3, r5, #30
 8000dd4:	d516      	bpl.n	8000e04 <HAL_DMA_IRQHandler+0x74>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dd6:	6823      	ldr	r3, [r4, #0]
 8000dd8:	069b      	lsls	r3, r3, #26
 8000dda:	d406      	bmi.n	8000dea <HAL_DMA_IRQHandler+0x5a>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000ddc:	6823      	ldr	r3, [r4, #0]
 8000dde:	220a      	movs	r2, #10
 8000de0:	4393      	bics	r3, r2
 8000de2:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000de4:	3a09      	subs	r2, #9
 8000de6:	2321      	movs	r3, #33	; 0x21
 8000de8:	54c2      	strb	r2, [r0, r3]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000dea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000dec:	2302      	movs	r3, #2
 8000dee:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000df0:	408b      	lsls	r3, r1
 8000df2:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2320      	movs	r3, #32
 8000df8:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 8000dfa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d0e3      	beq.n	8000dc8 <HAL_DMA_IRQHandler+0x38>
  		hdma->XferCpltCallback(hdma);
 8000e00:	4798      	blx	r3
 8000e02:	e7e1      	b.n	8000dc8 <HAL_DMA_IRQHandler+0x38>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e04:	2308      	movs	r3, #8
 8000e06:	408b      	lsls	r3, r1
 8000e08:	4213      	tst	r3, r2
 8000e0a:	d0dd      	beq.n	8000dc8 <HAL_DMA_IRQHandler+0x38>
 8000e0c:	072b      	lsls	r3, r5, #28
 8000e0e:	d5db      	bpl.n	8000dc8 <HAL_DMA_IRQHandler+0x38>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e10:	6823      	ldr	r3, [r4, #0]
 8000e12:	220e      	movs	r2, #14
 8000e14:	4393      	bics	r3, r2
 8000e16:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e18:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	0019      	movs	r1, r3
 8000e1e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8000e20:	40a1      	lsls	r1, r4
 8000e22:	6051      	str	r1, [r2, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e24:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000e26:	2221      	movs	r2, #33	; 0x21
 8000e28:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma); 
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	331f      	adds	r3, #31
 8000e2e:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 8000e30:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0c8      	beq.n	8000dc8 <HAL_DMA_IRQHandler+0x38>
    	hdma->XferErrorCallback(hdma);
 8000e36:	4798      	blx	r3
}  
 8000e38:	e7c6      	b.n	8000dc8 <HAL_DMA_IRQHandler+0x38>
	...

08000e3c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000e3c:	b510      	push	{r4, lr}
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e3e:	2200      	movs	r2, #0
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <FLASH_Program_HalfWord+0x18>)
 8000e42:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000e44:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <FLASH_Program_HalfWord+0x1c>)
 8000e46:	6913      	ldr	r3, [r2, #16]
 8000e48:	2401      	movs	r4, #1
 8000e4a:	4323      	orrs	r3, r4
 8000e4c:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000e4e:	8001      	strh	r1, [r0, #0]
}
 8000e50:	bd10      	pop	{r4, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	200004c8 	.word	0x200004c8
 8000e58:	40022000 	.word	0x40022000

08000e5c <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <FLASH_SetErrorCode+0x34>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	06db      	lsls	r3, r3, #27
 8000e62:	d513      	bpl.n	8000e8c <FLASH_SetErrorCode+0x30>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000e64:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <FLASH_SetErrorCode+0x38>)
 8000e66:	69d3      	ldr	r3, [r2, #28]
 8000e68:	2102      	movs	r1, #2
 8000e6a:	430b      	orrs	r3, r1
 8000e6c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000e6e:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <FLASH_SetErrorCode+0x34>)
 8000e72:	68d2      	ldr	r2, [r2, #12]
 8000e74:	0752      	lsls	r2, r2, #29
 8000e76:	d506      	bpl.n	8000e86 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000e78:	4906      	ldr	r1, [pc, #24]	; (8000e94 <FLASH_SetErrorCode+0x38>)
 8000e7a:	69ca      	ldr	r2, [r1, #28]
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	4302      	orrs	r2, r0
 8000e80:	61ca      	str	r2, [r1, #28]
    flags |= FLASH_FLAG_PGERR;
 8000e82:	2204      	movs	r2, #4
 8000e84:	4313      	orrs	r3, r2
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000e86:	4a02      	ldr	r2, [pc, #8]	; (8000e90 <FLASH_SetErrorCode+0x34>)
 8000e88:	60d3      	str	r3, [r2, #12]
}  
 8000e8a:	4770      	bx	lr
  uint32_t flags = 0U;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e7ef      	b.n	8000e70 <FLASH_SetErrorCode+0x14>
 8000e90:	40022000 	.word	0x40022000
 8000e94:	200004c8 	.word	0x200004c8

08000e98 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_FLASH_Unlock+0x1c>)
 8000e9a:	691b      	ldr	r3, [r3, #16]
 8000e9c:	061b      	lsls	r3, r3, #24
 8000e9e:	d506      	bpl.n	8000eae <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <HAL_FLASH_Unlock+0x1c>)
 8000ea2:	4a05      	ldr	r2, [pc, #20]	; (8000eb8 <HAL_FLASH_Unlock+0x20>)
 8000ea4:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000ea6:	4a05      	ldr	r2, [pc, #20]	; (8000ebc <HAL_FLASH_Unlock+0x24>)
 8000ea8:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8000eaa:	2000      	movs	r0, #0
}
 8000eac:	4770      	bx	lr
    return HAL_ERROR;
 8000eae:	2001      	movs	r0, #1
 8000eb0:	e7fc      	b.n	8000eac <HAL_FLASH_Unlock+0x14>
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	40022000 	.word	0x40022000
 8000eb8:	45670123 	.word	0x45670123
 8000ebc:	cdef89ab 	.word	0xcdef89ab

08000ec0 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000ec0:	4a03      	ldr	r2, [pc, #12]	; (8000ed0 <HAL_FLASH_Lock+0x10>)
 8000ec2:	6913      	ldr	r3, [r2, #16]
 8000ec4:	2180      	movs	r1, #128	; 0x80
 8000ec6:	430b      	orrs	r3, r1
 8000ec8:	6113      	str	r3, [r2, #16]
}
 8000eca:	2000      	movs	r0, #0
 8000ecc:	4770      	bx	lr
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	40022000 	.word	0x40022000

08000ed4 <FLASH_WaitForLastOperation>:
{
 8000ed4:	b570      	push	{r4, r5, r6, lr}
 8000ed6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ed8:	f7ff faac 	bl	8000434 <HAL_GetTick>
 8000edc:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <FLASH_WaitForLastOperation+0x58>)
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	07db      	lsls	r3, r3, #31
 8000ee4:	d50a      	bpl.n	8000efc <FLASH_WaitForLastOperation+0x28>
    if (Timeout != HAL_MAX_DELAY)
 8000ee6:	1c63      	adds	r3, r4, #1
 8000ee8:	d0f9      	beq.n	8000ede <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000eea:	2c00      	cmp	r4, #0
 8000eec:	d019      	beq.n	8000f22 <FLASH_WaitForLastOperation+0x4e>
 8000eee:	f7ff faa1 	bl	8000434 <HAL_GetTick>
 8000ef2:	1b40      	subs	r0, r0, r5
 8000ef4:	4284      	cmp	r4, r0
 8000ef6:	d2f2      	bcs.n	8000ede <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8000ef8:	2003      	movs	r0, #3
 8000efa:	e011      	b.n	8000f20 <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <FLASH_WaitForLastOperation+0x58>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	069b      	lsls	r3, r3, #26
 8000f02:	d502      	bpl.n	8000f0a <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000f04:	2220      	movs	r2, #32
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <FLASH_WaitForLastOperation+0x58>)
 8000f08:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <FLASH_WaitForLastOperation+0x58>)
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	06db      	lsls	r3, r3, #27
 8000f10:	d403      	bmi.n	8000f1a <FLASH_WaitForLastOperation+0x46>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <FLASH_WaitForLastOperation+0x58>)
 8000f14:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000f16:	075b      	lsls	r3, r3, #29
 8000f18:	d505      	bpl.n	8000f26 <FLASH_WaitForLastOperation+0x52>
    FLASH_SetErrorCode();
 8000f1a:	f7ff ff9f 	bl	8000e5c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000f1e:	2001      	movs	r0, #1
}
 8000f20:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 8000f22:	2003      	movs	r0, #3
 8000f24:	e7fc      	b.n	8000f20 <FLASH_WaitForLastOperation+0x4c>
  return HAL_OK;
 8000f26:	2000      	movs	r0, #0
 8000f28:	e7fa      	b.n	8000f20 <FLASH_WaitForLastOperation+0x4c>
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	40022000 	.word	0x40022000

08000f30 <HAL_FLASH_Program>:
{
 8000f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f32:	b083      	sub	sp, #12
 8000f34:	0004      	movs	r4, r0
 8000f36:	000e      	movs	r6, r1
 8000f38:	9201      	str	r2, [sp, #4]
 8000f3a:	001f      	movs	r7, r3
  __HAL_LOCK(&pFlash);
 8000f3c:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <HAL_FLASH_Program+0x90>)
 8000f3e:	7e1b      	ldrb	r3, [r3, #24]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d102      	bne.n	8000f4a <HAL_FLASH_Program+0x1a>
 8000f44:	2002      	movs	r0, #2
}
 8000f46:	b003      	add	sp, #12
 8000f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <HAL_FLASH_Program+0x90>)
 8000f4e:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f50:	481c      	ldr	r0, [pc, #112]	; (8000fc4 <HAL_FLASH_Program+0x94>)
 8000f52:	f7ff ffbf 	bl	8000ed4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000f56:	2800      	cmp	r0, #0
 8000f58:	d12d      	bne.n	8000fb6 <HAL_FLASH_Program+0x86>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000f5a:	2c01      	cmp	r4, #1
 8000f5c:	d006      	beq.n	8000f6c <HAL_FLASH_Program+0x3c>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000f5e:	2c02      	cmp	r4, #2
 8000f60:	d002      	beq.n	8000f68 <HAL_FLASH_Program+0x38>
      nbiterations = 4U;
 8000f62:	2504      	movs	r5, #4
    for (index = 0U; index < nbiterations; index++)
 8000f64:	2400      	movs	r4, #0
 8000f66:	e01b      	b.n	8000fa0 <HAL_FLASH_Program+0x70>
      nbiterations = 2U;
 8000f68:	2502      	movs	r5, #2
 8000f6a:	e7fb      	b.n	8000f64 <HAL_FLASH_Program+0x34>
      nbiterations = 1U;
 8000f6c:	2501      	movs	r5, #1
 8000f6e:	e7f9      	b.n	8000f64 <HAL_FLASH_Program+0x34>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000f70:	2220      	movs	r2, #32
 8000f72:	1ad2      	subs	r2, r2, r3
 8000f74:	0039      	movs	r1, r7
 8000f76:	4091      	lsls	r1, r2
 8000f78:	000a      	movs	r2, r1
 8000f7a:	9901      	ldr	r1, [sp, #4]
 8000f7c:	40d9      	lsrs	r1, r3
 8000f7e:	4311      	orrs	r1, r2
 8000f80:	b289      	uxth	r1, r1
 8000f82:	1980      	adds	r0, r0, r6
 8000f84:	f7ff ff5a 	bl	8000e3c <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f88:	480e      	ldr	r0, [pc, #56]	; (8000fc4 <HAL_FLASH_Program+0x94>)
 8000f8a:	f7ff ffa3 	bl	8000ed4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <HAL_FLASH_Program+0x98>)
 8000f90:	6913      	ldr	r3, [r2, #16]
 8000f92:	2101      	movs	r1, #1
 8000f94:	438b      	bics	r3, r1
 8000f96:	6113      	str	r3, [r2, #16]
      if (status != HAL_OK)
 8000f98:	2800      	cmp	r0, #0
 8000f9a:	d10c      	bne.n	8000fb6 <HAL_FLASH_Program+0x86>
    for (index = 0U; index < nbiterations; index++)
 8000f9c:	3401      	adds	r4, #1
 8000f9e:	b2e4      	uxtb	r4, r4
 8000fa0:	42ac      	cmp	r4, r5
 8000fa2:	d208      	bcs.n	8000fb6 <HAL_FLASH_Program+0x86>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000fa4:	0060      	lsls	r0, r4, #1
 8000fa6:	0123      	lsls	r3, r4, #4
 8000fa8:	2220      	movs	r2, #32
 8000faa:	4252      	negs	r2, r2
 8000fac:	189a      	adds	r2, r3, r2
 8000fae:	d4df      	bmi.n	8000f70 <HAL_FLASH_Program+0x40>
 8000fb0:	0039      	movs	r1, r7
 8000fb2:	40d1      	lsrs	r1, r2
 8000fb4:	e7e4      	b.n	8000f80 <HAL_FLASH_Program+0x50>
  __HAL_UNLOCK(&pFlash);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4b01      	ldr	r3, [pc, #4]	; (8000fc0 <HAL_FLASH_Program+0x90>)
 8000fba:	761a      	strb	r2, [r3, #24]
  return status;
 8000fbc:	e7c3      	b.n	8000f46 <HAL_FLASH_Program+0x16>
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	200004c8 	.word	0x200004c8
 8000fc4:	0000c350 	.word	0x0000c350
 8000fc8:	40022000 	.word	0x40022000

08000fcc <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000fcc:	2200      	movs	r2, #0
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <FLASH_MassErase+0x1c>)
 8000fd0:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <FLASH_MassErase+0x20>)
 8000fd4:	691a      	ldr	r2, [r3, #16]
 8000fd6:	2104      	movs	r1, #4
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000fdc:	691a      	ldr	r2, [r3, #16]
 8000fde:	313c      	adds	r1, #60	; 0x3c
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	611a      	str	r2, [r3, #16]
}
 8000fe4:	4770      	bx	lr
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	200004c8 	.word	0x200004c8
 8000fec:	40022000 	.word	0x40022000

08000ff0 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <FLASH_PageErase+0x1c>)
 8000ff4:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <FLASH_PageErase+0x20>)
 8000ff8:	691a      	ldr	r2, [r3, #16]
 8000ffa:	2102      	movs	r1, #2
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001000:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001002:	691a      	ldr	r2, [r3, #16]
 8001004:	313e      	adds	r1, #62	; 0x3e
 8001006:	430a      	orrs	r2, r1
 8001008:	611a      	str	r2, [r3, #16]
}
 800100a:	4770      	bx	lr
 800100c:	200004c8 	.word	0x200004c8
 8001010:	40022000 	.word	0x40022000

08001014 <HAL_FLASHEx_Erase>:
{
 8001014:	b570      	push	{r4, r5, r6, lr}
 8001016:	0005      	movs	r5, r0
 8001018:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 800101a:	4b24      	ldr	r3, [pc, #144]	; (80010ac <HAL_FLASHEx_Erase+0x98>)
 800101c:	7e1b      	ldrb	r3, [r3, #24]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d041      	beq.n	80010a6 <HAL_FLASHEx_Erase+0x92>
 8001022:	2201      	movs	r2, #1
 8001024:	4b21      	ldr	r3, [pc, #132]	; (80010ac <HAL_FLASHEx_Erase+0x98>)
 8001026:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001028:	6803      	ldr	r3, [r0, #0]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d022      	beq.n	8001074 <HAL_FLASHEx_Erase+0x60>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800102e:	4820      	ldr	r0, [pc, #128]	; (80010b0 <HAL_FLASHEx_Erase+0x9c>)
 8001030:	f7ff ff50 	bl	8000ed4 <FLASH_WaitForLastOperation>
 8001034:	2800      	cmp	r0, #0
 8001036:	d131      	bne.n	800109c <HAL_FLASHEx_Erase+0x88>
        *PageError = 0xFFFFFFFFU;
 8001038:	2301      	movs	r3, #1
 800103a:	425b      	negs	r3, r3
 800103c:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 800103e:	686c      	ldr	r4, [r5, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001040:	3001      	adds	r0, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001042:	68ab      	ldr	r3, [r5, #8]
 8001044:	029b      	lsls	r3, r3, #10
 8001046:	686a      	ldr	r2, [r5, #4]
 8001048:	4694      	mov	ip, r2
 800104a:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 800104c:	429c      	cmp	r4, r3
 800104e:	d226      	bcs.n	800109e <HAL_FLASHEx_Erase+0x8a>
          FLASH_PageErase(address);
 8001050:	0020      	movs	r0, r4
 8001052:	f7ff ffcd 	bl	8000ff0 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001056:	4816      	ldr	r0, [pc, #88]	; (80010b0 <HAL_FLASHEx_Erase+0x9c>)
 8001058:	f7ff ff3c 	bl	8000ed4 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800105c:	4a15      	ldr	r2, [pc, #84]	; (80010b4 <HAL_FLASHEx_Erase+0xa0>)
 800105e:	6913      	ldr	r3, [r2, #16]
 8001060:	2102      	movs	r1, #2
 8001062:	438b      	bics	r3, r1
 8001064:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8001066:	2800      	cmp	r0, #0
 8001068:	d116      	bne.n	8001098 <HAL_FLASHEx_Erase+0x84>
            address += FLASH_PAGE_SIZE)
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	469c      	mov	ip, r3
 8001070:	4464      	add	r4, ip
 8001072:	e7e6      	b.n	8001042 <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001074:	480e      	ldr	r0, [pc, #56]	; (80010b0 <HAL_FLASHEx_Erase+0x9c>)
 8001076:	f7ff ff2d 	bl	8000ed4 <FLASH_WaitForLastOperation>
 800107a:	2800      	cmp	r0, #0
 800107c:	d001      	beq.n	8001082 <HAL_FLASHEx_Erase+0x6e>
  HAL_StatusTypeDef status = HAL_ERROR;
 800107e:	2001      	movs	r0, #1
 8001080:	e00d      	b.n	800109e <HAL_FLASHEx_Erase+0x8a>
        FLASH_MassErase();
 8001082:	f7ff ffa3 	bl	8000fcc <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001086:	480a      	ldr	r0, [pc, #40]	; (80010b0 <HAL_FLASHEx_Erase+0x9c>)
 8001088:	f7ff ff24 	bl	8000ed4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800108c:	4a09      	ldr	r2, [pc, #36]	; (80010b4 <HAL_FLASHEx_Erase+0xa0>)
 800108e:	6913      	ldr	r3, [r2, #16]
 8001090:	2104      	movs	r1, #4
 8001092:	438b      	bics	r3, r1
 8001094:	6113      	str	r3, [r2, #16]
 8001096:	e002      	b.n	800109e <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 8001098:	6034      	str	r4, [r6, #0]
            break;
 800109a:	e000      	b.n	800109e <HAL_FLASHEx_Erase+0x8a>
  HAL_StatusTypeDef status = HAL_ERROR;
 800109c:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 800109e:	2200      	movs	r2, #0
 80010a0:	4b02      	ldr	r3, [pc, #8]	; (80010ac <HAL_FLASHEx_Erase+0x98>)
 80010a2:	761a      	strb	r2, [r3, #24]
}
 80010a4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 80010a6:	2002      	movs	r0, #2
 80010a8:	e7fc      	b.n	80010a4 <HAL_FLASHEx_Erase+0x90>
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	200004c8 	.word	0x200004c8
 80010b0:	0000c350 	.word	0x0000c350
 80010b4:	40022000 	.word	0x40022000

080010b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80010b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ba:	46c6      	mov	lr, r8
 80010bc:	b500      	push	{lr}
 80010be:	b082      	sub	sp, #8
  uint32_t position = 0x00U;
 80010c0:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80010c2:	e07b      	b.n	80011bc <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80010c4:	08df      	lsrs	r7, r3, #3
 80010c6:	3708      	adds	r7, #8
 80010c8:	00bf      	lsls	r7, r7, #2
 80010ca:	583e      	ldr	r6, [r7, r0]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80010cc:	2507      	movs	r5, #7
 80010ce:	401d      	ands	r5, r3
 80010d0:	00ad      	lsls	r5, r5, #2
 80010d2:	240f      	movs	r4, #15
 80010d4:	40ac      	lsls	r4, r5
 80010d6:	43a6      	bics	r6, r4
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80010d8:	690c      	ldr	r4, [r1, #16]
 80010da:	40ac      	lsls	r4, r5
 80010dc:	0025      	movs	r5, r4
 80010de:	4335      	orrs	r5, r6
        GPIOx->AFR[position >> 3U] = temp;
 80010e0:	503d      	str	r5, [r7, r0]
 80010e2:	e07b      	b.n	80011dc <HAL_GPIO_Init+0x124>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010e4:	6885      	ldr	r5, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010e6:	4664      	mov	r4, ip
 80010e8:	4025      	ands	r5, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80010ea:	68ce      	ldr	r6, [r1, #12]
 80010ec:	40be      	lsls	r6, r7
 80010ee:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80010f0:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f2:	6845      	ldr	r5, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80010f4:	002c      	movs	r4, r5
 80010f6:	4645      	mov	r5, r8
 80010f8:	43ac      	bics	r4, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010fa:	684d      	ldr	r5, [r1, #4]
 80010fc:	092e      	lsrs	r6, r5, #4
 80010fe:	2501      	movs	r5, #1
 8001100:	4035      	ands	r5, r6
 8001102:	409d      	lsls	r5, r3
 8001104:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001106:	6044      	str	r4, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001108:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 800110a:	4665      	mov	r5, ip
 800110c:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800110e:	688d      	ldr	r5, [r1, #8]
 8001110:	40bd      	lsls	r5, r7
 8001112:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001114:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001116:	684c      	ldr	r4, [r1, #4]
 8001118:	00e4      	lsls	r4, r4, #3
 800111a:	d54e      	bpl.n	80011ba <HAL_GPIO_Init+0x102>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111c:	4d41      	ldr	r5, [pc, #260]	; (8001224 <HAL_GPIO_Init+0x16c>)
 800111e:	69ae      	ldr	r6, [r5, #24]
 8001120:	2401      	movs	r4, #1
 8001122:	4326      	orrs	r6, r4
 8001124:	61ae      	str	r6, [r5, #24]
 8001126:	69ad      	ldr	r5, [r5, #24]
 8001128:	402c      	ands	r4, r5
 800112a:	9401      	str	r4, [sp, #4]
 800112c:	9c01      	ldr	r4, [sp, #4]
  
        temp = SYSCFG->EXTICR[position >> 2];
 800112e:	089c      	lsrs	r4, r3, #2
 8001130:	1ca5      	adds	r5, r4, #2
 8001132:	00ad      	lsls	r5, r5, #2
 8001134:	4e3c      	ldr	r6, [pc, #240]	; (8001228 <HAL_GPIO_Init+0x170>)
 8001136:	59ae      	ldr	r6, [r5, r6]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001138:	2503      	movs	r5, #3
 800113a:	401d      	ands	r5, r3
 800113c:	00ad      	lsls	r5, r5, #2
 800113e:	270f      	movs	r7, #15
 8001140:	40af      	lsls	r7, r5
 8001142:	43be      	bics	r6, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001144:	2790      	movs	r7, #144	; 0x90
 8001146:	05ff      	lsls	r7, r7, #23
 8001148:	42b8      	cmp	r0, r7
 800114a:	d062      	beq.n	8001212 <HAL_GPIO_Init+0x15a>
 800114c:	4f37      	ldr	r7, [pc, #220]	; (800122c <HAL_GPIO_Init+0x174>)
 800114e:	42b8      	cmp	r0, r7
 8001150:	d061      	beq.n	8001216 <HAL_GPIO_Init+0x15e>
 8001152:	4f37      	ldr	r7, [pc, #220]	; (8001230 <HAL_GPIO_Init+0x178>)
 8001154:	42b8      	cmp	r0, r7
 8001156:	d05a      	beq.n	800120e <HAL_GPIO_Init+0x156>
 8001158:	2705      	movs	r7, #5
 800115a:	40af      	lsls	r7, r5
 800115c:	003d      	movs	r5, r7
 800115e:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8001160:	3402      	adds	r4, #2
 8001162:	00a4      	lsls	r4, r4, #2
 8001164:	4e30      	ldr	r6, [pc, #192]	; (8001228 <HAL_GPIO_Init+0x170>)
 8001166:	51a5      	str	r5, [r4, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001168:	4c32      	ldr	r4, [pc, #200]	; (8001234 <HAL_GPIO_Init+0x17c>)
 800116a:	6825      	ldr	r5, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800116c:	43d4      	mvns	r4, r2
 800116e:	0026      	movs	r6, r4
 8001170:	402e      	ands	r6, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001172:	684f      	ldr	r7, [r1, #4]
 8001174:	03ff      	lsls	r7, r7, #15
 8001176:	d501      	bpl.n	800117c <HAL_GPIO_Init+0xc4>
        {
          SET_BIT(temp, iocurrent); 
 8001178:	4315      	orrs	r5, r2
 800117a:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 800117c:	4d2d      	ldr	r5, [pc, #180]	; (8001234 <HAL_GPIO_Init+0x17c>)
 800117e:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8001180:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001182:	002e      	movs	r6, r5
 8001184:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001186:	684f      	ldr	r7, [r1, #4]
 8001188:	03bf      	lsls	r7, r7, #14
 800118a:	d501      	bpl.n	8001190 <HAL_GPIO_Init+0xd8>
        { 
          SET_BIT(temp, iocurrent); 
 800118c:	4315      	orrs	r5, r2
 800118e:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 8001190:	4d28      	ldr	r5, [pc, #160]	; (8001234 <HAL_GPIO_Init+0x17c>)
 8001192:	606e      	str	r6, [r5, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001194:	68ad      	ldr	r5, [r5, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001196:	002e      	movs	r6, r5
 8001198:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800119a:	684f      	ldr	r7, [r1, #4]
 800119c:	02ff      	lsls	r7, r7, #11
 800119e:	d501      	bpl.n	80011a4 <HAL_GPIO_Init+0xec>
        {
          SET_BIT(temp, iocurrent); 
 80011a0:	4315      	orrs	r5, r2
 80011a2:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 80011a4:	4d23      	ldr	r5, [pc, #140]	; (8001234 <HAL_GPIO_Init+0x17c>)
 80011a6:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80011a8:	68ed      	ldr	r5, [r5, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80011aa:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011ac:	684e      	ldr	r6, [r1, #4]
 80011ae:	02b6      	lsls	r6, r6, #10
 80011b0:	d501      	bpl.n	80011b6 <HAL_GPIO_Init+0xfe>
        {
          SET_BIT(temp, iocurrent); 
 80011b2:	432a      	orrs	r2, r5
 80011b4:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 80011b6:	4a1f      	ldr	r2, [pc, #124]	; (8001234 <HAL_GPIO_Init+0x17c>)
 80011b8:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 80011ba:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 80011bc:	680a      	ldr	r2, [r1, #0]
 80011be:	0014      	movs	r4, r2
 80011c0:	40dc      	lsrs	r4, r3
 80011c2:	d02a      	beq.n	800121a <HAL_GPIO_Init+0x162>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80011c4:	2401      	movs	r4, #1
 80011c6:	409c      	lsls	r4, r3
 80011c8:	46a0      	mov	r8, r4
 80011ca:	4022      	ands	r2, r4
    if(iocurrent)
 80011cc:	d0f5      	beq.n	80011ba <HAL_GPIO_Init+0x102>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80011ce:	684d      	ldr	r5, [r1, #4]
 80011d0:	2d02      	cmp	r5, #2
 80011d2:	d100      	bne.n	80011d6 <HAL_GPIO_Init+0x11e>
 80011d4:	e776      	b.n	80010c4 <HAL_GPIO_Init+0xc>
 80011d6:	2d12      	cmp	r5, #18
 80011d8:	d100      	bne.n	80011dc <HAL_GPIO_Init+0x124>
 80011da:	e773      	b.n	80010c4 <HAL_GPIO_Init+0xc>
      temp = GPIOx->MODER;
 80011dc:	6806      	ldr	r6, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80011de:	005f      	lsls	r7, r3, #1
 80011e0:	2503      	movs	r5, #3
 80011e2:	002c      	movs	r4, r5
 80011e4:	40bc      	lsls	r4, r7
 80011e6:	43e4      	mvns	r4, r4
 80011e8:	46a4      	mov	ip, r4
 80011ea:	4026      	ands	r6, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ec:	684c      	ldr	r4, [r1, #4]
 80011ee:	4025      	ands	r5, r4
 80011f0:	40bd      	lsls	r5, r7
 80011f2:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 80011f4:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011f6:	684d      	ldr	r5, [r1, #4]
 80011f8:	1e6e      	subs	r6, r5, #1
 80011fa:	2e01      	cmp	r6, #1
 80011fc:	d800      	bhi.n	8001200 <HAL_GPIO_Init+0x148>
 80011fe:	e771      	b.n	80010e4 <HAL_GPIO_Init+0x2c>
 8001200:	2d11      	cmp	r5, #17
 8001202:	d100      	bne.n	8001206 <HAL_GPIO_Init+0x14e>
 8001204:	e76e      	b.n	80010e4 <HAL_GPIO_Init+0x2c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001206:	2d12      	cmp	r5, #18
 8001208:	d000      	beq.n	800120c <HAL_GPIO_Init+0x154>
 800120a:	e77d      	b.n	8001108 <HAL_GPIO_Init+0x50>
 800120c:	e76a      	b.n	80010e4 <HAL_GPIO_Init+0x2c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800120e:	2702      	movs	r7, #2
 8001210:	e7a3      	b.n	800115a <HAL_GPIO_Init+0xa2>
 8001212:	2700      	movs	r7, #0
 8001214:	e7a1      	b.n	800115a <HAL_GPIO_Init+0xa2>
 8001216:	2701      	movs	r7, #1
 8001218:	e79f      	b.n	800115a <HAL_GPIO_Init+0xa2>
  } 
}
 800121a:	b002      	add	sp, #8
 800121c:	bc04      	pop	{r2}
 800121e:	4690      	mov	r8, r2
 8001220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	40021000 	.word	0x40021000
 8001228:	40010000 	.word	0x40010000
 800122c:	48000400 	.word	0x48000400
 8001230:	48000800 	.word	0x48000800
 8001234:	40010400 	.word	0x40010400

08001238 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001238:	2a00      	cmp	r2, #0
 800123a:	d101      	bne.n	8001240 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800123c:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800123e:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001240:	6181      	str	r1, [r0, #24]
 8001242:	e7fc      	b.n	800123e <HAL_GPIO_WritePin+0x6>

08001244 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001244:	b570      	push	{r4, r5, r6, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124a:	6803      	ldr	r3, [r0, #0]
 800124c:	07db      	lsls	r3, r3, #31
 800124e:	d536      	bpl.n	80012be <HAL_RCC_OscConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001250:	4bc1      	ldr	r3, [pc, #772]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	230c      	movs	r3, #12
 8001256:	4013      	ands	r3, r2
 8001258:	2b04      	cmp	r3, #4
 800125a:	d028      	beq.n	80012ae <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800125c:	4bbe      	ldr	r3, [pc, #760]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	230c      	movs	r3, #12
 8001262:	4013      	ands	r3, r2
 8001264:	2b08      	cmp	r3, #8
 8001266:	d01e      	beq.n	80012a6 <HAL_RCC_OscConfig+0x62>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001268:	6863      	ldr	r3, [r4, #4]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d04b      	beq.n	8001306 <HAL_RCC_OscConfig+0xc2>
 800126e:	2b00      	cmp	r3, #0
 8001270:	d150      	bne.n	8001314 <HAL_RCC_OscConfig+0xd0>
 8001272:	4bb9      	ldr	r3, [pc, #740]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	49b9      	ldr	r1, [pc, #740]	; (800155c <HAL_RCC_OscConfig+0x318>)
 8001278:	400a      	ands	r2, r1
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	49b8      	ldr	r1, [pc, #736]	; (8001560 <HAL_RCC_OscConfig+0x31c>)
 8001280:	400a      	ands	r2, r1
 8001282:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001284:	6863      	ldr	r3, [r4, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d05c      	beq.n	8001344 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128a:	f7ff f8d3 	bl	8000434 <HAL_GetTick>
 800128e:	0005      	movs	r5, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001290:	4bb1      	ldr	r3, [pc, #708]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	039b      	lsls	r3, r3, #14
 8001296:	d412      	bmi.n	80012be <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001298:	f7ff f8cc 	bl	8000434 <HAL_GetTick>
 800129c:	1b40      	subs	r0, r0, r5
 800129e:	2864      	cmp	r0, #100	; 0x64
 80012a0:	d9f6      	bls.n	8001290 <HAL_RCC_OscConfig+0x4c>
          {
            return HAL_TIMEOUT;
 80012a2:	2003      	movs	r0, #3
 80012a4:	e1ea      	b.n	800167c <HAL_RCC_OscConfig+0x438>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012a6:	4bac      	ldr	r3, [pc, #688]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	03db      	lsls	r3, r3, #15
 80012ac:	d5dc      	bpl.n	8001268 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ae:	4baa      	ldr	r3, [pc, #680]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	039b      	lsls	r3, r3, #14
 80012b4:	d503      	bpl.n	80012be <HAL_RCC_OscConfig+0x7a>
 80012b6:	6863      	ldr	r3, [r4, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d100      	bne.n	80012be <HAL_RCC_OscConfig+0x7a>
 80012bc:	e1db      	b.n	8001676 <HAL_RCC_OscConfig+0x432>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012be:	6823      	ldr	r3, [r4, #0]
 80012c0:	079b      	lsls	r3, r3, #30
 80012c2:	d562      	bpl.n	800138a <HAL_RCC_OscConfig+0x146>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012c4:	4ba4      	ldr	r3, [pc, #656]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	220c      	movs	r2, #12
 80012ca:	421a      	tst	r2, r3
 80012cc:	d04c      	beq.n	8001368 <HAL_RCC_OscConfig+0x124>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012ce:	4ba2      	ldr	r3, [pc, #648]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	230c      	movs	r3, #12
 80012d4:	4013      	ands	r3, r2
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d042      	beq.n	8001360 <HAL_RCC_OscConfig+0x11c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012da:	68e3      	ldr	r3, [r4, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d076      	beq.n	80013ce <HAL_RCC_OscConfig+0x18a>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012e0:	4a9d      	ldr	r2, [pc, #628]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 80012e2:	6813      	ldr	r3, [r2, #0]
 80012e4:	2101      	movs	r1, #1
 80012e6:	430b      	orrs	r3, r1
 80012e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ea:	f7ff f8a3 	bl	8000434 <HAL_GetTick>
 80012ee:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f0:	4b99      	ldr	r3, [pc, #612]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	079b      	lsls	r3, r3, #30
 80012f6:	d461      	bmi.n	80013bc <HAL_RCC_OscConfig+0x178>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f8:	f7ff f89c 	bl	8000434 <HAL_GetTick>
 80012fc:	1b40      	subs	r0, r0, r5
 80012fe:	2802      	cmp	r0, #2
 8001300:	d9f6      	bls.n	80012f0 <HAL_RCC_OscConfig+0xac>
          {
            return HAL_TIMEOUT;
 8001302:	2003      	movs	r0, #3
 8001304:	e1ba      	b.n	800167c <HAL_RCC_OscConfig+0x438>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001306:	4a94      	ldr	r2, [pc, #592]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 8001308:	6811      	ldr	r1, [r2, #0]
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	025b      	lsls	r3, r3, #9
 800130e:	430b      	orrs	r3, r1
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	e7b7      	b.n	8001284 <HAL_RCC_OscConfig+0x40>
 8001314:	2b05      	cmp	r3, #5
 8001316:	d009      	beq.n	800132c <HAL_RCC_OscConfig+0xe8>
 8001318:	4b8f      	ldr	r3, [pc, #572]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	498f      	ldr	r1, [pc, #572]	; (800155c <HAL_RCC_OscConfig+0x318>)
 800131e:	400a      	ands	r2, r1
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	498e      	ldr	r1, [pc, #568]	; (8001560 <HAL_RCC_OscConfig+0x31c>)
 8001326:	400a      	ands	r2, r1
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	e7ab      	b.n	8001284 <HAL_RCC_OscConfig+0x40>
 800132c:	4b8a      	ldr	r3, [pc, #552]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 800132e:	6819      	ldr	r1, [r3, #0]
 8001330:	2280      	movs	r2, #128	; 0x80
 8001332:	02d2      	lsls	r2, r2, #11
 8001334:	430a      	orrs	r2, r1
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	6819      	ldr	r1, [r3, #0]
 800133a:	2280      	movs	r2, #128	; 0x80
 800133c:	0252      	lsls	r2, r2, #9
 800133e:	430a      	orrs	r2, r1
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	e79f      	b.n	8001284 <HAL_RCC_OscConfig+0x40>
        tickstart = HAL_GetTick();
 8001344:	f7ff f876 	bl	8000434 <HAL_GetTick>
 8001348:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134a:	4b83      	ldr	r3, [pc, #524]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	039b      	lsls	r3, r3, #14
 8001350:	d5b5      	bpl.n	80012be <HAL_RCC_OscConfig+0x7a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001352:	f7ff f86f 	bl	8000434 <HAL_GetTick>
 8001356:	1b40      	subs	r0, r0, r5
 8001358:	2864      	cmp	r0, #100	; 0x64
 800135a:	d9f6      	bls.n	800134a <HAL_RCC_OscConfig+0x106>
            return HAL_TIMEOUT;
 800135c:	2003      	movs	r0, #3
 800135e:	e18d      	b.n	800167c <HAL_RCC_OscConfig+0x438>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001360:	4b7d      	ldr	r3, [pc, #500]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	03db      	lsls	r3, r3, #15
 8001366:	d4b8      	bmi.n	80012da <HAL_RCC_OscConfig+0x96>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001368:	4b7b      	ldr	r3, [pc, #492]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	079b      	lsls	r3, r3, #30
 800136e:	d504      	bpl.n	800137a <HAL_RCC_OscConfig+0x136>
 8001370:	68e3      	ldr	r3, [r4, #12]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d001      	beq.n	800137a <HAL_RCC_OscConfig+0x136>
        return HAL_ERROR;
 8001376:	2001      	movs	r0, #1
 8001378:	e180      	b.n	800167c <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137a:	4977      	ldr	r1, [pc, #476]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 800137c:	680b      	ldr	r3, [r1, #0]
 800137e:	22f8      	movs	r2, #248	; 0xf8
 8001380:	4393      	bics	r3, r2
 8001382:	6922      	ldr	r2, [r4, #16]
 8001384:	00d2      	lsls	r2, r2, #3
 8001386:	4313      	orrs	r3, r2
 8001388:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	071b      	lsls	r3, r3, #28
 800138e:	d544      	bpl.n	800141a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001390:	69e3      	ldr	r3, [r4, #28]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d02e      	beq.n	80013f4 <HAL_RCC_OscConfig+0x1b0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001396:	4a70      	ldr	r2, [pc, #448]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 8001398:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800139a:	2101      	movs	r1, #1
 800139c:	430b      	orrs	r3, r1
 800139e:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a0:	f7ff f848 	bl	8000434 <HAL_GetTick>
 80013a4:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a6:	4b6c      	ldr	r3, [pc, #432]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	079b      	lsls	r3, r3, #30
 80013ac:	d435      	bmi.n	800141a <HAL_RCC_OscConfig+0x1d6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ae:	f7ff f841 	bl	8000434 <HAL_GetTick>
 80013b2:	1b40      	subs	r0, r0, r5
 80013b4:	2802      	cmp	r0, #2
 80013b6:	d9f6      	bls.n	80013a6 <HAL_RCC_OscConfig+0x162>
        {
          return HAL_TIMEOUT;
 80013b8:	2003      	movs	r0, #3
 80013ba:	e15f      	b.n	800167c <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013bc:	4966      	ldr	r1, [pc, #408]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 80013be:	680b      	ldr	r3, [r1, #0]
 80013c0:	22f8      	movs	r2, #248	; 0xf8
 80013c2:	4393      	bics	r3, r2
 80013c4:	6922      	ldr	r2, [r4, #16]
 80013c6:	00d2      	lsls	r2, r2, #3
 80013c8:	4313      	orrs	r3, r2
 80013ca:	600b      	str	r3, [r1, #0]
 80013cc:	e7dd      	b.n	800138a <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_DISABLE();
 80013ce:	4a62      	ldr	r2, [pc, #392]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 80013d0:	6813      	ldr	r3, [r2, #0]
 80013d2:	2101      	movs	r1, #1
 80013d4:	438b      	bics	r3, r1
 80013d6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80013d8:	f7ff f82c 	bl	8000434 <HAL_GetTick>
 80013dc:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013de:	4b5e      	ldr	r3, [pc, #376]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	079b      	lsls	r3, r3, #30
 80013e4:	d5d1      	bpl.n	800138a <HAL_RCC_OscConfig+0x146>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e6:	f7ff f825 	bl	8000434 <HAL_GetTick>
 80013ea:	1b40      	subs	r0, r0, r5
 80013ec:	2802      	cmp	r0, #2
 80013ee:	d9f6      	bls.n	80013de <HAL_RCC_OscConfig+0x19a>
            return HAL_TIMEOUT;
 80013f0:	2003      	movs	r0, #3
 80013f2:	e143      	b.n	800167c <HAL_RCC_OscConfig+0x438>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f4:	4a58      	ldr	r2, [pc, #352]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 80013f6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80013f8:	2101      	movs	r1, #1
 80013fa:	438b      	bics	r3, r1
 80013fc:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fe:	f7ff f819 	bl	8000434 <HAL_GetTick>
 8001402:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001404:	4b54      	ldr	r3, [pc, #336]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 8001406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001408:	079b      	lsls	r3, r3, #30
 800140a:	d506      	bpl.n	800141a <HAL_RCC_OscConfig+0x1d6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800140c:	f7ff f812 	bl	8000434 <HAL_GetTick>
 8001410:	1b40      	subs	r0, r0, r5
 8001412:	2802      	cmp	r0, #2
 8001414:	d9f6      	bls.n	8001404 <HAL_RCC_OscConfig+0x1c0>
        {
          return HAL_TIMEOUT;
 8001416:	2003      	movs	r0, #3
 8001418:	e130      	b.n	800167c <HAL_RCC_OscConfig+0x438>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800141a:	6823      	ldr	r3, [r4, #0]
 800141c:	075b      	lsls	r3, r3, #29
 800141e:	d575      	bpl.n	800150c <HAL_RCC_OscConfig+0x2c8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001420:	4b4d      	ldr	r3, [pc, #308]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	d42e      	bmi.n	8001486 <HAL_RCC_OscConfig+0x242>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001428:	4a4b      	ldr	r2, [pc, #300]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 800142a:	69d1      	ldr	r1, [r2, #28]
 800142c:	2080      	movs	r0, #128	; 0x80
 800142e:	0540      	lsls	r0, r0, #21
 8001430:	4301      	orrs	r1, r0
 8001432:	61d1      	str	r1, [r2, #28]
 8001434:	69d3      	ldr	r3, [r2, #28]
 8001436:	4003      	ands	r3, r0
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800143c:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143e:	4b49      	ldr	r3, [pc, #292]	; (8001564 <HAL_RCC_OscConfig+0x320>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	05db      	lsls	r3, r3, #23
 8001444:	d521      	bpl.n	800148a <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001446:	68a3      	ldr	r3, [r4, #8]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d032      	beq.n	80014b2 <HAL_RCC_OscConfig+0x26e>
 800144c:	2b00      	cmp	r3, #0
 800144e:	d136      	bne.n	80014be <HAL_RCC_OscConfig+0x27a>
 8001450:	4b41      	ldr	r3, [pc, #260]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 8001452:	6a1a      	ldr	r2, [r3, #32]
 8001454:	2101      	movs	r1, #1
 8001456:	438a      	bics	r2, r1
 8001458:	621a      	str	r2, [r3, #32]
 800145a:	6a1a      	ldr	r2, [r3, #32]
 800145c:	3103      	adds	r1, #3
 800145e:	438a      	bics	r2, r1
 8001460:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001462:	68a3      	ldr	r3, [r4, #8]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d040      	beq.n	80014ea <HAL_RCC_OscConfig+0x2a6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001468:	f7fe ffe4 	bl	8000434 <HAL_GetTick>
 800146c:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800146e:	4b3a      	ldr	r3, [pc, #232]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	079b      	lsls	r3, r3, #30
 8001474:	d448      	bmi.n	8001508 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001476:	f7fe ffdd 	bl	8000434 <HAL_GetTick>
 800147a:	1b80      	subs	r0, r0, r6
 800147c:	4b3a      	ldr	r3, [pc, #232]	; (8001568 <HAL_RCC_OscConfig+0x324>)
 800147e:	4298      	cmp	r0, r3
 8001480:	d9f5      	bls.n	800146e <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001482:	2003      	movs	r0, #3
 8001484:	e0fa      	b.n	800167c <HAL_RCC_OscConfig+0x438>
    FlagStatus       pwrclkchanged = RESET;
 8001486:	2500      	movs	r5, #0
 8001488:	e7d9      	b.n	800143e <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800148a:	4a36      	ldr	r2, [pc, #216]	; (8001564 <HAL_RCC_OscConfig+0x320>)
 800148c:	6811      	ldr	r1, [r2, #0]
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	430b      	orrs	r3, r1
 8001494:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001496:	f7fe ffcd 	bl	8000434 <HAL_GetTick>
 800149a:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149c:	4b31      	ldr	r3, [pc, #196]	; (8001564 <HAL_RCC_OscConfig+0x320>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	05db      	lsls	r3, r3, #23
 80014a2:	d4d0      	bmi.n	8001446 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a4:	f7fe ffc6 	bl	8000434 <HAL_GetTick>
 80014a8:	1b80      	subs	r0, r0, r6
 80014aa:	2864      	cmp	r0, #100	; 0x64
 80014ac:	d9f6      	bls.n	800149c <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 80014ae:	2003      	movs	r0, #3
 80014b0:	e0e4      	b.n	800167c <HAL_RCC_OscConfig+0x438>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b2:	4a29      	ldr	r2, [pc, #164]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 80014b4:	6a13      	ldr	r3, [r2, #32]
 80014b6:	2101      	movs	r1, #1
 80014b8:	430b      	orrs	r3, r1
 80014ba:	6213      	str	r3, [r2, #32]
 80014bc:	e7d1      	b.n	8001462 <HAL_RCC_OscConfig+0x21e>
 80014be:	2b05      	cmp	r3, #5
 80014c0:	d009      	beq.n	80014d6 <HAL_RCC_OscConfig+0x292>
 80014c2:	4b25      	ldr	r3, [pc, #148]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 80014c4:	6a1a      	ldr	r2, [r3, #32]
 80014c6:	2101      	movs	r1, #1
 80014c8:	438a      	bics	r2, r1
 80014ca:	621a      	str	r2, [r3, #32]
 80014cc:	6a1a      	ldr	r2, [r3, #32]
 80014ce:	3103      	adds	r1, #3
 80014d0:	438a      	bics	r2, r1
 80014d2:	621a      	str	r2, [r3, #32]
 80014d4:	e7c5      	b.n	8001462 <HAL_RCC_OscConfig+0x21e>
 80014d6:	4b20      	ldr	r3, [pc, #128]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 80014d8:	6a1a      	ldr	r2, [r3, #32]
 80014da:	2104      	movs	r1, #4
 80014dc:	430a      	orrs	r2, r1
 80014de:	621a      	str	r2, [r3, #32]
 80014e0:	6a1a      	ldr	r2, [r3, #32]
 80014e2:	3903      	subs	r1, #3
 80014e4:	430a      	orrs	r2, r1
 80014e6:	621a      	str	r2, [r3, #32]
 80014e8:	e7bb      	b.n	8001462 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ea:	f7fe ffa3 	bl	8000434 <HAL_GetTick>
 80014ee:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	079b      	lsls	r3, r3, #30
 80014f6:	d507      	bpl.n	8001508 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f8:	f7fe ff9c 	bl	8000434 <HAL_GetTick>
 80014fc:	1b80      	subs	r0, r0, r6
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <HAL_RCC_OscConfig+0x324>)
 8001500:	4298      	cmp	r0, r3
 8001502:	d9f5      	bls.n	80014f0 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 8001504:	2003      	movs	r0, #3
 8001506:	e0b9      	b.n	800167c <HAL_RCC_OscConfig+0x438>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001508:	2d01      	cmp	r5, #1
 800150a:	d01e      	beq.n	800154a <HAL_RCC_OscConfig+0x306>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800150c:	6823      	ldr	r3, [r4, #0]
 800150e:	06db      	lsls	r3, r3, #27
 8001510:	d55a      	bpl.n	80015c8 <HAL_RCC_OscConfig+0x384>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001512:	6963      	ldr	r3, [r4, #20]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d02b      	beq.n	8001570 <HAL_RCC_OscConfig+0x32c>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001518:	3305      	adds	r3, #5
 800151a:	d049      	beq.n	80015b0 <HAL_RCC_OscConfig+0x36c>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800151c:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 800151e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001520:	2104      	movs	r1, #4
 8001522:	430a      	orrs	r2, r1
 8001524:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001528:	3903      	subs	r1, #3
 800152a:	438a      	bics	r2, r1
 800152c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152e:	f7fe ff81 	bl	8000434 <HAL_GetTick>
 8001532:	0005      	movs	r5, r0
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 8001536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001538:	079b      	lsls	r3, r3, #30
 800153a:	d545      	bpl.n	80015c8 <HAL_RCC_OscConfig+0x384>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800153c:	f7fe ff7a 	bl	8000434 <HAL_GetTick>
 8001540:	1b40      	subs	r0, r0, r5
 8001542:	2802      	cmp	r0, #2
 8001544:	d9f6      	bls.n	8001534 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001546:	2003      	movs	r0, #3
 8001548:	e098      	b.n	800167c <HAL_RCC_OscConfig+0x438>
      __HAL_RCC_PWR_CLK_DISABLE();
 800154a:	4a03      	ldr	r2, [pc, #12]	; (8001558 <HAL_RCC_OscConfig+0x314>)
 800154c:	69d3      	ldr	r3, [r2, #28]
 800154e:	4907      	ldr	r1, [pc, #28]	; (800156c <HAL_RCC_OscConfig+0x328>)
 8001550:	400b      	ands	r3, r1
 8001552:	61d3      	str	r3, [r2, #28]
 8001554:	e7da      	b.n	800150c <HAL_RCC_OscConfig+0x2c8>
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	40021000 	.word	0x40021000
 800155c:	fffeffff 	.word	0xfffeffff
 8001560:	fffbffff 	.word	0xfffbffff
 8001564:	40007000 	.word	0x40007000
 8001568:	00001388 	.word	0x00001388
 800156c:	efffffff 	.word	0xefffffff
      __HAL_RCC_HSI14ADC_DISABLE();
 8001570:	4b44      	ldr	r3, [pc, #272]	; (8001684 <HAL_RCC_OscConfig+0x440>)
 8001572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001574:	2104      	movs	r1, #4
 8001576:	430a      	orrs	r2, r1
 8001578:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800157a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800157c:	3903      	subs	r1, #3
 800157e:	430a      	orrs	r2, r1
 8001580:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001582:	f7fe ff57 	bl	8000434 <HAL_GetTick>
 8001586:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001588:	4b3e      	ldr	r3, [pc, #248]	; (8001684 <HAL_RCC_OscConfig+0x440>)
 800158a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800158c:	079b      	lsls	r3, r3, #30
 800158e:	d406      	bmi.n	800159e <HAL_RCC_OscConfig+0x35a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001590:	f7fe ff50 	bl	8000434 <HAL_GetTick>
 8001594:	1b40      	subs	r0, r0, r5
 8001596:	2802      	cmp	r0, #2
 8001598:	d9f6      	bls.n	8001588 <HAL_RCC_OscConfig+0x344>
          return HAL_TIMEOUT;
 800159a:	2003      	movs	r0, #3
 800159c:	e06e      	b.n	800167c <HAL_RCC_OscConfig+0x438>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800159e:	4939      	ldr	r1, [pc, #228]	; (8001684 <HAL_RCC_OscConfig+0x440>)
 80015a0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80015a2:	22f8      	movs	r2, #248	; 0xf8
 80015a4:	4393      	bics	r3, r2
 80015a6:	69a2      	ldr	r2, [r4, #24]
 80015a8:	00d2      	lsls	r2, r2, #3
 80015aa:	4313      	orrs	r3, r2
 80015ac:	634b      	str	r3, [r1, #52]	; 0x34
 80015ae:	e00b      	b.n	80015c8 <HAL_RCC_OscConfig+0x384>
      __HAL_RCC_HSI14ADC_ENABLE();
 80015b0:	4a34      	ldr	r2, [pc, #208]	; (8001684 <HAL_RCC_OscConfig+0x440>)
 80015b2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80015b4:	2104      	movs	r1, #4
 80015b6:	438b      	bics	r3, r1
 80015b8:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015ba:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80015bc:	31f4      	adds	r1, #244	; 0xf4
 80015be:	438b      	bics	r3, r1
 80015c0:	69a1      	ldr	r1, [r4, #24]
 80015c2:	00c9      	lsls	r1, r1, #3
 80015c4:	430b      	orrs	r3, r1
 80015c6:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c8:	6a23      	ldr	r3, [r4, #32]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d055      	beq.n	800167a <HAL_RCC_OscConfig+0x436>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015ce:	4a2d      	ldr	r2, [pc, #180]	; (8001684 <HAL_RCC_OscConfig+0x440>)
 80015d0:	6851      	ldr	r1, [r2, #4]
 80015d2:	220c      	movs	r2, #12
 80015d4:	400a      	ands	r2, r1
 80015d6:	2a08      	cmp	r2, #8
 80015d8:	d052      	beq.n	8001680 <HAL_RCC_OscConfig+0x43c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d012      	beq.n	8001604 <HAL_RCC_OscConfig+0x3c0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015de:	4a29      	ldr	r2, [pc, #164]	; (8001684 <HAL_RCC_OscConfig+0x440>)
 80015e0:	6813      	ldr	r3, [r2, #0]
 80015e2:	4929      	ldr	r1, [pc, #164]	; (8001688 <HAL_RCC_OscConfig+0x444>)
 80015e4:	400b      	ands	r3, r1
 80015e6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7fe ff24 	bl	8000434 <HAL_GetTick>
 80015ec:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ee:	4b25      	ldr	r3, [pc, #148]	; (8001684 <HAL_RCC_OscConfig+0x440>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	019b      	lsls	r3, r3, #6
 80015f4:	d53d      	bpl.n	8001672 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f6:	f7fe ff1d 	bl	8000434 <HAL_GetTick>
 80015fa:	1b00      	subs	r0, r0, r4
 80015fc:	2802      	cmp	r0, #2
 80015fe:	d9f6      	bls.n	80015ee <HAL_RCC_OscConfig+0x3aa>
          {
            return HAL_TIMEOUT;
 8001600:	2003      	movs	r0, #3
 8001602:	e03b      	b.n	800167c <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_PLL_DISABLE();
 8001604:	4a1f      	ldr	r2, [pc, #124]	; (8001684 <HAL_RCC_OscConfig+0x440>)
 8001606:	6813      	ldr	r3, [r2, #0]
 8001608:	491f      	ldr	r1, [pc, #124]	; (8001688 <HAL_RCC_OscConfig+0x444>)
 800160a:	400b      	ands	r3, r1
 800160c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800160e:	f7fe ff11 	bl	8000434 <HAL_GetTick>
 8001612:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <HAL_RCC_OscConfig+0x440>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	019b      	lsls	r3, r3, #6
 800161a:	d506      	bpl.n	800162a <HAL_RCC_OscConfig+0x3e6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161c:	f7fe ff0a 	bl	8000434 <HAL_GetTick>
 8001620:	1b40      	subs	r0, r0, r5
 8001622:	2802      	cmp	r0, #2
 8001624:	d9f6      	bls.n	8001614 <HAL_RCC_OscConfig+0x3d0>
            return HAL_TIMEOUT;
 8001626:	2003      	movs	r0, #3
 8001628:	e028      	b.n	800167c <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <HAL_RCC_OscConfig+0x440>)
 800162c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800162e:	210f      	movs	r1, #15
 8001630:	438a      	bics	r2, r1
 8001632:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001634:	430a      	orrs	r2, r1
 8001636:	62da      	str	r2, [r3, #44]	; 0x2c
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	4914      	ldr	r1, [pc, #80]	; (800168c <HAL_RCC_OscConfig+0x448>)
 800163c:	400a      	ands	r2, r1
 800163e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001640:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001642:	4301      	orrs	r1, r0
 8001644:	430a      	orrs	r2, r1
 8001646:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8001648:	6819      	ldr	r1, [r3, #0]
 800164a:	2280      	movs	r2, #128	; 0x80
 800164c:	0452      	lsls	r2, r2, #17
 800164e:	430a      	orrs	r2, r1
 8001650:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001652:	f7fe feef 	bl	8000434 <HAL_GetTick>
 8001656:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <HAL_RCC_OscConfig+0x440>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	019b      	lsls	r3, r3, #6
 800165e:	d406      	bmi.n	800166e <HAL_RCC_OscConfig+0x42a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001660:	f7fe fee8 	bl	8000434 <HAL_GetTick>
 8001664:	1b00      	subs	r0, r0, r4
 8001666:	2802      	cmp	r0, #2
 8001668:	d9f6      	bls.n	8001658 <HAL_RCC_OscConfig+0x414>
            return HAL_TIMEOUT;
 800166a:	2003      	movs	r0, #3
 800166c:	e006      	b.n	800167c <HAL_RCC_OscConfig+0x438>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800166e:	2000      	movs	r0, #0
 8001670:	e004      	b.n	800167c <HAL_RCC_OscConfig+0x438>
 8001672:	2000      	movs	r0, #0
 8001674:	e002      	b.n	800167c <HAL_RCC_OscConfig+0x438>
        return HAL_ERROR;
 8001676:	2001      	movs	r0, #1
 8001678:	e000      	b.n	800167c <HAL_RCC_OscConfig+0x438>
  return HAL_OK;
 800167a:	2000      	movs	r0, #0
}
 800167c:	b002      	add	sp, #8
 800167e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001680:	2001      	movs	r0, #1
 8001682:	e7fb      	b.n	800167c <HAL_RCC_OscConfig+0x438>
 8001684:	40021000 	.word	0x40021000
 8001688:	feffffff 	.word	0xfeffffff
 800168c:	ffc2ffff 	.word	0xffc2ffff

08001690 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001690:	b530      	push	{r4, r5, lr}
 8001692:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001694:	aa04      	add	r2, sp, #16
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <HAL_RCC_GetSysClockFreq+0x5c>)
 8001698:	0018      	movs	r0, r3
 800169a:	c832      	ldmia	r0!, {r1, r4, r5}
 800169c:	c232      	stmia	r2!, {r1, r4, r5}
 800169e:	0011      	movs	r1, r2
 80016a0:	6802      	ldr	r2, [r0, #0]
 80016a2:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80016a4:	466a      	mov	r2, sp
 80016a6:	3310      	adds	r3, #16
 80016a8:	cb13      	ldmia	r3!, {r0, r1, r4}
 80016aa:	c213      	stmia	r2!, {r0, r1, r4}
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <HAL_RCC_GetSysClockFreq+0x60>)
 80016b2:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016b4:	230c      	movs	r3, #12
 80016b6:	4013      	ands	r3, r2
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d113      	bne.n	80016e4 <HAL_RCC_GetSysClockFreq+0x54>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80016bc:	0c91      	lsrs	r1, r2, #18
 80016be:	3307      	adds	r3, #7
 80016c0:	4019      	ands	r1, r3
 80016c2:	a804      	add	r0, sp, #16
 80016c4:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80016c6:	490a      	ldr	r1, [pc, #40]	; (80016f0 <HAL_RCC_GetSysClockFreq+0x60>)
 80016c8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80016ca:	400b      	ands	r3, r1
 80016cc:	4669      	mov	r1, sp
 80016ce:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80016d0:	03d3      	lsls	r3, r2, #15
 80016d2:	d402      	bmi.n	80016da <HAL_RCC_GetSysClockFreq+0x4a>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80016d4:	4807      	ldr	r0, [pc, #28]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x64>)
 80016d6:	4360      	muls	r0, r4
 80016d8:	e005      	b.n	80016e6 <HAL_RCC_GetSysClockFreq+0x56>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80016da:	4807      	ldr	r0, [pc, #28]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x68>)
 80016dc:	f7fe fd1c 	bl	8000118 <__udivsi3>
 80016e0:	4360      	muls	r0, r4
 80016e2:	e000      	b.n	80016e6 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 80016e4:	4804      	ldr	r0, [pc, #16]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80016e6:	b009      	add	sp, #36	; 0x24
 80016e8:	bd30      	pop	{r4, r5, pc}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	08005d7c 	.word	0x08005d7c
 80016f0:	40021000 	.word	0x40021000
 80016f4:	003d0900 	.word	0x003d0900
 80016f8:	007a1200 	.word	0x007a1200

080016fc <HAL_RCC_ClockConfig>:
{
 80016fc:	b570      	push	{r4, r5, r6, lr}
 80016fe:	0005      	movs	r5, r0
 8001700:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001702:	4b4d      	ldr	r3, [pc, #308]	; (8001838 <HAL_RCC_ClockConfig+0x13c>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	2301      	movs	r3, #1
 8001708:	4013      	ands	r3, r2
 800170a:	428b      	cmp	r3, r1
 800170c:	d20b      	bcs.n	8001726 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170e:	494a      	ldr	r1, [pc, #296]	; (8001838 <HAL_RCC_ClockConfig+0x13c>)
 8001710:	680b      	ldr	r3, [r1, #0]
 8001712:	2201      	movs	r2, #1
 8001714:	4393      	bics	r3, r2
 8001716:	4323      	orrs	r3, r4
 8001718:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800171a:	680b      	ldr	r3, [r1, #0]
 800171c:	401a      	ands	r2, r3
 800171e:	4294      	cmp	r4, r2
 8001720:	d001      	beq.n	8001726 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8001722:	2001      	movs	r0, #1
 8001724:	e085      	b.n	8001832 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001726:	682b      	ldr	r3, [r5, #0]
 8001728:	079b      	lsls	r3, r3, #30
 800172a:	d506      	bpl.n	800173a <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800172c:	4a43      	ldr	r2, [pc, #268]	; (800183c <HAL_RCC_ClockConfig+0x140>)
 800172e:	6853      	ldr	r3, [r2, #4]
 8001730:	21f0      	movs	r1, #240	; 0xf0
 8001732:	438b      	bics	r3, r1
 8001734:	68a9      	ldr	r1, [r5, #8]
 8001736:	430b      	orrs	r3, r1
 8001738:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800173a:	682b      	ldr	r3, [r5, #0]
 800173c:	07db      	lsls	r3, r3, #31
 800173e:	d54c      	bpl.n	80017da <HAL_RCC_ClockConfig+0xde>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001740:	686b      	ldr	r3, [r5, #4]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d021      	beq.n	800178a <HAL_RCC_ClockConfig+0x8e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001746:	2b02      	cmp	r3, #2
 8001748:	d025      	beq.n	8001796 <HAL_RCC_ClockConfig+0x9a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174a:	4a3c      	ldr	r2, [pc, #240]	; (800183c <HAL_RCC_ClockConfig+0x140>)
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	0792      	lsls	r2, r2, #30
 8001750:	d400      	bmi.n	8001754 <HAL_RCC_ClockConfig+0x58>
 8001752:	e06f      	b.n	8001834 <HAL_RCC_ClockConfig+0x138>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001754:	4939      	ldr	r1, [pc, #228]	; (800183c <HAL_RCC_ClockConfig+0x140>)
 8001756:	684a      	ldr	r2, [r1, #4]
 8001758:	2003      	movs	r0, #3
 800175a:	4382      	bics	r2, r0
 800175c:	4313      	orrs	r3, r2
 800175e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001760:	f7fe fe68 	bl	8000434 <HAL_GetTick>
 8001764:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001766:	686b      	ldr	r3, [r5, #4]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d01a      	beq.n	80017a2 <HAL_RCC_ClockConfig+0xa6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800176c:	2b02      	cmp	r3, #2
 800176e:	d026      	beq.n	80017be <HAL_RCC_ClockConfig+0xc2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001770:	4b32      	ldr	r3, [pc, #200]	; (800183c <HAL_RCC_ClockConfig+0x140>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	220c      	movs	r2, #12
 8001776:	421a      	tst	r2, r3
 8001778:	d02f      	beq.n	80017da <HAL_RCC_ClockConfig+0xde>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800177a:	f7fe fe5b 	bl	8000434 <HAL_GetTick>
 800177e:	1b80      	subs	r0, r0, r6
 8001780:	4b2f      	ldr	r3, [pc, #188]	; (8001840 <HAL_RCC_ClockConfig+0x144>)
 8001782:	4298      	cmp	r0, r3
 8001784:	d9f4      	bls.n	8001770 <HAL_RCC_ClockConfig+0x74>
          return HAL_TIMEOUT;
 8001786:	2003      	movs	r0, #3
 8001788:	e053      	b.n	8001832 <HAL_RCC_ClockConfig+0x136>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178a:	4a2c      	ldr	r2, [pc, #176]	; (800183c <HAL_RCC_ClockConfig+0x140>)
 800178c:	6812      	ldr	r2, [r2, #0]
 800178e:	0392      	lsls	r2, r2, #14
 8001790:	d4e0      	bmi.n	8001754 <HAL_RCC_ClockConfig+0x58>
        return HAL_ERROR;
 8001792:	2001      	movs	r0, #1
 8001794:	e04d      	b.n	8001832 <HAL_RCC_ClockConfig+0x136>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001796:	4a29      	ldr	r2, [pc, #164]	; (800183c <HAL_RCC_ClockConfig+0x140>)
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	0192      	lsls	r2, r2, #6
 800179c:	d4da      	bmi.n	8001754 <HAL_RCC_ClockConfig+0x58>
        return HAL_ERROR;
 800179e:	2001      	movs	r0, #1
 80017a0:	e047      	b.n	8001832 <HAL_RCC_ClockConfig+0x136>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017a2:	4b26      	ldr	r3, [pc, #152]	; (800183c <HAL_RCC_ClockConfig+0x140>)
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	230c      	movs	r3, #12
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d015      	beq.n	80017da <HAL_RCC_ClockConfig+0xde>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ae:	f7fe fe41 	bl	8000434 <HAL_GetTick>
 80017b2:	1b80      	subs	r0, r0, r6
 80017b4:	4b22      	ldr	r3, [pc, #136]	; (8001840 <HAL_RCC_ClockConfig+0x144>)
 80017b6:	4298      	cmp	r0, r3
 80017b8:	d9f3      	bls.n	80017a2 <HAL_RCC_ClockConfig+0xa6>
          return HAL_TIMEOUT;
 80017ba:	2003      	movs	r0, #3
 80017bc:	e039      	b.n	8001832 <HAL_RCC_ClockConfig+0x136>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017be:	4b1f      	ldr	r3, [pc, #124]	; (800183c <HAL_RCC_ClockConfig+0x140>)
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	230c      	movs	r3, #12
 80017c4:	4013      	ands	r3, r2
 80017c6:	2b08      	cmp	r3, #8
 80017c8:	d007      	beq.n	80017da <HAL_RCC_ClockConfig+0xde>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ca:	f7fe fe33 	bl	8000434 <HAL_GetTick>
 80017ce:	1b80      	subs	r0, r0, r6
 80017d0:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <HAL_RCC_ClockConfig+0x144>)
 80017d2:	4298      	cmp	r0, r3
 80017d4:	d9f3      	bls.n	80017be <HAL_RCC_ClockConfig+0xc2>
          return HAL_TIMEOUT;
 80017d6:	2003      	movs	r0, #3
 80017d8:	e02b      	b.n	8001832 <HAL_RCC_ClockConfig+0x136>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80017da:	4b17      	ldr	r3, [pc, #92]	; (8001838 <HAL_RCC_ClockConfig+0x13c>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	2301      	movs	r3, #1
 80017e0:	4013      	ands	r3, r2
 80017e2:	429c      	cmp	r4, r3
 80017e4:	d20b      	bcs.n	80017fe <HAL_RCC_ClockConfig+0x102>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e6:	4914      	ldr	r1, [pc, #80]	; (8001838 <HAL_RCC_ClockConfig+0x13c>)
 80017e8:	680b      	ldr	r3, [r1, #0]
 80017ea:	2201      	movs	r2, #1
 80017ec:	4393      	bics	r3, r2
 80017ee:	4323      	orrs	r3, r4
 80017f0:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017f2:	680b      	ldr	r3, [r1, #0]
 80017f4:	401a      	ands	r2, r3
 80017f6:	4294      	cmp	r4, r2
 80017f8:	d001      	beq.n	80017fe <HAL_RCC_ClockConfig+0x102>
      return HAL_ERROR;
 80017fa:	2001      	movs	r0, #1
 80017fc:	e019      	b.n	8001832 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017fe:	682b      	ldr	r3, [r5, #0]
 8001800:	075b      	lsls	r3, r3, #29
 8001802:	d506      	bpl.n	8001812 <HAL_RCC_ClockConfig+0x116>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001804:	4a0d      	ldr	r2, [pc, #52]	; (800183c <HAL_RCC_ClockConfig+0x140>)
 8001806:	6853      	ldr	r3, [r2, #4]
 8001808:	490e      	ldr	r1, [pc, #56]	; (8001844 <HAL_RCC_ClockConfig+0x148>)
 800180a:	400b      	ands	r3, r1
 800180c:	68e9      	ldr	r1, [r5, #12]
 800180e:	430b      	orrs	r3, r1
 8001810:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001812:	f7ff ff3d 	bl	8001690 <HAL_RCC_GetSysClockFreq>
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_RCC_ClockConfig+0x140>)
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	0912      	lsrs	r2, r2, #4
 800181c:	230f      	movs	r3, #15
 800181e:	4013      	ands	r3, r2
 8001820:	4a09      	ldr	r2, [pc, #36]	; (8001848 <HAL_RCC_ClockConfig+0x14c>)
 8001822:	5cd3      	ldrb	r3, [r2, r3]
 8001824:	40d8      	lsrs	r0, r3
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_RCC_ClockConfig+0x150>)
 8001828:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800182a:	2000      	movs	r0, #0
 800182c:	f003 fd3e 	bl	80052ac <HAL_InitTick>
  return HAL_OK;
 8001830:	2000      	movs	r0, #0
}
 8001832:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001834:	2001      	movs	r0, #1
 8001836:	e7fc      	b.n	8001832 <HAL_RCC_ClockConfig+0x136>
 8001838:	40022000 	.word	0x40022000
 800183c:	40021000 	.word	0x40021000
 8001840:	00001388 	.word	0x00001388
 8001844:	fffff8ff 	.word	0xfffff8ff
 8001848:	08007048 	.word	0x08007048
 800184c:	2000006c 	.word	0x2000006c

08001850 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001850:	4b01      	ldr	r3, [pc, #4]	; (8001858 <HAL_RCC_GetHCLKFreq+0x8>)
 8001852:	6818      	ldr	r0, [r3, #0]
}
 8001854:	4770      	bx	lr
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	2000006c 	.word	0x2000006c

0800185c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800185c:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800185e:	f7ff fff7 	bl	8001850 <HAL_RCC_GetHCLKFreq>
 8001862:	4b04      	ldr	r3, [pc, #16]	; (8001874 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	0a12      	lsrs	r2, r2, #8
 8001868:	2307      	movs	r3, #7
 800186a:	4013      	ands	r3, r2
 800186c:	4a02      	ldr	r2, [pc, #8]	; (8001878 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800186e:	5cd3      	ldrb	r3, [r2, r3]
 8001870:	40d8      	lsrs	r0, r3
}    
 8001872:	bd10      	pop	{r4, pc}
 8001874:	40021000 	.word	0x40021000
 8001878:	08007058 	.word	0x08007058

0800187c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800187c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800187e:	2307      	movs	r3, #7
 8001880:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <HAL_RCC_GetClockConfig+0x30>)
 8001884:	685c      	ldr	r4, [r3, #4]
 8001886:	2203      	movs	r2, #3
 8001888:	4022      	ands	r2, r4
 800188a:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800188c:	685c      	ldr	r4, [r3, #4]
 800188e:	22f0      	movs	r2, #240	; 0xf0
 8001890:	4022      	ands	r2, r4
 8001892:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	22e0      	movs	r2, #224	; 0xe0
 8001898:	00d2      	lsls	r2, r2, #3
 800189a:	4013      	ands	r3, r2
 800189c:	60c3      	str	r3, [r0, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800189e:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <HAL_RCC_GetClockConfig+0x34>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	2301      	movs	r3, #1
 80018a4:	4013      	ands	r3, r2
 80018a6:	600b      	str	r3, [r1, #0]
}
 80018a8:	bd10      	pop	{r4, pc}
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40022000 	.word	0x40022000

080018b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018b4:	b570      	push	{r4, r5, r6, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80018ba:	6803      	ldr	r3, [r0, #0]
 80018bc:	03db      	lsls	r3, r3, #15
 80018be:	d535      	bpl.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018c0:	4b3c      	ldr	r3, [pc, #240]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	d448      	bmi.n	800195a <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018c8:	4a3a      	ldr	r2, [pc, #232]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80018ca:	69d1      	ldr	r1, [r2, #28]
 80018cc:	2080      	movs	r0, #128	; 0x80
 80018ce:	0540      	lsls	r0, r0, #21
 80018d0:	4301      	orrs	r1, r0
 80018d2:	61d1      	str	r1, [r2, #28]
 80018d4:	69d3      	ldr	r3, [r2, #28]
 80018d6:	4003      	ands	r3, r0
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80018dc:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018de:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	05db      	lsls	r3, r3, #23
 80018e4:	d53b      	bpl.n	800195e <HAL_RCCEx_PeriphCLKConfig+0xaa>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018e6:	4b33      	ldr	r3, [pc, #204]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	22c0      	movs	r2, #192	; 0xc0
 80018ec:	0092      	lsls	r2, r2, #2
 80018ee:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018f0:	d013      	beq.n	800191a <HAL_RCCEx_PeriphCLKConfig+0x66>
 80018f2:	6861      	ldr	r1, [r4, #4]
 80018f4:	400a      	ands	r2, r1
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d00f      	beq.n	800191a <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018fa:	4b2e      	ldr	r3, [pc, #184]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80018fc:	6a18      	ldr	r0, [r3, #32]
 80018fe:	4a2f      	ldr	r2, [pc, #188]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001900:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001902:	6a1e      	ldr	r6, [r3, #32]
 8001904:	2180      	movs	r1, #128	; 0x80
 8001906:	0249      	lsls	r1, r1, #9
 8001908:	4331      	orrs	r1, r6
 800190a:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800190c:	6a19      	ldr	r1, [r3, #32]
 800190e:	4e2c      	ldr	r6, [pc, #176]	; (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001910:	4031      	ands	r1, r6
 8001912:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001914:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001916:	07c3      	lsls	r3, r0, #31
 8001918:	d435      	bmi.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0xd2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800191a:	4a26      	ldr	r2, [pc, #152]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800191c:	6a13      	ldr	r3, [r2, #32]
 800191e:	4927      	ldr	r1, [pc, #156]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001920:	400b      	ands	r3, r1
 8001922:	6861      	ldr	r1, [r4, #4]
 8001924:	430b      	orrs	r3, r1
 8001926:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001928:	2d01      	cmp	r5, #1
 800192a:	d03b      	beq.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800192c:	6823      	ldr	r3, [r4, #0]
 800192e:	07db      	lsls	r3, r3, #31
 8001930:	d506      	bpl.n	8001940 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001932:	4a20      	ldr	r2, [pc, #128]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001934:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001936:	2103      	movs	r1, #3
 8001938:	438b      	bics	r3, r1
 800193a:	68a1      	ldr	r1, [r4, #8]
 800193c:	430b      	orrs	r3, r1
 800193e:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001940:	6823      	ldr	r3, [r4, #0]
 8001942:	069b      	lsls	r3, r3, #26
 8001944:	d533      	bpl.n	80019ae <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001946:	4a1b      	ldr	r2, [pc, #108]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001948:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800194a:	2110      	movs	r1, #16
 800194c:	438b      	bics	r3, r1
 800194e:	68e1      	ldr	r1, [r4, #12]
 8001950:	430b      	orrs	r3, r1
 8001952:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001954:	2000      	movs	r0, #0
}
 8001956:	b002      	add	sp, #8
 8001958:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 800195a:	2500      	movs	r5, #0
 800195c:	e7bf      	b.n	80018de <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800195e:	4a16      	ldr	r2, [pc, #88]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001960:	6811      	ldr	r1, [r2, #0]
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	430b      	orrs	r3, r1
 8001968:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800196a:	f7fe fd63 	bl	8000434 <HAL_GetTick>
 800196e:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	05db      	lsls	r3, r3, #23
 8001976:	d4b6      	bmi.n	80018e6 <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001978:	f7fe fd5c 	bl	8000434 <HAL_GetTick>
 800197c:	1b80      	subs	r0, r0, r6
 800197e:	2864      	cmp	r0, #100	; 0x64
 8001980:	d9f6      	bls.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 8001982:	2003      	movs	r0, #3
 8001984:	e7e7      	b.n	8001956 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        tickstart = HAL_GetTick();
 8001986:	f7fe fd55 	bl	8000434 <HAL_GetTick>
 800198a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	079b      	lsls	r3, r3, #30
 8001992:	d4c2      	bmi.n	800191a <HAL_RCCEx_PeriphCLKConfig+0x66>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001994:	f7fe fd4e 	bl	8000434 <HAL_GetTick>
 8001998:	1b80      	subs	r0, r0, r6
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800199c:	4298      	cmp	r0, r3
 800199e:	d9f5      	bls.n	800198c <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
 80019a0:	2003      	movs	r0, #3
 80019a2:	e7d8      	b.n	8001956 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a4:	69d3      	ldr	r3, [r2, #28]
 80019a6:	4908      	ldr	r1, [pc, #32]	; (80019c8 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80019a8:	400b      	ands	r3, r1
 80019aa:	61d3      	str	r3, [r2, #28]
 80019ac:	e7be      	b.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 80019ae:	2000      	movs	r0, #0
 80019b0:	e7d1      	b.n	8001956 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40007000 	.word	0x40007000
 80019bc:	fffffcff 	.word	0xfffffcff
 80019c0:	fffeffff 	.word	0xfffeffff
 80019c4:	00001388 	.word	0x00001388
 80019c8:	efffffff 	.word	0xefffffff

080019cc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80019cc:	b570      	push	{r4, r5, r6, lr}
 80019ce:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80019d0:	6802      	ldr	r2, [r0, #0]
 80019d2:	68d3      	ldr	r3, [r2, #12]
 80019d4:	21a0      	movs	r1, #160	; 0xa0
 80019d6:	438b      	bics	r3, r1
 80019d8:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80019da:	f7fe fd2b 	bl	8000434 <HAL_GetTick>
 80019de:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80019e0:	6823      	ldr	r3, [r4, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	069b      	lsls	r3, r3, #26
 80019e6:	d408      	bmi.n	80019fa <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80019e8:	f7fe fd24 	bl	8000434 <HAL_GetTick>
 80019ec:	1b40      	subs	r0, r0, r5
 80019ee:	23fa      	movs	r3, #250	; 0xfa
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4298      	cmp	r0, r3
 80019f4:	d9f4      	bls.n	80019e0 <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 80019f6:	2003      	movs	r0, #3
 80019f8:	e000      	b.n	80019fc <HAL_RTC_WaitForSynchro+0x30>
    } 
  }

  return HAL_OK;
 80019fa:	2000      	movs	r0, #0
}
 80019fc:	bd70      	pop	{r4, r5, r6, pc}

080019fe <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80019fe:	b570      	push	{r4, r5, r6, lr}
 8001a00:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001a02:	6803      	ldr	r3, [r0, #0]
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	0652      	lsls	r2, r2, #25
 8001a08:	d501      	bpl.n	8001a0e <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8001a0a:	2000      	movs	r0, #0
}
 8001a0c:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001a0e:	2201      	movs	r2, #1
 8001a10:	4252      	negs	r2, r2
 8001a12:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001a14:	f7fe fd0e 	bl	8000434 <HAL_GetTick>
 8001a18:	0005      	movs	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001a1a:	6823      	ldr	r3, [r4, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	065b      	lsls	r3, r3, #25
 8001a20:	d408      	bmi.n	8001a34 <RTC_EnterInitMode+0x36>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8001a22:	f7fe fd07 	bl	8000434 <HAL_GetTick>
 8001a26:	1b40      	subs	r0, r0, r5
 8001a28:	23fa      	movs	r3, #250	; 0xfa
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4298      	cmp	r0, r3
 8001a2e:	d9f4      	bls.n	8001a1a <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8001a30:	2003      	movs	r0, #3
 8001a32:	e7eb      	b.n	8001a0c <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8001a34:	2000      	movs	r0, #0
 8001a36:	e7e9      	b.n	8001a0c <RTC_EnterInitMode+0xe>

08001a38 <HAL_RTC_Init>:
{
 8001a38:	b570      	push	{r4, r5, r6, lr}
 8001a3a:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8001a3c:	d057      	beq.n	8001aee <HAL_RTC_Init+0xb6>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001a3e:	7f43      	ldrb	r3, [r0, #29]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d03d      	beq.n	8001ac0 <HAL_RTC_Init+0x88>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001a44:	2302      	movs	r3, #2
 8001a46:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001a48:	6823      	ldr	r3, [r4, #0]
 8001a4a:	22ca      	movs	r2, #202	; 0xca
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24
 8001a4e:	6823      	ldr	r3, [r4, #0]
 8001a50:	3a77      	subs	r2, #119	; 0x77
 8001a52:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001a54:	0020      	movs	r0, r4
 8001a56:	f7ff ffd2 	bl	80019fe <RTC_EnterInitMode>
 8001a5a:	1e05      	subs	r5, r0, #0
 8001a5c:	d134      	bne.n	8001ac8 <HAL_RTC_Init+0x90>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001a5e:	6822      	ldr	r2, [r4, #0]
 8001a60:	6893      	ldr	r3, [r2, #8]
 8001a62:	4924      	ldr	r1, [pc, #144]	; (8001af4 <HAL_RTC_Init+0xbc>)
 8001a64:	400b      	ands	r3, r1
 8001a66:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001a68:	6821      	ldr	r1, [r4, #0]
 8001a6a:	688a      	ldr	r2, [r1, #8]
 8001a6c:	6863      	ldr	r3, [r4, #4]
 8001a6e:	6920      	ldr	r0, [r4, #16]
 8001a70:	4303      	orrs	r3, r0
 8001a72:	6960      	ldr	r0, [r4, #20]
 8001a74:	4303      	orrs	r3, r0
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	68e2      	ldr	r2, [r4, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001a80:	6821      	ldr	r1, [r4, #0]
 8001a82:	690b      	ldr	r3, [r1, #16]
 8001a84:	68a2      	ldr	r2, [r4, #8]
 8001a86:	0412      	lsls	r2, r2, #16
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	610b      	str	r3, [r1, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8001a8c:	6822      	ldr	r2, [r4, #0]
 8001a8e:	68d3      	ldr	r3, [r2, #12]
 8001a90:	2180      	movs	r1, #128	; 0x80
 8001a92:	438b      	bics	r3, r1
 8001a94:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001a96:	6823      	ldr	r3, [r4, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	069b      	lsls	r3, r3, #26
 8001a9c:	d51b      	bpl.n	8001ad6 <HAL_RTC_Init+0x9e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001a9e:	6822      	ldr	r2, [r4, #0]
 8001aa0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001aa2:	4915      	ldr	r1, [pc, #84]	; (8001af8 <HAL_RTC_Init+0xc0>)
 8001aa4:	400b      	ands	r3, r1
 8001aa6:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001aa8:	6822      	ldr	r2, [r4, #0]
 8001aaa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001aac:	69a1      	ldr	r1, [r4, #24]
 8001aae:	430b      	orrs	r3, r1
 8001ab0:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	22ff      	movs	r2, #255	; 0xff
 8001ab6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	7763      	strb	r3, [r4, #29]
}
 8001abc:	0028      	movs	r0, r5
 8001abe:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8001ac0:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8001ac2:	f003 fbbd 	bl	8005240 <HAL_RTC_MspInit>
 8001ac6:	e7bd      	b.n	8001a44 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001ac8:	6823      	ldr	r3, [r4, #0]
 8001aca:	22ff      	movs	r2, #255	; 0xff
 8001acc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001ace:	2304      	movs	r3, #4
 8001ad0:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8001ad2:	2501      	movs	r5, #1
 8001ad4:	e7f2      	b.n	8001abc <HAL_RTC_Init+0x84>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001ad6:	0020      	movs	r0, r4
 8001ad8:	f7ff ff78 	bl	80019cc <HAL_RTC_WaitForSynchro>
 8001adc:	2800      	cmp	r0, #0
 8001ade:	d0de      	beq.n	8001a9e <HAL_RTC_Init+0x66>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ae0:	6823      	ldr	r3, [r4, #0]
 8001ae2:	22ff      	movs	r2, #255	; 0xff
 8001ae4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8001aea:	2501      	movs	r5, #1
 8001aec:	e7e6      	b.n	8001abc <HAL_RTC_Init+0x84>
     return HAL_ERROR;
 8001aee:	2501      	movs	r5, #1
 8001af0:	e7e4      	b.n	8001abc <HAL_RTC_Init+0x84>
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	ff8fffbf 	.word	0xff8fffbf
 8001af8:	fffbffff 	.word	0xfffbffff

08001afc <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8001afc:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8001afe:	e002      	b.n	8001b06 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8001b00:	3301      	adds	r3, #1
    Value -= 10U;
 8001b02:	380a      	subs	r0, #10
 8001b04:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8001b06:	2809      	cmp	r0, #9
 8001b08:	d8fa      	bhi.n	8001b00 <RTC_ByteToBcd2+0x4>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8001b0a:	011b      	lsls	r3, r3, #4
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	4318      	orrs	r0, r3
}
 8001b10:	4770      	bx	lr
	...

08001b14 <HAL_RTC_SetTime>:
{
 8001b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b16:	0004      	movs	r4, r0
 8001b18:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8001b1a:	7f03      	ldrb	r3, [r0, #28]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d06f      	beq.n	8001c00 <HAL_RTC_SetTime+0xec>
 8001b20:	2301      	movs	r3, #1
 8001b22:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001b24:	3301      	adds	r3, #1
 8001b26:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8001b28:	2a00      	cmp	r2, #0
 8001b2a:	d141      	bne.n	8001bb0 <HAL_RTC_SetTime+0x9c>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001b2c:	6803      	ldr	r3, [r0, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	065b      	lsls	r3, r3, #25
 8001b32:	d401      	bmi.n	8001b38 <HAL_RTC_SetTime+0x24>
      sTime->TimeFormat = 0x00U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001b38:	7830      	ldrb	r0, [r6, #0]
 8001b3a:	f7ff ffdf 	bl	8001afc <RTC_ByteToBcd2>
 8001b3e:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001b40:	7870      	ldrb	r0, [r6, #1]
 8001b42:	f7ff ffdb 	bl	8001afc <RTC_ByteToBcd2>
 8001b46:	0200      	lsls	r0, r0, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001b48:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001b4a:	78b0      	ldrb	r0, [r6, #2]
 8001b4c:	f7ff ffd6 	bl	8001afc <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001b50:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8001b52:	78f0      	ldrb	r0, [r6, #3]
 8001b54:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001b56:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001b58:	6823      	ldr	r3, [r4, #0]
 8001b5a:	22ca      	movs	r2, #202	; 0xca
 8001b5c:	625a      	str	r2, [r3, #36]	; 0x24
 8001b5e:	6823      	ldr	r3, [r4, #0]
 8001b60:	3a77      	subs	r2, #119	; 0x77
 8001b62:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001b64:	0020      	movs	r0, r4
 8001b66:	f7ff ff4a 	bl	80019fe <RTC_EnterInitMode>
 8001b6a:	1e07      	subs	r7, r0, #0
 8001b6c:	d131      	bne.n	8001bd2 <HAL_RTC_SetTime+0xbe>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	4825      	ldr	r0, [pc, #148]	; (8001c08 <HAL_RTC_SetTime+0xf4>)
 8001b72:	4005      	ands	r5, r0
 8001b74:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001b76:	6822      	ldr	r2, [r4, #0]
 8001b78:	6893      	ldr	r3, [r2, #8]
 8001b7a:	4924      	ldr	r1, [pc, #144]	; (8001c0c <HAL_RTC_SetTime+0xf8>)
 8001b7c:	400b      	ands	r3, r1
 8001b7e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001b80:	6821      	ldr	r1, [r4, #0]
 8001b82:	688b      	ldr	r3, [r1, #8]
 8001b84:	68f2      	ldr	r2, [r6, #12]
 8001b86:	6930      	ldr	r0, [r6, #16]
 8001b88:	4302      	orrs	r2, r0
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001b8e:	6822      	ldr	r2, [r4, #0]
 8001b90:	68d3      	ldr	r3, [r2, #12]
 8001b92:	2180      	movs	r1, #128	; 0x80
 8001b94:	438b      	bics	r3, r1
 8001b96:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	069b      	lsls	r3, r3, #26
 8001b9e:	d521      	bpl.n	8001be4 <HAL_RTC_SetTime+0xd0>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ba0:	6823      	ldr	r3, [r4, #0]
 8001ba2:	22ff      	movs	r2, #255	; 0xff
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8001baa:	2300      	movs	r3, #0
 8001bac:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8001bae:	e028      	b.n	8001c02 <HAL_RTC_SetTime+0xee>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001bb0:	6803      	ldr	r3, [r0, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	065b      	lsls	r3, r3, #25
 8001bb6:	d401      	bmi.n	8001bbc <HAL_RTC_SetTime+0xa8>
      sTime->TimeFormat = 0x00U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001bbc:	7835      	ldrb	r5, [r6, #0]
 8001bbe:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001bc0:	7870      	ldrb	r0, [r6, #1]
 8001bc2:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001bc4:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8001bc6:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001bc8:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 8001bca:	78f0      	ldrb	r0, [r6, #3]
 8001bcc:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001bce:	4305      	orrs	r5, r0
 8001bd0:	e7c2      	b.n	8001b58 <HAL_RTC_SetTime+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	22ff      	movs	r2, #255	; 0xff
 8001bd6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8001bdc:	2300      	movs	r3, #0
 8001bde:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8001be0:	2701      	movs	r7, #1
 8001be2:	e00e      	b.n	8001c02 <HAL_RTC_SetTime+0xee>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001be4:	0020      	movs	r0, r4
 8001be6:	f7ff fef1 	bl	80019cc <HAL_RTC_WaitForSynchro>
 8001bea:	2800      	cmp	r0, #0
 8001bec:	d0d8      	beq.n	8001ba0 <HAL_RTC_SetTime+0x8c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001bee:	6823      	ldr	r3, [r4, #0]
 8001bf0:	22ff      	movs	r2, #255	; 0xff
 8001bf2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8001bfc:	2701      	movs	r7, #1
 8001bfe:	e000      	b.n	8001c02 <HAL_RTC_SetTime+0xee>
  __HAL_LOCK(hrtc);
 8001c00:	2702      	movs	r7, #2
}
 8001c02:	0038      	movs	r0, r7
 8001c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	007f7f7f 	.word	0x007f7f7f
 8001c0c:	fffbffff 	.word	0xfffbffff

08001c10 <HAL_RTC_SetDate>:
{
 8001c10:	b570      	push	{r4, r5, r6, lr}
 8001c12:	0004      	movs	r4, r0
 8001c14:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 8001c16:	7f03      	ldrb	r3, [r0, #28]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d060      	beq.n	8001cde <HAL_RTC_SetDate+0xce>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8001c20:	3301      	adds	r3, #1
 8001c22:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001c24:	2a00      	cmp	r2, #0
 8001c26:	d106      	bne.n	8001c36 <HAL_RTC_SetDate+0x26>
 8001c28:	784b      	ldrb	r3, [r1, #1]
 8001c2a:	06d9      	lsls	r1, r3, #27
 8001c2c:	d503      	bpl.n	8001c36 <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001c2e:	2110      	movs	r1, #16
 8001c30:	438b      	bics	r3, r1
 8001c32:	330a      	adds	r3, #10
 8001c34:	7073      	strb	r3, [r6, #1]
  if(Format == RTC_FORMAT_BIN)
 8001c36:	2a00      	cmp	r2, #0
 8001c38:	d12f      	bne.n	8001c9a <HAL_RTC_SetDate+0x8a>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001c3a:	78f0      	ldrb	r0, [r6, #3]
 8001c3c:	f7ff ff5e 	bl	8001afc <RTC_ByteToBcd2>
 8001c40:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001c42:	7870      	ldrb	r0, [r6, #1]
 8001c44:	f7ff ff5a 	bl	8001afc <RTC_ByteToBcd2>
 8001c48:	0200      	lsls	r0, r0, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001c4a:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8001c4c:	78b0      	ldrb	r0, [r6, #2]
 8001c4e:	f7ff ff55 	bl	8001afc <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001c52:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13U));   
 8001c54:	7830      	ldrb	r0, [r6, #0]
 8001c56:	0340      	lsls	r0, r0, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001c58:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001c5a:	6823      	ldr	r3, [r4, #0]
 8001c5c:	22ca      	movs	r2, #202	; 0xca
 8001c5e:	625a      	str	r2, [r3, #36]	; 0x24
 8001c60:	6823      	ldr	r3, [r4, #0]
 8001c62:	3a77      	subs	r2, #119	; 0x77
 8001c64:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001c66:	0020      	movs	r0, r4
 8001c68:	f7ff fec9 	bl	80019fe <RTC_EnterInitMode>
 8001c6c:	1e06      	subs	r6, r0, #0
 8001c6e:	d11f      	bne.n	8001cb0 <HAL_RTC_SetDate+0xa0>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	481c      	ldr	r0, [pc, #112]	; (8001ce4 <HAL_RTC_SetDate+0xd4>)
 8001c74:	4005      	ands	r5, r0
 8001c76:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001c78:	6822      	ldr	r2, [r4, #0]
 8001c7a:	68d3      	ldr	r3, [r2, #12]
 8001c7c:	2180      	movs	r1, #128	; 0x80
 8001c7e:	438b      	bics	r3, r1
 8001c80:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001c82:	6823      	ldr	r3, [r4, #0]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	069b      	lsls	r3, r3, #26
 8001c88:	d51b      	bpl.n	8001cc2 <HAL_RTC_SetDate+0xb2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001c8a:	6823      	ldr	r3, [r4, #0]
 8001c8c:	22ff      	movs	r2, #255	; 0xff
 8001c8e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8001c90:	2301      	movs	r3, #1
 8001c92:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8001c94:	2300      	movs	r3, #0
 8001c96:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8001c98:	e022      	b.n	8001ce0 <HAL_RTC_SetDate+0xd0>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 8001c9a:	7873      	ldrb	r3, [r6, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8001c9c:	78b0      	ldrb	r0, [r6, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001c9e:	78f5      	ldrb	r5, [r6, #3]
 8001ca0:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8001ca2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001ca4:	431d      	orrs	r5, r3
                  (((uint32_t)sDate->Month) << 8U) | \
 8001ca6:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13U));  
 8001ca8:	7830      	ldrb	r0, [r6, #0]
 8001caa:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001cac:	4305      	orrs	r5, r0
 8001cae:	e7d4      	b.n	8001c5a <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001cb0:	6823      	ldr	r3, [r4, #0]
 8001cb2:	22ff      	movs	r2, #255	; 0xff
 8001cb4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001cb6:	2304      	movs	r3, #4
 8001cb8:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8001cba:	2300      	movs	r3, #0
 8001cbc:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8001cbe:	2601      	movs	r6, #1
 8001cc0:	e00e      	b.n	8001ce0 <HAL_RTC_SetDate+0xd0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001cc2:	0020      	movs	r0, r4
 8001cc4:	f7ff fe82 	bl	80019cc <HAL_RTC_WaitForSynchro>
 8001cc8:	2800      	cmp	r0, #0
 8001cca:	d0de      	beq.n	8001c8a <HAL_RTC_SetDate+0x7a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001ccc:	6823      	ldr	r3, [r4, #0]
 8001cce:	22ff      	movs	r2, #255	; 0xff
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8001cda:	2601      	movs	r6, #1
 8001cdc:	e000      	b.n	8001ce0 <HAL_RTC_SetDate+0xd0>
 __HAL_LOCK(hrtc);
 8001cde:	2602      	movs	r6, #2
}
 8001ce0:	0030      	movs	r0, r6
 8001ce2:	bd70      	pop	{r4, r5, r6, pc}
 8001ce4:	00ffff3f 	.word	0x00ffff3f

08001ce8 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8001ce8:	0902      	lsrs	r2, r0, #4
 8001cea:	0093      	lsls	r3, r2, #2
 8001cec:	189b      	adds	r3, r3, r2
 8001cee:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0FU));
 8001cf0:	230f      	movs	r3, #15
 8001cf2:	4018      	ands	r0, r3
 8001cf4:	1880      	adds	r0, r0, r2
 8001cf6:	b2c0      	uxtb	r0, r0
}
 8001cf8:	4770      	bx	lr
	...

08001cfc <HAL_RTC_GetTime>:
{
 8001cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cfe:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001d00:	6803      	ldr	r3, [r0, #0]
 8001d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d04:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001d06:	6803      	ldr	r3, [r0, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	045b      	lsls	r3, r3, #17
 8001d0c:	0c5b      	lsrs	r3, r3, #17
 8001d0e:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8001d10:	6803      	ldr	r3, [r0, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	490e      	ldr	r1, [pc, #56]	; (8001d50 <HAL_RTC_GetTime+0x54>)
 8001d16:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8001d18:	0c1e      	lsrs	r6, r3, #16
 8001d1a:	203f      	movs	r0, #63	; 0x3f
 8001d1c:	4030      	ands	r0, r6
 8001d1e:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8001d20:	0a1d      	lsrs	r5, r3, #8
 8001d22:	277f      	movs	r7, #127	; 0x7f
 8001d24:	403d      	ands	r5, r7
 8001d26:	7065      	strb	r5, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8001d28:	401f      	ands	r7, r3
 8001d2a:	70a7      	strb	r7, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8001d2c:	2140      	movs	r1, #64	; 0x40
 8001d2e:	4031      	ands	r1, r6
 8001d30:	70e1      	strb	r1, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 8001d32:	2a00      	cmp	r2, #0
 8001d34:	d10a      	bne.n	8001d4c <HAL_RTC_GetTime+0x50>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001d36:	f7ff ffd7 	bl	8001ce8 <RTC_Bcd2ToByte>
 8001d3a:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001d3c:	0028      	movs	r0, r5
 8001d3e:	f7ff ffd3 	bl	8001ce8 <RTC_Bcd2ToByte>
 8001d42:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8001d44:	0038      	movs	r0, r7
 8001d46:	f7ff ffcf 	bl	8001ce8 <RTC_Bcd2ToByte>
 8001d4a:	70a0      	strb	r0, [r4, #2]
}
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d50:	007f7f7f 	.word	0x007f7f7f

08001d54 <HAL_RTC_GetDate>:
{
 8001d54:	b570      	push	{r4, r5, r6, lr}
 8001d56:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8001d58:	6803      	ldr	r3, [r0, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	490e      	ldr	r1, [pc, #56]	; (8001d98 <HAL_RTC_GetDate+0x44>)
 8001d5e:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8001d60:	0c18      	lsrs	r0, r3, #16
 8001d62:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8001d64:	0a19      	lsrs	r1, r3, #8
 8001d66:	261f      	movs	r6, #31
 8001d68:	400e      	ands	r6, r1
 8001d6a:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8001d6c:	253f      	movs	r5, #63	; 0x3f
 8001d6e:	401d      	ands	r5, r3
 8001d70:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8001d72:	0b5b      	lsrs	r3, r3, #13
 8001d74:	2107      	movs	r1, #7
 8001d76:	400b      	ands	r3, r1
 8001d78:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8001d7a:	2a00      	cmp	r2, #0
 8001d7c:	d10a      	bne.n	8001d94 <HAL_RTC_GetDate+0x40>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8001d7e:	f7ff ffb3 	bl	8001ce8 <RTC_Bcd2ToByte>
 8001d82:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8001d84:	0030      	movs	r0, r6
 8001d86:	f7ff ffaf 	bl	8001ce8 <RTC_Bcd2ToByte>
 8001d8a:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8001d8c:	0028      	movs	r0, r5
 8001d8e:	f7ff ffab 	bl	8001ce8 <RTC_Bcd2ToByte>
 8001d92:	70a0      	strb	r0, [r4, #2]
}
 8001d94:	2000      	movs	r0, #0
 8001d96:	bd70      	pop	{r4, r5, r6, pc}
 8001d98:	00ffff3f 	.word	0x00ffff3f

08001d9c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d9c:	4770      	bx	lr

08001d9e <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d9e:	6803      	ldr	r3, [r0, #0]
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	2101      	movs	r1, #1
 8001da4:	430a      	orrs	r2, r1
 8001da6:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001da8:	6802      	ldr	r2, [r0, #0]
 8001daa:	6813      	ldr	r3, [r2, #0]
 8001dac:	430b      	orrs	r3, r1
 8001dae:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 8001db0:	2000      	movs	r0, #0
 8001db2:	4770      	bx	lr

08001db4 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001db4:	4770      	bx	lr

08001db6 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001db6:	4770      	bx	lr

08001db8 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001db8:	4770      	bx	lr

08001dba <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dba:	4770      	bx	lr

08001dbc <HAL_TIM_IRQHandler>:
{
 8001dbc:	b510      	push	{r4, lr}
 8001dbe:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dc0:	6803      	ldr	r3, [r0, #0]
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	0792      	lsls	r2, r2, #30
 8001dc6:	d50f      	bpl.n	8001de8 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	0792      	lsls	r2, r2, #30
 8001dcc:	d50c      	bpl.n	8001de8 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dce:	2203      	movs	r2, #3
 8001dd0:	4252      	negs	r2, r2
 8001dd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dd8:	6803      	ldr	r3, [r0, #0]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	079b      	lsls	r3, r3, #30
 8001dde:	d063      	beq.n	8001ea8 <HAL_TIM_IRQHandler+0xec>
          HAL_TIM_IC_CaptureCallback(htim);
 8001de0:	f7ff ffe9 	bl	8001db6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de4:	2300      	movs	r3, #0
 8001de6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001de8:	6823      	ldr	r3, [r4, #0]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	0752      	lsls	r2, r2, #29
 8001dee:	d512      	bpl.n	8001e16 <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	0752      	lsls	r2, r2, #29
 8001df4:	d50f      	bpl.n	8001e16 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001df6:	2205      	movs	r2, #5
 8001df8:	4252      	negs	r2, r2
 8001dfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e00:	6823      	ldr	r3, [r4, #0]
 8001e02:	699a      	ldr	r2, [r3, #24]
 8001e04:	23c0      	movs	r3, #192	; 0xc0
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	421a      	tst	r2, r3
 8001e0a:	d053      	beq.n	8001eb4 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e0c:	0020      	movs	r0, r4
 8001e0e:	f7ff ffd2 	bl	8001db6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e12:	2300      	movs	r3, #0
 8001e14:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e16:	6823      	ldr	r3, [r4, #0]
 8001e18:	691a      	ldr	r2, [r3, #16]
 8001e1a:	0712      	lsls	r2, r2, #28
 8001e1c:	d510      	bpl.n	8001e40 <HAL_TIM_IRQHandler+0x84>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	0712      	lsls	r2, r2, #28
 8001e22:	d50d      	bpl.n	8001e40 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e24:	2209      	movs	r2, #9
 8001e26:	4252      	negs	r2, r2
 8001e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e2a:	2304      	movs	r3, #4
 8001e2c:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e2e:	6823      	ldr	r3, [r4, #0]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	079b      	lsls	r3, r3, #30
 8001e34:	d045      	beq.n	8001ec2 <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e36:	0020      	movs	r0, r4
 8001e38:	f7ff ffbd 	bl	8001db6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e40:	6823      	ldr	r3, [r4, #0]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	06d2      	lsls	r2, r2, #27
 8001e46:	d512      	bpl.n	8001e6e <HAL_TIM_IRQHandler+0xb2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	06d2      	lsls	r2, r2, #27
 8001e4c:	d50f      	bpl.n	8001e6e <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e4e:	2211      	movs	r2, #17
 8001e50:	4252      	negs	r2, r2
 8001e52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e54:	2308      	movs	r3, #8
 8001e56:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e58:	6823      	ldr	r3, [r4, #0]
 8001e5a:	69da      	ldr	r2, [r3, #28]
 8001e5c:	23c0      	movs	r3, #192	; 0xc0
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	421a      	tst	r2, r3
 8001e62:	d035      	beq.n	8001ed0 <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e64:	0020      	movs	r0, r4
 8001e66:	f7ff ffa6 	bl	8001db6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e6e:	6823      	ldr	r3, [r4, #0]
 8001e70:	691a      	ldr	r2, [r3, #16]
 8001e72:	07d2      	lsls	r2, r2, #31
 8001e74:	d502      	bpl.n	8001e7c <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	07d2      	lsls	r2, r2, #31
 8001e7a:	d430      	bmi.n	8001ede <HAL_TIM_IRQHandler+0x122>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e7c:	6823      	ldr	r3, [r4, #0]
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	0612      	lsls	r2, r2, #24
 8001e82:	d502      	bpl.n	8001e8a <HAL_TIM_IRQHandler+0xce>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	0612      	lsls	r2, r2, #24
 8001e88:	d430      	bmi.n	8001eec <HAL_TIM_IRQHandler+0x130>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e8a:	6823      	ldr	r3, [r4, #0]
 8001e8c:	691a      	ldr	r2, [r3, #16]
 8001e8e:	0652      	lsls	r2, r2, #25
 8001e90:	d502      	bpl.n	8001e98 <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	0652      	lsls	r2, r2, #25
 8001e96:	d430      	bmi.n	8001efa <HAL_TIM_IRQHandler+0x13e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e98:	6823      	ldr	r3, [r4, #0]
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	0692      	lsls	r2, r2, #26
 8001e9e:	d502      	bpl.n	8001ea6 <HAL_TIM_IRQHandler+0xea>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	0692      	lsls	r2, r2, #26
 8001ea4:	d430      	bmi.n	8001f08 <HAL_TIM_IRQHandler+0x14c>
}
 8001ea6:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea8:	f7ff ff84 	bl	8001db4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eac:	0020      	movs	r0, r4
 8001eae:	f7ff ff83 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001eb2:	e797      	b.n	8001de4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb4:	0020      	movs	r0, r4
 8001eb6:	f7ff ff7d 	bl	8001db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eba:	0020      	movs	r0, r4
 8001ebc:	f7ff ff7c 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ec0:	e7a7      	b.n	8001e12 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec2:	0020      	movs	r0, r4
 8001ec4:	f7ff ff76 	bl	8001db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec8:	0020      	movs	r0, r4
 8001eca:	f7ff ff75 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ece:	e7b5      	b.n	8001e3c <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed0:	0020      	movs	r0, r4
 8001ed2:	f7ff ff6f 	bl	8001db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed6:	0020      	movs	r0, r4
 8001ed8:	f7ff ff6e 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001edc:	e7c5      	b.n	8001e6a <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ede:	2202      	movs	r2, #2
 8001ee0:	4252      	negs	r2, r2
 8001ee2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ee4:	0020      	movs	r0, r4
 8001ee6:	f002 fc83 	bl	80047f0 <HAL_TIM_PeriodElapsedCallback>
 8001eea:	e7c7      	b.n	8001e7c <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001eec:	2281      	movs	r2, #129	; 0x81
 8001eee:	4252      	negs	r2, r2
 8001ef0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001ef2:	0020      	movs	r0, r4
 8001ef4:	f000 f877 	bl	8001fe6 <HAL_TIMEx_BreakCallback>
 8001ef8:	e7c7      	b.n	8001e8a <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001efa:	2241      	movs	r2, #65	; 0x41
 8001efc:	4252      	negs	r2, r2
 8001efe:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001f00:	0020      	movs	r0, r4
 8001f02:	f7ff ff5a 	bl	8001dba <HAL_TIM_TriggerCallback>
 8001f06:	e7c7      	b.n	8001e98 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f08:	2221      	movs	r2, #33	; 0x21
 8001f0a:	4252      	negs	r2, r2
 8001f0c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001f0e:	0020      	movs	r0, r4
 8001f10:	f000 f868 	bl	8001fe4 <HAL_TIMEx_CommutationCallback>
}
 8001f14:	e7c7      	b.n	8001ea6 <HAL_TIM_IRQHandler+0xea>
	...

08001f18 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8001f18:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f1a:	4a1f      	ldr	r2, [pc, #124]	; (8001f98 <TIM_Base_SetConfig+0x80>)
 8001f1c:	4290      	cmp	r0, r2
 8001f1e:	d032      	beq.n	8001f86 <TIM_Base_SetConfig+0x6e>
 8001f20:	2280      	movs	r2, #128	; 0x80
 8001f22:	05d2      	lsls	r2, r2, #23
 8001f24:	4290      	cmp	r0, r2
 8001f26:	d02e      	beq.n	8001f86 <TIM_Base_SetConfig+0x6e>
 8001f28:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <TIM_Base_SetConfig+0x84>)
 8001f2a:	4290      	cmp	r0, r2
 8001f2c:	d02b      	beq.n	8001f86 <TIM_Base_SetConfig+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f2e:	4a1a      	ldr	r2, [pc, #104]	; (8001f98 <TIM_Base_SetConfig+0x80>)
 8001f30:	4290      	cmp	r0, r2
 8001f32:	d00f      	beq.n	8001f54 <TIM_Base_SetConfig+0x3c>
 8001f34:	2280      	movs	r2, #128	; 0x80
 8001f36:	05d2      	lsls	r2, r2, #23
 8001f38:	4290      	cmp	r0, r2
 8001f3a:	d00b      	beq.n	8001f54 <TIM_Base_SetConfig+0x3c>
 8001f3c:	4a17      	ldr	r2, [pc, #92]	; (8001f9c <TIM_Base_SetConfig+0x84>)
 8001f3e:	4290      	cmp	r0, r2
 8001f40:	d008      	beq.n	8001f54 <TIM_Base_SetConfig+0x3c>
 8001f42:	4a17      	ldr	r2, [pc, #92]	; (8001fa0 <TIM_Base_SetConfig+0x88>)
 8001f44:	4290      	cmp	r0, r2
 8001f46:	d005      	beq.n	8001f54 <TIM_Base_SetConfig+0x3c>
 8001f48:	4a16      	ldr	r2, [pc, #88]	; (8001fa4 <TIM_Base_SetConfig+0x8c>)
 8001f4a:	4290      	cmp	r0, r2
 8001f4c:	d002      	beq.n	8001f54 <TIM_Base_SetConfig+0x3c>
 8001f4e:	4a16      	ldr	r2, [pc, #88]	; (8001fa8 <TIM_Base_SetConfig+0x90>)
 8001f50:	4290      	cmp	r0, r2
 8001f52:	d103      	bne.n	8001f5c <TIM_Base_SetConfig+0x44>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f54:	4a15      	ldr	r2, [pc, #84]	; (8001fac <TIM_Base_SetConfig+0x94>)
 8001f56:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f58:	68ca      	ldr	r2, [r1, #12]
 8001f5a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f5c:	2280      	movs	r2, #128	; 0x80
 8001f5e:	4393      	bics	r3, r2
 8001f60:	694a      	ldr	r2, [r1, #20]
 8001f62:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001f64:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f66:	688b      	ldr	r3, [r1, #8]
 8001f68:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001f6a:	680b      	ldr	r3, [r1, #0]
 8001f6c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <TIM_Base_SetConfig+0x80>)
 8001f70:	4298      	cmp	r0, r3
 8001f72:	d00d      	beq.n	8001f90 <TIM_Base_SetConfig+0x78>
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <TIM_Base_SetConfig+0x8c>)
 8001f76:	4298      	cmp	r0, r3
 8001f78:	d00a      	beq.n	8001f90 <TIM_Base_SetConfig+0x78>
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <TIM_Base_SetConfig+0x90>)
 8001f7c:	4298      	cmp	r0, r3
 8001f7e:	d007      	beq.n	8001f90 <TIM_Base_SetConfig+0x78>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001f80:	2301      	movs	r3, #1
 8001f82:	6143      	str	r3, [r0, #20]
}
 8001f84:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f86:	2270      	movs	r2, #112	; 0x70
 8001f88:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8001f8a:	684a      	ldr	r2, [r1, #4]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	e7ce      	b.n	8001f2e <TIM_Base_SetConfig+0x16>
    TIMx->RCR = Structure->RepetitionCounter;
 8001f90:	690b      	ldr	r3, [r1, #16]
 8001f92:	6303      	str	r3, [r0, #48]	; 0x30
 8001f94:	e7f4      	b.n	8001f80 <TIM_Base_SetConfig+0x68>
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	40012c00 	.word	0x40012c00
 8001f9c:	40000400 	.word	0x40000400
 8001fa0:	40002000 	.word	0x40002000
 8001fa4:	40014400 	.word	0x40014400
 8001fa8:	40014800 	.word	0x40014800
 8001fac:	fffffcff 	.word	0xfffffcff

08001fb0 <HAL_TIM_Base_Init>:
{
 8001fb0:	b570      	push	{r4, r5, r6, lr}
 8001fb2:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8001fb4:	d014      	beq.n	8001fe0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001fb6:	233d      	movs	r3, #61	; 0x3d
 8001fb8:	5cc3      	ldrb	r3, [r0, r3]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00a      	beq.n	8001fd4 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8001fbe:	253d      	movs	r5, #61	; 0x3d
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fc4:	1d21      	adds	r1, r4, #4
 8001fc6:	6820      	ldr	r0, [r4, #0]
 8001fc8:	f7ff ffa6 	bl	8001f18 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8001fd0:	2000      	movs	r0, #0
}
 8001fd2:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	333c      	adds	r3, #60	; 0x3c
 8001fd8:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8001fda:	f7ff fedf 	bl	8001d9c <HAL_TIM_Base_MspInit>
 8001fde:	e7ee      	b.n	8001fbe <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	e7f6      	b.n	8001fd2 <HAL_TIM_Base_Init+0x22>

08001fe4 <HAL_TIMEx_CommutationCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fe6:	4770      	bx	lr

08001fe8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fe8:	6802      	ldr	r2, [r0, #0]
 8001fea:	6813      	ldr	r3, [r2, #0]
 8001fec:	4906      	ldr	r1, [pc, #24]	; (8002008 <UART_EndRxTransfer+0x20>)
 8001fee:	400b      	ands	r3, r1
 8001ff0:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ff2:	6802      	ldr	r2, [r0, #0]
 8001ff4:	6893      	ldr	r3, [r2, #8]
 8001ff6:	3123      	adds	r1, #35	; 0x23
 8001ff8:	31ff      	adds	r1, #255	; 0xff
 8001ffa:	438b      	bics	r3, r1
 8001ffc:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ffe:	2220      	movs	r2, #32
 8002000:	236a      	movs	r3, #106	; 0x6a
 8002002:	54c2      	strb	r2, [r0, r3]
}
 8002004:	4770      	bx	lr
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	fffffedf 	.word	0xfffffedf

0800200c <HAL_UART_Receive_IT>:
{
 800200c:	b530      	push	{r4, r5, lr}
  if(huart->RxState == HAL_UART_STATE_READY)
 800200e:	236a      	movs	r3, #106	; 0x6a
 8002010:	5cc3      	ldrb	r3, [r0, r3]
 8002012:	2b20      	cmp	r3, #32
 8002014:	d001      	beq.n	800201a <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 8002016:	2002      	movs	r0, #2
}
 8002018:	bd30      	pop	{r4, r5, pc}
    if((pData == NULL ) || (Size == 0U))
 800201a:	2900      	cmp	r1, #0
 800201c:	d048      	beq.n	80020b0 <HAL_UART_Receive_IT+0xa4>
 800201e:	2a00      	cmp	r2, #0
 8002020:	d048      	beq.n	80020b4 <HAL_UART_Receive_IT+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002022:	6883      	ldr	r3, [r0, #8]
 8002024:	2480      	movs	r4, #128	; 0x80
 8002026:	0164      	lsls	r4, r4, #5
 8002028:	42a3      	cmp	r3, r4
 800202a:	d02b      	beq.n	8002084 <HAL_UART_Receive_IT+0x78>
    __HAL_LOCK(huart);
 800202c:	2468      	movs	r4, #104	; 0x68
 800202e:	5d04      	ldrb	r4, [r0, r4]
 8002030:	2c01      	cmp	r4, #1
 8002032:	d041      	beq.n	80020b8 <HAL_UART_Receive_IT+0xac>
 8002034:	2501      	movs	r5, #1
 8002036:	2468      	movs	r4, #104	; 0x68
 8002038:	5505      	strb	r5, [r0, r4]
    huart->pRxBuffPtr = pData;
 800203a:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 800203c:	2158      	movs	r1, #88	; 0x58
 800203e:	5242      	strh	r2, [r0, r1]
    huart->RxXferCount = Size;
 8002040:	3102      	adds	r1, #2
 8002042:	5242      	strh	r2, [r0, r1]
    UART_MASK_COMPUTATION(huart);
 8002044:	2280      	movs	r2, #128	; 0x80
 8002046:	0152      	lsls	r2, r2, #5
 8002048:	4293      	cmp	r3, r2
 800204a:	d022      	beq.n	8002092 <HAL_UART_Receive_IT+0x86>
 800204c:	2b00      	cmp	r3, #0
 800204e:	d105      	bne.n	800205c <HAL_UART_Receive_IT+0x50>
 8002050:	6903      	ldr	r3, [r0, #16]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d128      	bne.n	80020a8 <HAL_UART_Receive_IT+0x9c>
 8002056:	22ff      	movs	r2, #255	; 0xff
 8002058:	335c      	adds	r3, #92	; 0x5c
 800205a:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800205c:	2300      	movs	r3, #0
 800205e:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002060:	2122      	movs	r1, #34	; 0x22
 8002062:	226a      	movs	r2, #106	; 0x6a
 8002064:	5481      	strb	r1, [r0, r2]
    __HAL_UNLOCK(huart);
 8002066:	3a02      	subs	r2, #2
 8002068:	5483      	strb	r3, [r0, r2]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800206a:	6802      	ldr	r2, [r0, #0]
 800206c:	6893      	ldr	r3, [r2, #8]
 800206e:	3921      	subs	r1, #33	; 0x21
 8002070:	430b      	orrs	r3, r1
 8002072:	6093      	str	r3, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002074:	6802      	ldr	r2, [r0, #0]
 8002076:	6811      	ldr	r1, [r2, #0]
 8002078:	2390      	movs	r3, #144	; 0x90
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	430b      	orrs	r3, r1
 800207e:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8002080:	2000      	movs	r0, #0
 8002082:	e7c9      	b.n	8002018 <HAL_UART_Receive_IT+0xc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002084:	6904      	ldr	r4, [r0, #16]
 8002086:	2c00      	cmp	r4, #0
 8002088:	d1d0      	bne.n	800202c <HAL_UART_Receive_IT+0x20>
      if((((uint32_t)pData)&1U) != 0U)
 800208a:	07cc      	lsls	r4, r1, #31
 800208c:	d5ce      	bpl.n	800202c <HAL_UART_Receive_IT+0x20>
        return  HAL_ERROR;
 800208e:	2001      	movs	r0, #1
 8002090:	e7c2      	b.n	8002018 <HAL_UART_Receive_IT+0xc>
    UART_MASK_COMPUTATION(huart);
 8002092:	6903      	ldr	r3, [r0, #16]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d103      	bne.n	80020a0 <HAL_UART_Receive_IT+0x94>
 8002098:	4a08      	ldr	r2, [pc, #32]	; (80020bc <HAL_UART_Receive_IT+0xb0>)
 800209a:	335c      	adds	r3, #92	; 0x5c
 800209c:	52c2      	strh	r2, [r0, r3]
 800209e:	e7dd      	b.n	800205c <HAL_UART_Receive_IT+0x50>
 80020a0:	22ff      	movs	r2, #255	; 0xff
 80020a2:	235c      	movs	r3, #92	; 0x5c
 80020a4:	52c2      	strh	r2, [r0, r3]
 80020a6:	e7d9      	b.n	800205c <HAL_UART_Receive_IT+0x50>
 80020a8:	227f      	movs	r2, #127	; 0x7f
 80020aa:	235c      	movs	r3, #92	; 0x5c
 80020ac:	52c2      	strh	r2, [r0, r3]
 80020ae:	e7d5      	b.n	800205c <HAL_UART_Receive_IT+0x50>
      return HAL_ERROR;
 80020b0:	2001      	movs	r0, #1
 80020b2:	e7b1      	b.n	8002018 <HAL_UART_Receive_IT+0xc>
 80020b4:	2001      	movs	r0, #1
 80020b6:	e7af      	b.n	8002018 <HAL_UART_Receive_IT+0xc>
    __HAL_LOCK(huart);
 80020b8:	2002      	movs	r0, #2
 80020ba:	e7ad      	b.n	8002018 <HAL_UART_Receive_IT+0xc>
 80020bc:	000001ff 	.word	0x000001ff

080020c0 <HAL_UART_TxCpltCallback>:
}
 80020c0:	4770      	bx	lr

080020c2 <HAL_UART_ErrorCallback>:
}
 80020c2:	4770      	bx	lr

080020c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80020c4:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80020c6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	225a      	movs	r2, #90	; 0x5a
 80020cc:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 80020ce:	3a08      	subs	r2, #8
 80020d0:	5283      	strh	r3, [r0, r2]

  HAL_UART_ErrorCallback(huart);
 80020d2:	f7ff fff6 	bl	80020c2 <HAL_UART_ErrorCallback>
}
 80020d6:	bd10      	pop	{r4, pc}

080020d8 <UART_SetConfig>:
{
 80020d8:	b570      	push	{r4, r5, r6, lr}
 80020da:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020dc:	6883      	ldr	r3, [r0, #8]
 80020de:	6902      	ldr	r2, [r0, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	6942      	ldr	r2, [r0, #20]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	69c2      	ldr	r2, [r0, #28]
 80020e8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80020ea:	6801      	ldr	r1, [r0, #0]
 80020ec:	680a      	ldr	r2, [r1, #0]
 80020ee:	485b      	ldr	r0, [pc, #364]	; (800225c <UART_SetConfig+0x184>)
 80020f0:	4002      	ands	r2, r0
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020f6:	6822      	ldr	r2, [r4, #0]
 80020f8:	6853      	ldr	r3, [r2, #4]
 80020fa:	4959      	ldr	r1, [pc, #356]	; (8002260 <UART_SetConfig+0x188>)
 80020fc:	400b      	ands	r3, r1
 80020fe:	68e1      	ldr	r1, [r4, #12]
 8002100:	430b      	orrs	r3, r1
 8002102:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002104:	69a3      	ldr	r3, [r4, #24]
 8002106:	6a22      	ldr	r2, [r4, #32]
 8002108:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800210a:	6821      	ldr	r1, [r4, #0]
 800210c:	688a      	ldr	r2, [r1, #8]
 800210e:	4855      	ldr	r0, [pc, #340]	; (8002264 <UART_SetConfig+0x18c>)
 8002110:	4002      	ands	r2, r0
 8002112:	4313      	orrs	r3, r2
 8002114:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002116:	4b54      	ldr	r3, [pc, #336]	; (8002268 <UART_SetConfig+0x190>)
 8002118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800211a:	2303      	movs	r3, #3
 800211c:	4013      	ands	r3, r2
 800211e:	2b01      	cmp	r3, #1
 8002120:	d025      	beq.n	800216e <UART_SetConfig+0x96>
 8002122:	2b00      	cmp	r3, #0
 8002124:	d005      	beq.n	8002132 <UART_SetConfig+0x5a>
 8002126:	2b02      	cmp	r3, #2
 8002128:	d023      	beq.n	8002172 <UART_SetConfig+0x9a>
 800212a:	2b03      	cmp	r3, #3
 800212c:	d023      	beq.n	8002176 <UART_SetConfig+0x9e>
 800212e:	2310      	movs	r3, #16
 8002130:	e000      	b.n	8002134 <UART_SetConfig+0x5c>
 8002132:	2300      	movs	r3, #0
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002134:	2280      	movs	r2, #128	; 0x80
 8002136:	0212      	lsls	r2, r2, #8
 8002138:	69e1      	ldr	r1, [r4, #28]
 800213a:	4291      	cmp	r1, r2
 800213c:	d01d      	beq.n	800217a <UART_SetConfig+0xa2>
    switch (clocksource)
 800213e:	2b02      	cmp	r3, #2
 8002140:	d100      	bne.n	8002144 <UART_SetConfig+0x6c>
 8002142:	e06e      	b.n	8002222 <UART_SetConfig+0x14a>
 8002144:	d95e      	bls.n	8002204 <UART_SetConfig+0x12c>
 8002146:	2b04      	cmp	r3, #4
 8002148:	d100      	bne.n	800214c <UART_SetConfig+0x74>
 800214a:	e077      	b.n	800223c <UART_SetConfig+0x164>
 800214c:	2b08      	cmp	r3, #8
 800214e:	d000      	beq.n	8002152 <UART_SetConfig+0x7a>
 8002150:	e081      	b.n	8002256 <UART_SetConfig+0x17e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002152:	6825      	ldr	r5, [r4, #0]
 8002154:	6861      	ldr	r1, [r4, #4]
 8002156:	0848      	lsrs	r0, r1, #1
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	021b      	lsls	r3, r3, #8
 800215c:	469c      	mov	ip, r3
 800215e:	4460      	add	r0, ip
 8002160:	f7fd ffda 	bl	8000118 <__udivsi3>
 8002164:	0400      	lsls	r0, r0, #16
 8002166:	0c00      	lsrs	r0, r0, #16
 8002168:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800216a:	2000      	movs	r0, #0
        break;
 800216c:	e02f      	b.n	80021ce <UART_SetConfig+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800216e:	2304      	movs	r3, #4
 8002170:	e7e0      	b.n	8002134 <UART_SetConfig+0x5c>
 8002172:	2308      	movs	r3, #8
 8002174:	e7de      	b.n	8002134 <UART_SetConfig+0x5c>
 8002176:	2302      	movs	r3, #2
 8002178:	e7dc      	b.n	8002134 <UART_SetConfig+0x5c>
    switch (clocksource)
 800217a:	2b02      	cmp	r3, #2
 800217c:	d028      	beq.n	80021d0 <UART_SetConfig+0xf8>
 800217e:	d90f      	bls.n	80021a0 <UART_SetConfig+0xc8>
 8002180:	2b04      	cmp	r3, #4
 8002182:	d030      	beq.n	80021e6 <UART_SetConfig+0x10e>
 8002184:	2b08      	cmp	r3, #8
 8002186:	d13a      	bne.n	80021fe <UART_SetConfig+0x126>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002188:	6863      	ldr	r3, [r4, #4]
 800218a:	0858      	lsrs	r0, r3, #1
 800218c:	2380      	movs	r3, #128	; 0x80
 800218e:	025b      	lsls	r3, r3, #9
 8002190:	469c      	mov	ip, r3
 8002192:	4460      	add	r0, ip
 8002194:	6861      	ldr	r1, [r4, #4]
 8002196:	f7fd ffbf 	bl	8000118 <__udivsi3>
 800219a:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800219c:	2000      	movs	r0, #0
        break;
 800219e:	e00c      	b.n	80021ba <UART_SetConfig+0xe2>
    switch (clocksource)
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d12c      	bne.n	80021fe <UART_SetConfig+0x126>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80021a4:	f7ff fb5a 	bl	800185c <HAL_RCC_GetPCLK1Freq>
 80021a8:	0040      	lsls	r0, r0, #1
 80021aa:	6863      	ldr	r3, [r4, #4]
 80021ac:	085b      	lsrs	r3, r3, #1
 80021ae:	18c0      	adds	r0, r0, r3
 80021b0:	6861      	ldr	r1, [r4, #4]
 80021b2:	f7fd ffb1 	bl	8000118 <__udivsi3>
 80021b6:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80021b8:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80021ba:	220f      	movs	r2, #15
 80021bc:	0019      	movs	r1, r3
 80021be:	4391      	bics	r1, r2
 80021c0:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80021c2:	105b      	asrs	r3, r3, #1
 80021c4:	2107      	movs	r1, #7
 80021c6:	400b      	ands	r3, r1
 80021c8:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 80021ca:	6822      	ldr	r2, [r4, #0]
 80021cc:	60d3      	str	r3, [r2, #12]
}
 80021ce:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80021d0:	6863      	ldr	r3, [r4, #4]
 80021d2:	0858      	lsrs	r0, r3, #1
 80021d4:	4b25      	ldr	r3, [pc, #148]	; (800226c <UART_SetConfig+0x194>)
 80021d6:	469c      	mov	ip, r3
 80021d8:	4460      	add	r0, ip
 80021da:	6861      	ldr	r1, [r4, #4]
 80021dc:	f7fd ff9c 	bl	8000118 <__udivsi3>
 80021e0:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80021e2:	2000      	movs	r0, #0
        break;
 80021e4:	e7e9      	b.n	80021ba <UART_SetConfig+0xe2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80021e6:	f7ff fa53 	bl	8001690 <HAL_RCC_GetSysClockFreq>
 80021ea:	0040      	lsls	r0, r0, #1
 80021ec:	6863      	ldr	r3, [r4, #4]
 80021ee:	085b      	lsrs	r3, r3, #1
 80021f0:	18c0      	adds	r0, r0, r3
 80021f2:	6861      	ldr	r1, [r4, #4]
 80021f4:	f7fd ff90 	bl	8000118 <__udivsi3>
 80021f8:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80021fa:	2000      	movs	r0, #0
        break;
 80021fc:	e7dd      	b.n	80021ba <UART_SetConfig+0xe2>
        ret = HAL_ERROR;
 80021fe:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002200:	2300      	movs	r3, #0
 8002202:	e7da      	b.n	80021ba <UART_SetConfig+0xe2>
    switch (clocksource)
 8002204:	2b00      	cmp	r3, #0
 8002206:	d126      	bne.n	8002256 <UART_SetConfig+0x17e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002208:	6825      	ldr	r5, [r4, #0]
 800220a:	f7ff fb27 	bl	800185c <HAL_RCC_GetPCLK1Freq>
 800220e:	6861      	ldr	r1, [r4, #4]
 8002210:	084b      	lsrs	r3, r1, #1
 8002212:	18c0      	adds	r0, r0, r3
 8002214:	f7fd ff80 	bl	8000118 <__udivsi3>
 8002218:	0400      	lsls	r0, r0, #16
 800221a:	0c00      	lsrs	r0, r0, #16
 800221c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800221e:	2000      	movs	r0, #0
        break;
 8002220:	e7d5      	b.n	80021ce <UART_SetConfig+0xf6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002222:	6825      	ldr	r5, [r4, #0]
 8002224:	6861      	ldr	r1, [r4, #4]
 8002226:	0848      	lsrs	r0, r1, #1
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <UART_SetConfig+0x198>)
 800222a:	469c      	mov	ip, r3
 800222c:	4460      	add	r0, ip
 800222e:	f7fd ff73 	bl	8000118 <__udivsi3>
 8002232:	0400      	lsls	r0, r0, #16
 8002234:	0c00      	lsrs	r0, r0, #16
 8002236:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002238:	2000      	movs	r0, #0
        break;
 800223a:	e7c8      	b.n	80021ce <UART_SetConfig+0xf6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800223c:	6825      	ldr	r5, [r4, #0]
 800223e:	f7ff fa27 	bl	8001690 <HAL_RCC_GetSysClockFreq>
 8002242:	6861      	ldr	r1, [r4, #4]
 8002244:	084b      	lsrs	r3, r1, #1
 8002246:	18c0      	adds	r0, r0, r3
 8002248:	f7fd ff66 	bl	8000118 <__udivsi3>
 800224c:	0400      	lsls	r0, r0, #16
 800224e:	0c00      	lsrs	r0, r0, #16
 8002250:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002252:	2000      	movs	r0, #0
        break;
 8002254:	e7bb      	b.n	80021ce <UART_SetConfig+0xf6>
        ret = HAL_ERROR;
 8002256:	2001      	movs	r0, #1
 8002258:	e7b9      	b.n	80021ce <UART_SetConfig+0xf6>
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	ffff69f3 	.word	0xffff69f3
 8002260:	ffffcfff 	.word	0xffffcfff
 8002264:	fffff4ff 	.word	0xfffff4ff
 8002268:	40021000 	.word	0x40021000
 800226c:	00f42400 	.word	0x00f42400
 8002270:	007a1200 	.word	0x007a1200

08002274 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002274:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002276:	07db      	lsls	r3, r3, #31
 8002278:	d506      	bpl.n	8002288 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800227a:	6802      	ldr	r2, [r0, #0]
 800227c:	6853      	ldr	r3, [r2, #4]
 800227e:	492c      	ldr	r1, [pc, #176]	; (8002330 <UART_AdvFeatureConfig+0xbc>)
 8002280:	400b      	ands	r3, r1
 8002282:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002284:	430b      	orrs	r3, r1
 8002286:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002288:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800228a:	079b      	lsls	r3, r3, #30
 800228c:	d506      	bpl.n	800229c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800228e:	6802      	ldr	r2, [r0, #0]
 8002290:	6853      	ldr	r3, [r2, #4]
 8002292:	4928      	ldr	r1, [pc, #160]	; (8002334 <UART_AdvFeatureConfig+0xc0>)
 8002294:	400b      	ands	r3, r1
 8002296:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002298:	430b      	orrs	r3, r1
 800229a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800229c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800229e:	075b      	lsls	r3, r3, #29
 80022a0:	d506      	bpl.n	80022b0 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80022a2:	6802      	ldr	r2, [r0, #0]
 80022a4:	6853      	ldr	r3, [r2, #4]
 80022a6:	4924      	ldr	r1, [pc, #144]	; (8002338 <UART_AdvFeatureConfig+0xc4>)
 80022a8:	400b      	ands	r3, r1
 80022aa:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80022ac:	430b      	orrs	r3, r1
 80022ae:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80022b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80022b2:	071b      	lsls	r3, r3, #28
 80022b4:	d506      	bpl.n	80022c4 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80022b6:	6802      	ldr	r2, [r0, #0]
 80022b8:	6853      	ldr	r3, [r2, #4]
 80022ba:	4920      	ldr	r1, [pc, #128]	; (800233c <UART_AdvFeatureConfig+0xc8>)
 80022bc:	400b      	ands	r3, r1
 80022be:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80022c0:	430b      	orrs	r3, r1
 80022c2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80022c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80022c6:	06db      	lsls	r3, r3, #27
 80022c8:	d506      	bpl.n	80022d8 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80022ca:	6802      	ldr	r2, [r0, #0]
 80022cc:	6893      	ldr	r3, [r2, #8]
 80022ce:	491c      	ldr	r1, [pc, #112]	; (8002340 <UART_AdvFeatureConfig+0xcc>)
 80022d0:	400b      	ands	r3, r1
 80022d2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80022d4:	430b      	orrs	r3, r1
 80022d6:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80022d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80022da:	069b      	lsls	r3, r3, #26
 80022dc:	d506      	bpl.n	80022ec <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80022de:	6802      	ldr	r2, [r0, #0]
 80022e0:	6893      	ldr	r3, [r2, #8]
 80022e2:	4918      	ldr	r1, [pc, #96]	; (8002344 <UART_AdvFeatureConfig+0xd0>)
 80022e4:	400b      	ands	r3, r1
 80022e6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80022e8:	430b      	orrs	r3, r1
 80022ea:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80022ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80022ee:	065b      	lsls	r3, r3, #25
 80022f0:	d50b      	bpl.n	800230a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80022f2:	6802      	ldr	r2, [r0, #0]
 80022f4:	6853      	ldr	r3, [r2, #4]
 80022f6:	4914      	ldr	r1, [pc, #80]	; (8002348 <UART_AdvFeatureConfig+0xd4>)
 80022f8:	400b      	ands	r3, r1
 80022fa:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80022fc:	430b      	orrs	r3, r1
 80022fe:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	035b      	lsls	r3, r3, #13
 8002304:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002306:	429a      	cmp	r2, r3
 8002308:	d00a      	beq.n	8002320 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800230a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800230c:	061b      	lsls	r3, r3, #24
 800230e:	d506      	bpl.n	800231e <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002310:	6802      	ldr	r2, [r0, #0]
 8002312:	6853      	ldr	r3, [r2, #4]
 8002314:	490d      	ldr	r1, [pc, #52]	; (800234c <UART_AdvFeatureConfig+0xd8>)
 8002316:	400b      	ands	r3, r1
 8002318:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800231a:	430b      	orrs	r3, r1
 800231c:	6053      	str	r3, [r2, #4]
}
 800231e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002320:	6802      	ldr	r2, [r0, #0]
 8002322:	6853      	ldr	r3, [r2, #4]
 8002324:	490a      	ldr	r1, [pc, #40]	; (8002350 <UART_AdvFeatureConfig+0xdc>)
 8002326:	400b      	ands	r3, r1
 8002328:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800232a:	430b      	orrs	r3, r1
 800232c:	6053      	str	r3, [r2, #4]
 800232e:	e7ec      	b.n	800230a <UART_AdvFeatureConfig+0x96>
 8002330:	fffdffff 	.word	0xfffdffff
 8002334:	fffeffff 	.word	0xfffeffff
 8002338:	fffbffff 	.word	0xfffbffff
 800233c:	ffff7fff 	.word	0xffff7fff
 8002340:	ffffefff 	.word	0xffffefff
 8002344:	ffffdfff 	.word	0xffffdfff
 8002348:	ffefffff 	.word	0xffefffff
 800234c:	fff7ffff 	.word	0xfff7ffff
 8002350:	ff9fffff 	.word	0xff9fffff

08002354 <UART_WaitOnFlagUntilTimeout>:
{
 8002354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002356:	46c6      	mov	lr, r8
 8002358:	b500      	push	{lr}
 800235a:	0005      	movs	r5, r0
 800235c:	000f      	movs	r7, r1
 800235e:	0016      	movs	r6, r2
 8002360:	4698      	mov	r8, r3
 8002362:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002364:	682b      	ldr	r3, [r5, #0]
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	003a      	movs	r2, r7
 800236a:	439a      	bics	r2, r3
 800236c:	0013      	movs	r3, r2
 800236e:	425a      	negs	r2, r3
 8002370:	4153      	adcs	r3, r2
 8002372:	42b3      	cmp	r3, r6
 8002374:	d11e      	bne.n	80023b4 <UART_WaitOnFlagUntilTimeout+0x60>
    if(Timeout != HAL_MAX_DELAY)
 8002376:	1c63      	adds	r3, r4, #1
 8002378:	d0f4      	beq.n	8002364 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800237a:	2c00      	cmp	r4, #0
 800237c:	d005      	beq.n	800238a <UART_WaitOnFlagUntilTimeout+0x36>
 800237e:	f7fe f859 	bl	8000434 <HAL_GetTick>
 8002382:	4643      	mov	r3, r8
 8002384:	1ac0      	subs	r0, r0, r3
 8002386:	4284      	cmp	r4, r0
 8002388:	d2ec      	bcs.n	8002364 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800238a:	682a      	ldr	r2, [r5, #0]
 800238c:	6813      	ldr	r3, [r2, #0]
 800238e:	490b      	ldr	r1, [pc, #44]	; (80023bc <UART_WaitOnFlagUntilTimeout+0x68>)
 8002390:	400b      	ands	r3, r1
 8002392:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002394:	682a      	ldr	r2, [r5, #0]
 8002396:	6893      	ldr	r3, [r2, #8]
 8002398:	31a3      	adds	r1, #163	; 0xa3
 800239a:	31ff      	adds	r1, #255	; 0xff
 800239c:	438b      	bics	r3, r1
 800239e:	6093      	str	r3, [r2, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80023a0:	2320      	movs	r3, #32
 80023a2:	2269      	movs	r2, #105	; 0x69
 80023a4:	54ab      	strb	r3, [r5, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80023a6:	3201      	adds	r2, #1
 80023a8:	54ab      	strb	r3, [r5, r2]
        __HAL_UNLOCK(huart);
 80023aa:	2200      	movs	r2, #0
 80023ac:	3348      	adds	r3, #72	; 0x48
 80023ae:	54ea      	strb	r2, [r5, r3]
        return HAL_TIMEOUT;
 80023b0:	2003      	movs	r0, #3
 80023b2:	e000      	b.n	80023b6 <UART_WaitOnFlagUntilTimeout+0x62>
  return HAL_OK;
 80023b4:	2000      	movs	r0, #0
}
 80023b6:	bc04      	pop	{r2}
 80023b8:	4690      	mov	r8, r2
 80023ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023bc:	fffffe5f 	.word	0xfffffe5f

080023c0 <HAL_UART_Transmit>:
{
 80023c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023c2:	b085      	sub	sp, #20
 80023c4:	0004      	movs	r4, r0
 80023c6:	000f      	movs	r7, r1
 80023c8:	0016      	movs	r6, r2
 80023ca:	001d      	movs	r5, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80023cc:	2369      	movs	r3, #105	; 0x69
 80023ce:	5cc3      	ldrb	r3, [r0, r3]
 80023d0:	2b20      	cmp	r3, #32
 80023d2:	d002      	beq.n	80023da <HAL_UART_Transmit+0x1a>
    return HAL_BUSY;
 80023d4:	2002      	movs	r0, #2
}
 80023d6:	b005      	add	sp, #20
 80023d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((pData == NULL ) || (Size == 0U))
 80023da:	2900      	cmp	r1, #0
 80023dc:	d05b      	beq.n	8002496 <HAL_UART_Transmit+0xd6>
 80023de:	2a00      	cmp	r2, #0
 80023e0:	d05b      	beq.n	800249a <HAL_UART_Transmit+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023e2:	2380      	movs	r3, #128	; 0x80
 80023e4:	015b      	lsls	r3, r3, #5
 80023e6:	6882      	ldr	r2, [r0, #8]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d005      	beq.n	80023f8 <HAL_UART_Transmit+0x38>
    __HAL_LOCK(huart);
 80023ec:	2368      	movs	r3, #104	; 0x68
 80023ee:	5ce3      	ldrb	r3, [r4, r3]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d108      	bne.n	8002406 <HAL_UART_Transmit+0x46>
 80023f4:	2002      	movs	r0, #2
 80023f6:	e7ee      	b.n	80023d6 <HAL_UART_Transmit+0x16>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023f8:	6903      	ldr	r3, [r0, #16]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f6      	bne.n	80023ec <HAL_UART_Transmit+0x2c>
      if((((uint32_t)pData)&1U) != 0U)
 80023fe:	07cb      	lsls	r3, r1, #31
 8002400:	d5f4      	bpl.n	80023ec <HAL_UART_Transmit+0x2c>
        return  HAL_ERROR;
 8002402:	2001      	movs	r0, #1
 8002404:	e7e7      	b.n	80023d6 <HAL_UART_Transmit+0x16>
    __HAL_LOCK(huart);
 8002406:	2201      	movs	r2, #1
 8002408:	2368      	movs	r3, #104	; 0x68
 800240a:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800240c:	2300      	movs	r3, #0
 800240e:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002410:	3220      	adds	r2, #32
 8002412:	3369      	adds	r3, #105	; 0x69
 8002414:	54e2      	strb	r2, [r4, r3]
    tickstart = HAL_GetTick();
 8002416:	f7fe f80d 	bl	8000434 <HAL_GetTick>
 800241a:	9003      	str	r0, [sp, #12]
    huart->TxXferSize = Size;
 800241c:	2350      	movs	r3, #80	; 0x50
 800241e:	52e6      	strh	r6, [r4, r3]
    huart->TxXferCount = Size;
 8002420:	3302      	adds	r3, #2
 8002422:	52e6      	strh	r6, [r4, r3]
    while(huart->TxXferCount > 0)
 8002424:	e003      	b.n	800242e <HAL_UART_Transmit+0x6e>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002426:	783b      	ldrb	r3, [r7, #0]
 8002428:	6822      	ldr	r2, [r4, #0]
 800242a:	8513      	strh	r3, [r2, #40]	; 0x28
 800242c:	3701      	adds	r7, #1
    while(huart->TxXferCount > 0)
 800242e:	2352      	movs	r3, #82	; 0x52
 8002430:	5ae3      	ldrh	r3, [r4, r3]
 8002432:	b29b      	uxth	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01c      	beq.n	8002472 <HAL_UART_Transmit+0xb2>
      huart->TxXferCount--;
 8002438:	2252      	movs	r2, #82	; 0x52
 800243a:	5aa3      	ldrh	r3, [r4, r2]
 800243c:	3b01      	subs	r3, #1
 800243e:	b29b      	uxth	r3, r3
 8002440:	52a3      	strh	r3, [r4, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002442:	9500      	str	r5, [sp, #0]
 8002444:	9b03      	ldr	r3, [sp, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	2180      	movs	r1, #128	; 0x80
 800244a:	0020      	movs	r0, r4
 800244c:	f7ff ff82 	bl	8002354 <UART_WaitOnFlagUntilTimeout>
 8002450:	2800      	cmp	r0, #0
 8002452:	d124      	bne.n	800249e <HAL_UART_Transmit+0xde>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	015b      	lsls	r3, r3, #5
 8002458:	68a2      	ldr	r2, [r4, #8]
 800245a:	429a      	cmp	r2, r3
 800245c:	d1e3      	bne.n	8002426 <HAL_UART_Transmit+0x66>
 800245e:	6923      	ldr	r3, [r4, #16]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1e0      	bne.n	8002426 <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002464:	883b      	ldrh	r3, [r7, #0]
 8002466:	05db      	lsls	r3, r3, #23
 8002468:	0ddb      	lsrs	r3, r3, #23
 800246a:	6822      	ldr	r2, [r4, #0]
 800246c:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 800246e:	3702      	adds	r7, #2
 8002470:	e7dd      	b.n	800242e <HAL_UART_Transmit+0x6e>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002472:	9500      	str	r5, [sp, #0]
 8002474:	9b03      	ldr	r3, [sp, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	2140      	movs	r1, #64	; 0x40
 800247a:	0020      	movs	r0, r4
 800247c:	f7ff ff6a 	bl	8002354 <UART_WaitOnFlagUntilTimeout>
 8002480:	2800      	cmp	r0, #0
 8002482:	d001      	beq.n	8002488 <HAL_UART_Transmit+0xc8>
      return HAL_TIMEOUT;
 8002484:	2003      	movs	r0, #3
 8002486:	e7a6      	b.n	80023d6 <HAL_UART_Transmit+0x16>
    huart->gState = HAL_UART_STATE_READY;
 8002488:	2220      	movs	r2, #32
 800248a:	2369      	movs	r3, #105	; 0x69
 800248c:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 800248e:	2200      	movs	r2, #0
 8002490:	3b01      	subs	r3, #1
 8002492:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8002494:	e79f      	b.n	80023d6 <HAL_UART_Transmit+0x16>
      return  HAL_ERROR;
 8002496:	2001      	movs	r0, #1
 8002498:	e79d      	b.n	80023d6 <HAL_UART_Transmit+0x16>
 800249a:	2001      	movs	r0, #1
 800249c:	e79b      	b.n	80023d6 <HAL_UART_Transmit+0x16>
        return HAL_TIMEOUT;
 800249e:	2003      	movs	r0, #3
 80024a0:	e799      	b.n	80023d6 <HAL_UART_Transmit+0x16>
	...

080024a4 <UART_CheckIdleState>:
{
 80024a4:	b530      	push	{r4, r5, lr}
 80024a6:	b083      	sub	sp, #12
 80024a8:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80024ae:	f7fd ffc1 	bl	8000434 <HAL_GetTick>
 80024b2:	0005      	movs	r5, r0
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 80024b4:	6823      	ldr	r3, [r4, #0]
 80024b6:	4a17      	ldr	r2, [pc, #92]	; (8002514 <UART_CheckIdleState+0x70>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d00a      	beq.n	80024d2 <UART_CheckIdleState+0x2e>
  huart->gState  = HAL_UART_STATE_READY;
 80024bc:	2320      	movs	r3, #32
 80024be:	2269      	movs	r2, #105	; 0x69
 80024c0:	54a3      	strb	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80024c2:	3201      	adds	r2, #1
 80024c4:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(huart);
 80024c6:	2200      	movs	r2, #0
 80024c8:	3348      	adds	r3, #72	; 0x48
 80024ca:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80024cc:	2000      	movs	r0, #0
}
 80024ce:	b003      	add	sp, #12
 80024d0:	bd30      	pop	{r4, r5, pc}
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	071b      	lsls	r3, r3, #28
 80024d6:	d410      	bmi.n	80024fa <UART_CheckIdleState+0x56>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80024d8:	6823      	ldr	r3, [r4, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	075b      	lsls	r3, r3, #29
 80024de:	d5ed      	bpl.n	80024bc <UART_CheckIdleState+0x18>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024e0:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <UART_CheckIdleState+0x74>)
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	002b      	movs	r3, r5
 80024e6:	2200      	movs	r2, #0
 80024e8:	2180      	movs	r1, #128	; 0x80
 80024ea:	03c9      	lsls	r1, r1, #15
 80024ec:	0020      	movs	r0, r4
 80024ee:	f7ff ff31 	bl	8002354 <UART_WaitOnFlagUntilTimeout>
 80024f2:	2800      	cmp	r0, #0
 80024f4:	d0e2      	beq.n	80024bc <UART_CheckIdleState+0x18>
        return HAL_TIMEOUT;
 80024f6:	2003      	movs	r0, #3
 80024f8:	e7e9      	b.n	80024ce <UART_CheckIdleState+0x2a>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024fa:	4b07      	ldr	r3, [pc, #28]	; (8002518 <UART_CheckIdleState+0x74>)
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	0003      	movs	r3, r0
 8002500:	2200      	movs	r2, #0
 8002502:	2180      	movs	r1, #128	; 0x80
 8002504:	0389      	lsls	r1, r1, #14
 8002506:	0020      	movs	r0, r4
 8002508:	f7ff ff24 	bl	8002354 <UART_WaitOnFlagUntilTimeout>
 800250c:	2800      	cmp	r0, #0
 800250e:	d0e3      	beq.n	80024d8 <UART_CheckIdleState+0x34>
        return HAL_TIMEOUT;
 8002510:	2003      	movs	r0, #3
 8002512:	e7dc      	b.n	80024ce <UART_CheckIdleState+0x2a>
 8002514:	40013800 	.word	0x40013800
 8002518:	01ffffff 	.word	0x01ffffff

0800251c <HAL_UART_Init>:
{
 800251c:	b510      	push	{r4, lr}
 800251e:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8002520:	d030      	beq.n	8002584 <HAL_UART_Init+0x68>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002522:	2369      	movs	r3, #105	; 0x69
 8002524:	5cc3      	ldrb	r3, [r0, r3]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d022      	beq.n	8002570 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 800252a:	2224      	movs	r2, #36	; 0x24
 800252c:	2369      	movs	r3, #105	; 0x69
 800252e:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8002530:	6822      	ldr	r2, [r4, #0]
 8002532:	6813      	ldr	r3, [r2, #0]
 8002534:	2101      	movs	r1, #1
 8002536:	438b      	bics	r3, r1
 8002538:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800253a:	0020      	movs	r0, r4
 800253c:	f7ff fdcc 	bl	80020d8 <UART_SetConfig>
 8002540:	2801      	cmp	r0, #1
 8002542:	d014      	beq.n	800256e <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002544:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002546:	2b00      	cmp	r3, #0
 8002548:	d118      	bne.n	800257c <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800254a:	6822      	ldr	r2, [r4, #0]
 800254c:	6853      	ldr	r3, [r2, #4]
 800254e:	490e      	ldr	r1, [pc, #56]	; (8002588 <HAL_UART_Init+0x6c>)
 8002550:	400b      	ands	r3, r1
 8002552:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002554:	6822      	ldr	r2, [r4, #0]
 8002556:	6893      	ldr	r3, [r2, #8]
 8002558:	212a      	movs	r1, #42	; 0x2a
 800255a:	438b      	bics	r3, r1
 800255c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800255e:	6822      	ldr	r2, [r4, #0]
 8002560:	6813      	ldr	r3, [r2, #0]
 8002562:	3929      	subs	r1, #41	; 0x29
 8002564:	430b      	orrs	r3, r1
 8002566:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002568:	0020      	movs	r0, r4
 800256a:	f7ff ff9b 	bl	80024a4 <UART_CheckIdleState>
}
 800256e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002570:	2200      	movs	r2, #0
 8002572:	3368      	adds	r3, #104	; 0x68
 8002574:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8002576:	f002 fe73 	bl	8005260 <HAL_UART_MspInit>
 800257a:	e7d6      	b.n	800252a <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 800257c:	0020      	movs	r0, r4
 800257e:	f7ff fe79 	bl	8002274 <UART_AdvFeatureConfig>
 8002582:	e7e2      	b.n	800254a <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8002584:	2001      	movs	r0, #1
 8002586:	e7f2      	b.n	800256e <HAL_UART_Init+0x52>
 8002588:	ffffb7ff 	.word	0xffffb7ff

0800258c <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800258c:	2369      	movs	r3, #105	; 0x69
 800258e:	5cc3      	ldrb	r3, [r0, r3]
 8002590:	2b21      	cmp	r3, #33	; 0x21
 8002592:	d001      	beq.n	8002598 <UART_Transmit_IT+0xc>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8002594:	2002      	movs	r0, #2
  }
}
 8002596:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 8002598:	3331      	adds	r3, #49	; 0x31
 800259a:	5ac3      	ldrh	r3, [r0, r3]
 800259c:	b29b      	uxth	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d011      	beq.n	80025c6 <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	015b      	lsls	r3, r3, #5
 80025a6:	6882      	ldr	r2, [r0, #8]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d018      	beq.n	80025de <UART_Transmit_IT+0x52>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80025ac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	64c2      	str	r2, [r0, #76]	; 0x4c
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	6802      	ldr	r2, [r0, #0]
 80025b6:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80025b8:	2252      	movs	r2, #82	; 0x52
 80025ba:	5a83      	ldrh	r3, [r0, r2]
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29b      	uxth	r3, r3
 80025c0:	5283      	strh	r3, [r0, r2]
      return HAL_OK;
 80025c2:	2000      	movs	r0, #0
 80025c4:	e7e7      	b.n	8002596 <UART_Transmit_IT+0xa>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80025c6:	6802      	ldr	r2, [r0, #0]
 80025c8:	6813      	ldr	r3, [r2, #0]
 80025ca:	2180      	movs	r1, #128	; 0x80
 80025cc:	438b      	bics	r3, r1
 80025ce:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80025d0:	6802      	ldr	r2, [r0, #0]
 80025d2:	6813      	ldr	r3, [r2, #0]
 80025d4:	3940      	subs	r1, #64	; 0x40
 80025d6:	430b      	orrs	r3, r1
 80025d8:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 80025da:	2000      	movs	r0, #0
 80025dc:	e7db      	b.n	8002596 <UART_Transmit_IT+0xa>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025de:	6903      	ldr	r3, [r0, #16]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1e3      	bne.n	80025ac <UART_Transmit_IT+0x20>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80025e4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	05db      	lsls	r3, r3, #23
 80025ea:	0ddb      	lsrs	r3, r3, #23
 80025ec:	6802      	ldr	r2, [r0, #0]
 80025ee:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80025f0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80025f2:	3302      	adds	r3, #2
 80025f4:	64c3      	str	r3, [r0, #76]	; 0x4c
 80025f6:	e7df      	b.n	80025b8 <UART_Transmit_IT+0x2c>

080025f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80025f8:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80025fa:	6802      	ldr	r2, [r0, #0]
 80025fc:	6813      	ldr	r3, [r2, #0]
 80025fe:	2140      	movs	r1, #64	; 0x40
 8002600:	438b      	bics	r3, r1
 8002602:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002604:	2220      	movs	r2, #32
 8002606:	2369      	movs	r3, #105	; 0x69
 8002608:	54c2      	strb	r2, [r0, r3]

  HAL_UART_TxCpltCallback(huart);
 800260a:	f7ff fd59 	bl	80020c0 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 800260e:	2000      	movs	r0, #0
 8002610:	bd10      	pop	{r4, pc}
	...

08002614 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002614:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8002616:	235c      	movs	r3, #92	; 0x5c
 8002618:	5ac2      	ldrh	r2, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800261a:	330e      	adds	r3, #14
 800261c:	5cc3      	ldrb	r3, [r0, r3]
 800261e:	2b22      	cmp	r3, #34	; 0x22
 8002620:	d006      	beq.n	8002630 <UART_Receive_IT+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002622:	6802      	ldr	r2, [r0, #0]
 8002624:	6993      	ldr	r3, [r2, #24]
 8002626:	2108      	movs	r1, #8
 8002628:	430b      	orrs	r3, r1
 800262a:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 800262c:	2002      	movs	r0, #2
  }
}
 800262e:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002630:	6803      	ldr	r3, [r0, #0]
 8002632:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002634:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002636:	2180      	movs	r1, #128	; 0x80
 8002638:	0149      	lsls	r1, r1, #5
 800263a:	6884      	ldr	r4, [r0, #8]
 800263c:	428c      	cmp	r4, r1
 800263e:	d00e      	beq.n	800265e <UART_Receive_IT+0x4a>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002640:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8002642:	1c4c      	adds	r4, r1, #1
 8002644:	6544      	str	r4, [r0, #84]	; 0x54
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	401a      	ands	r2, r3
 800264a:	700a      	strb	r2, [r1, #0]
    if(--huart->RxXferCount == 0U)
 800264c:	225a      	movs	r2, #90	; 0x5a
 800264e:	5a83      	ldrh	r3, [r0, r2]
 8002650:	3b01      	subs	r3, #1
 8002652:	b29b      	uxth	r3, r3
 8002654:	5283      	strh	r3, [r0, r2]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00b      	beq.n	8002672 <UART_Receive_IT+0x5e>
    return HAL_OK;
 800265a:	2000      	movs	r0, #0
 800265c:	e7e7      	b.n	800262e <UART_Receive_IT+0x1a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800265e:	6901      	ldr	r1, [r0, #16]
 8002660:	2900      	cmp	r1, #0
 8002662:	d1ed      	bne.n	8002640 <UART_Receive_IT+0x2c>
      *tmp = (uint16_t)(uhdata & uhMask);
 8002664:	401a      	ands	r2, r3
 8002666:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002668:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 800266a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800266c:	3302      	adds	r3, #2
 800266e:	6543      	str	r3, [r0, #84]	; 0x54
 8002670:	e7ec      	b.n	800264c <UART_Receive_IT+0x38>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002672:	6802      	ldr	r2, [r0, #0]
 8002674:	6813      	ldr	r3, [r2, #0]
 8002676:	4908      	ldr	r1, [pc, #32]	; (8002698 <UART_Receive_IT+0x84>)
 8002678:	400b      	ands	r3, r1
 800267a:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800267c:	6802      	ldr	r2, [r0, #0]
 800267e:	6893      	ldr	r3, [r2, #8]
 8002680:	3123      	adds	r1, #35	; 0x23
 8002682:	31ff      	adds	r1, #255	; 0xff
 8002684:	438b      	bics	r3, r1
 8002686:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002688:	2220      	movs	r2, #32
 800268a:	236a      	movs	r3, #106	; 0x6a
 800268c:	54c2      	strb	r2, [r0, r3]
      HAL_UART_RxCpltCallback(huart);
 800268e:	f001 fe4b 	bl	8004328 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002692:	2000      	movs	r0, #0
 8002694:	e7cb      	b.n	800262e <UART_Receive_IT+0x1a>
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	fffffedf 	.word	0xfffffedf

0800269c <HAL_UART_IRQHandler>:
{
 800269c:	b570      	push	{r4, r5, r6, lr}
 800269e:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80026a0:	6801      	ldr	r1, [r0, #0]
 80026a2:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026a4:	6808      	ldr	r0, [r1, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80026a6:	220f      	movs	r2, #15
 80026a8:	401a      	ands	r2, r3
  if (errorflags == RESET)
 80026aa:	d103      	bne.n	80026b4 <HAL_UART_IRQHandler+0x18>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026ac:	069d      	lsls	r5, r3, #26
 80026ae:	d501      	bpl.n	80026b4 <HAL_UART_IRQHandler+0x18>
 80026b0:	0685      	lsls	r5, r0, #26
 80026b2:	d45b      	bmi.n	800276c <HAL_UART_IRQHandler+0xd0>
  cr3its = READ_REG(huart->Instance->CR3);
 80026b4:	688d      	ldr	r5, [r1, #8]
  if(   (errorflags != RESET)
 80026b6:	2a00      	cmp	r2, #0
 80026b8:	d06e      	beq.n	8002798 <HAL_UART_IRQHandler+0xfc>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80026ba:	2201      	movs	r2, #1
 80026bc:	402a      	ands	r2, r5
 80026be:	d103      	bne.n	80026c8 <HAL_UART_IRQHandler+0x2c>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80026c0:	2690      	movs	r6, #144	; 0x90
 80026c2:	0076      	lsls	r6, r6, #1
 80026c4:	4230      	tst	r0, r6
 80026c6:	d067      	beq.n	8002798 <HAL_UART_IRQHandler+0xfc>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026c8:	07dd      	lsls	r5, r3, #31
 80026ca:	d506      	bpl.n	80026da <HAL_UART_IRQHandler+0x3e>
 80026cc:	05c5      	lsls	r5, r0, #23
 80026ce:	d504      	bpl.n	80026da <HAL_UART_IRQHandler+0x3e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80026d0:	2501      	movs	r5, #1
 80026d2:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026d4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80026d6:	4329      	orrs	r1, r5
 80026d8:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026da:	0799      	lsls	r1, r3, #30
 80026dc:	d508      	bpl.n	80026f0 <HAL_UART_IRQHandler+0x54>
 80026de:	2a00      	cmp	r2, #0
 80026e0:	d006      	beq.n	80026f0 <HAL_UART_IRQHandler+0x54>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80026e2:	6821      	ldr	r1, [r4, #0]
 80026e4:	2502      	movs	r5, #2
 80026e6:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026e8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80026ea:	3502      	adds	r5, #2
 80026ec:	4329      	orrs	r1, r5
 80026ee:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026f0:	0759      	lsls	r1, r3, #29
 80026f2:	d508      	bpl.n	8002706 <HAL_UART_IRQHandler+0x6a>
 80026f4:	2a00      	cmp	r2, #0
 80026f6:	d006      	beq.n	8002706 <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80026f8:	6821      	ldr	r1, [r4, #0]
 80026fa:	2504      	movs	r5, #4
 80026fc:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026fe:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002700:	3d02      	subs	r5, #2
 8002702:	4329      	orrs	r1, r5
 8002704:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002706:	0719      	lsls	r1, r3, #28
 8002708:	d509      	bpl.n	800271e <HAL_UART_IRQHandler+0x82>
 800270a:	0681      	lsls	r1, r0, #26
 800270c:	d401      	bmi.n	8002712 <HAL_UART_IRQHandler+0x76>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800270e:	2a00      	cmp	r2, #0
 8002710:	d005      	beq.n	800271e <HAL_UART_IRQHandler+0x82>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002712:	6822      	ldr	r2, [r4, #0]
 8002714:	2108      	movs	r1, #8
 8002716:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002718:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800271a:	430a      	orrs	r2, r1
 800271c:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800271e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002720:	2a00      	cmp	r2, #0
 8002722:	d045      	beq.n	80027b0 <HAL_UART_IRQHandler+0x114>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002724:	069b      	lsls	r3, r3, #26
 8002726:	d501      	bpl.n	800272c <HAL_UART_IRQHandler+0x90>
 8002728:	0683      	lsls	r3, r0, #26
 800272a:	d423      	bmi.n	8002774 <HAL_UART_IRQHandler+0xd8>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800272c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800272e:	071b      	lsls	r3, r3, #28
 8002730:	d403      	bmi.n	800273a <HAL_UART_IRQHandler+0x9e>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002732:	6823      	ldr	r3, [r4, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002736:	065b      	lsls	r3, r3, #25
 8002738:	d528      	bpl.n	800278c <HAL_UART_IRQHandler+0xf0>
        UART_EndRxTransfer(huart);
 800273a:	0020      	movs	r0, r4
 800273c:	f7ff fc54 	bl	8001fe8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002740:	6823      	ldr	r3, [r4, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	0652      	lsls	r2, r2, #25
 8002746:	d51d      	bpl.n	8002784 <HAL_UART_IRQHandler+0xe8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	2140      	movs	r1, #64	; 0x40
 800274c:	438a      	bics	r2, r1
 800274e:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002750:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002752:	2b00      	cmp	r3, #0
 8002754:	d012      	beq.n	800277c <HAL_UART_IRQHandler+0xe0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002756:	4a21      	ldr	r2, [pc, #132]	; (80027dc <HAL_UART_IRQHandler+0x140>)
 8002758:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800275a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800275c:	f7fe faf3 	bl	8000d46 <HAL_DMA_Abort_IT>
 8002760:	2800      	cmp	r0, #0
 8002762:	d025      	beq.n	80027b0 <HAL_UART_IRQHandler+0x114>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002764:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002766:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002768:	4798      	blx	r3
 800276a:	e021      	b.n	80027b0 <HAL_UART_IRQHandler+0x114>
      UART_Receive_IT(huart);
 800276c:	0020      	movs	r0, r4
 800276e:	f7ff ff51 	bl	8002614 <UART_Receive_IT>
      return;
 8002772:	e01d      	b.n	80027b0 <HAL_UART_IRQHandler+0x114>
        UART_Receive_IT(huart);
 8002774:	0020      	movs	r0, r4
 8002776:	f7ff ff4d 	bl	8002614 <UART_Receive_IT>
 800277a:	e7d7      	b.n	800272c <HAL_UART_IRQHandler+0x90>
            HAL_UART_ErrorCallback(huart);
 800277c:	0020      	movs	r0, r4
 800277e:	f7ff fca0 	bl	80020c2 <HAL_UART_ErrorCallback>
 8002782:	e015      	b.n	80027b0 <HAL_UART_IRQHandler+0x114>
          HAL_UART_ErrorCallback(huart);
 8002784:	0020      	movs	r0, r4
 8002786:	f7ff fc9c 	bl	80020c2 <HAL_UART_ErrorCallback>
 800278a:	e011      	b.n	80027b0 <HAL_UART_IRQHandler+0x114>
        HAL_UART_ErrorCallback(huart);
 800278c:	0020      	movs	r0, r4
 800278e:	f7ff fc98 	bl	80020c2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002792:	2300      	movs	r3, #0
 8002794:	66e3      	str	r3, [r4, #108]	; 0x6c
 8002796:	e00b      	b.n	80027b0 <HAL_UART_IRQHandler+0x114>
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8002798:	02da      	lsls	r2, r3, #11
 800279a:	d501      	bpl.n	80027a0 <HAL_UART_IRQHandler+0x104>
 800279c:	026a      	lsls	r2, r5, #9
 800279e:	d408      	bmi.n	80027b2 <HAL_UART_IRQHandler+0x116>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027a0:	061a      	lsls	r2, r3, #24
 80027a2:	d501      	bpl.n	80027a8 <HAL_UART_IRQHandler+0x10c>
 80027a4:	0602      	lsls	r2, r0, #24
 80027a6:	d410      	bmi.n	80027ca <HAL_UART_IRQHandler+0x12e>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027a8:	065b      	lsls	r3, r3, #25
 80027aa:	d501      	bpl.n	80027b0 <HAL_UART_IRQHandler+0x114>
 80027ac:	0643      	lsls	r3, r0, #25
 80027ae:	d410      	bmi.n	80027d2 <HAL_UART_IRQHandler+0x136>
}
 80027b0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80027b2:	2380      	movs	r3, #128	; 0x80
 80027b4:	035b      	lsls	r3, r3, #13
 80027b6:	620b      	str	r3, [r1, #32]
    huart->gState  = HAL_UART_STATE_READY;
 80027b8:	2320      	movs	r3, #32
 80027ba:	2269      	movs	r2, #105	; 0x69
 80027bc:	54a3      	strb	r3, [r4, r2]
    huart->RxState = HAL_UART_STATE_READY;
 80027be:	3201      	adds	r2, #1
 80027c0:	54a3      	strb	r3, [r4, r2]
    HAL_UARTEx_WakeupCallback(huart);
 80027c2:	0020      	movs	r0, r4
 80027c4:	f000 f80c 	bl	80027e0 <HAL_UARTEx_WakeupCallback>
    return;
 80027c8:	e7f2      	b.n	80027b0 <HAL_UART_IRQHandler+0x114>
    UART_Transmit_IT(huart);
 80027ca:	0020      	movs	r0, r4
 80027cc:	f7ff fede 	bl	800258c <UART_Transmit_IT>
    return;
 80027d0:	e7ee      	b.n	80027b0 <HAL_UART_IRQHandler+0x114>
    UART_EndTransmit_IT(huart);
 80027d2:	0020      	movs	r0, r4
 80027d4:	f7ff ff10 	bl	80025f8 <UART_EndTransmit_IT>
    return;
 80027d8:	e7ea      	b.n	80027b0 <HAL_UART_IRQHandler+0x114>
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	080020c5 	.word	0x080020c5

080027e0 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80027e0:	4770      	bx	lr

080027e2 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 80027e2:	2884      	cmp	r0, #132	; 0x84
 80027e4:	d001      	beq.n	80027ea <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 80027e6:	3003      	adds	r0, #3
  }
  
  return fpriority;
}
 80027e8:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80027ea:	2000      	movs	r0, #0
  return fpriority;
 80027ec:	e7fc      	b.n	80027e8 <makeFreeRtosPriority+0x6>

080027ee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80027ee:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 80027f0:	f000 fabc 	bl	8002d6c <vTaskStartScheduler>
  
  return osOK;
}
 80027f4:	2000      	movs	r0, #0
 80027f6:	bd10      	pop	{r4, pc}

080027f8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80027f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027fa:	b085      	sub	sp, #20
 80027fc:	000d      	movs	r5, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027fe:	6846      	ldr	r6, [r0, #4]
 8002800:	6807      	ldr	r7, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002802:	6904      	ldr	r4, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002804:	2308      	movs	r3, #8
 8002806:	5ec0      	ldrsh	r0, [r0, r3]
 8002808:	f7ff ffeb 	bl	80027e2 <makeFreeRtosPriority>
 800280c:	b2a2      	uxth	r2, r4
 800280e:	ab03      	add	r3, sp, #12
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	9000      	str	r0, [sp, #0]
 8002814:	002b      	movs	r3, r5
 8002816:	0039      	movs	r1, r7
 8002818:	0030      	movs	r0, r6
 800281a:	f000 fa77 	bl	8002d0c <xTaskCreate>
 800281e:	2801      	cmp	r0, #1
 8002820:	d102      	bne.n	8002828 <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002822:	9803      	ldr	r0, [sp, #12]
}
 8002824:	b005      	add	sp, #20
 8002826:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 8002828:	2000      	movs	r0, #0
 800282a:	e7fb      	b.n	8002824 <osThreadCreate+0x2c>

0800282c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800282c:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800282e:	2800      	cmp	r0, #0
 8002830:	d100      	bne.n	8002834 <osDelay+0x8>
 8002832:	3001      	adds	r0, #1
 8002834:	f000 fbd4 	bl	8002fe0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002838:	2000      	movs	r0, #0
 800283a:	bd10      	pop	{r4, pc}

0800283c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800283c:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800283e:	f000 fc47 	bl	80030d0 <xTaskGetSchedulerState>
 8002842:	2801      	cmp	r0, #1
 8002844:	d001      	beq.n	800284a <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8002846:	f000 f8d5 	bl	80029f4 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800284a:	bd10      	pop	{r4, pc}

0800284c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800284c:	0003      	movs	r3, r0
 800284e:	3308      	adds	r3, #8
 8002850:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002852:	2201      	movs	r2, #1
 8002854:	4252      	negs	r2, r2
 8002856:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002858:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800285a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002860:	4770      	bx	lr

08002862 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002862:	2300      	movs	r3, #0
 8002864:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002866:	4770      	bx	lr

08002868 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002868:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800286a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002874:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002876:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002878:	6803      	ldr	r3, [r0, #0]
 800287a:	3301      	adds	r3, #1
 800287c:	6003      	str	r3, [r0, #0]
}
 800287e:	4770      	bx	lr

08002880 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002880:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002882:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002884:	1c63      	adds	r3, r4, #1
 8002886:	d002      	beq.n	800288e <vListInsert+0xe>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002888:	0002      	movs	r2, r0
 800288a:	3208      	adds	r2, #8
 800288c:	e002      	b.n	8002894 <vListInsert+0x14>
		pxIterator = pxList->xListEnd.pxPrevious;
 800288e:	6902      	ldr	r2, [r0, #16]
 8002890:	e004      	b.n	800289c <vListInsert+0x1c>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002892:	001a      	movs	r2, r3
 8002894:	6853      	ldr	r3, [r2, #4]
 8002896:	681d      	ldr	r5, [r3, #0]
 8002898:	42ac      	cmp	r4, r5
 800289a:	d2fa      	bcs.n	8002892 <vListInsert+0x12>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800289c:	6853      	ldr	r3, [r2, #4]
 800289e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028a0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028a2:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80028a4:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80028a6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80028a8:	6803      	ldr	r3, [r0, #0]
 80028aa:	3301      	adds	r3, #1
 80028ac:	6003      	str	r3, [r0, #0]
}
 80028ae:	bd30      	pop	{r4, r5, pc}

080028b0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80028b0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028b2:	6842      	ldr	r2, [r0, #4]
 80028b4:	6881      	ldr	r1, [r0, #8]
 80028b6:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028b8:	6882      	ldr	r2, [r0, #8]
 80028ba:	6841      	ldr	r1, [r0, #4]
 80028bc:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	4290      	cmp	r0, r2
 80028c2:	d005      	beq.n	80028d0 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80028c4:	2200      	movs	r2, #0
 80028c6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	1e50      	subs	r0, r2, #1
 80028cc:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80028ce:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028d0:	6882      	ldr	r2, [r0, #8]
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	e7f6      	b.n	80028c4 <uxListRemove+0x14>
	...

080028d8 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80028d8:	4b03      	ldr	r3, [pc, #12]	; (80028e8 <prvTaskExitError+0x10>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	3301      	adds	r3, #1
 80028de:	d001      	beq.n	80028e4 <prvTaskExitError+0xc>
 80028e0:	b672      	cpsid	i
 80028e2:	e7fe      	b.n	80028e2 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 80028e4:	b672      	cpsid	i
 80028e6:	e7fe      	b.n	80028e6 <prvTaskExitError+0xe>
 80028e8:	20000000 	.word	0x20000000
 80028ec:	00000000 	.word	0x00000000

080028f0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80028f0:	4a0b      	ldr	r2, [pc, #44]	; (8002920 <pxCurrentTCBConst2>)
 80028f2:	6813      	ldr	r3, [r2, #0]
 80028f4:	6818      	ldr	r0, [r3, #0]
 80028f6:	3020      	adds	r0, #32
 80028f8:	f380 8809 	msr	PSP, r0
 80028fc:	2002      	movs	r0, #2
 80028fe:	f380 8814 	msr	CONTROL, r0
 8002902:	f3bf 8f6f 	isb	sy
 8002906:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8002908:	46ae      	mov	lr, r5
 800290a:	bc08      	pop	{r3}
 800290c:	bc04      	pop	{r2}
 800290e:	b662      	cpsie	i
 8002910:	4718      	bx	r3
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	46c0      	nop			; (mov r8, r8)
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	46c0      	nop			; (mov r8, r8)
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	46c0      	nop			; (mov r8, r8)
 800291e:	46c0      	nop			; (mov r8, r8)

08002920 <pxCurrentTCBConst2>:
 8002920:	200000f4 	.word	0x200000f4

08002924 <pxPortInitialiseStack>:
{
 8002924:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002926:	1f03      	subs	r3, r0, #4
 8002928:	2480      	movs	r4, #128	; 0x80
 800292a:	0464      	lsls	r4, r4, #17
 800292c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800292e:	3b04      	subs	r3, #4
 8002930:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002932:	3b04      	subs	r3, #4
 8002934:	4902      	ldr	r1, [pc, #8]	; (8002940 <pxPortInitialiseStack+0x1c>)
 8002936:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002938:	3b14      	subs	r3, #20
 800293a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800293c:	3840      	subs	r0, #64	; 0x40
}
 800293e:	bd10      	pop	{r4, pc}
 8002940:	080028d9 	.word	0x080028d9

08002944 <SVC_Handler>:
}
 8002944:	4770      	bx	lr
	...

08002948 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8002948:	2280      	movs	r2, #128	; 0x80
 800294a:	0552      	lsls	r2, r2, #21
 800294c:	4b03      	ldr	r3, [pc, #12]	; (800295c <vPortYield+0x14>)
 800294e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8002950:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002954:	f3bf 8f6f 	isb	sy
}
 8002958:	4770      	bx	lr
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	e000ed04 	.word	0xe000ed04

08002960 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
 8002960:	b672      	cpsid	i
    uxCriticalNesting++;
 8002962:	4a04      	ldr	r2, [pc, #16]	; (8002974 <vPortEnterCritical+0x14>)
 8002964:	6813      	ldr	r3, [r2, #0]
 8002966:	3301      	adds	r3, #1
 8002968:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800296a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800296e:	f3bf 8f6f 	isb	sy
}
 8002972:	4770      	bx	lr
 8002974:	20000000 	.word	0x20000000

08002978 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8002978:	4b06      	ldr	r3, [pc, #24]	; (8002994 <vPortExitCritical+0x1c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <vPortExitCritical+0xc>
 8002980:	b672      	cpsid	i
 8002982:	e7fe      	b.n	8002982 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 8002984:	3b01      	subs	r3, #1
 8002986:	4a03      	ldr	r2, [pc, #12]	; (8002994 <vPortExitCritical+0x1c>)
 8002988:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800298a:	2b00      	cmp	r3, #0
 800298c:	d100      	bne.n	8002990 <vPortExitCritical+0x18>
    {
        portENABLE_INTERRUPTS();
 800298e:	b662      	cpsie	i
    }
}
 8002990:	4770      	bx	lr
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	20000000 	.word	0x20000000

08002998 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8002998:	f3ef 8010 	mrs	r0, PRIMASK
 800299c:	b672      	cpsid	i
 800299e:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
}
 80029a0:	2000      	movs	r0, #0

080029a2 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
 80029a2:	f380 8810 	msr	PRIMASK, r0
 80029a6:	4770      	bx	lr
	...

080029b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80029b0:	f3ef 8009 	mrs	r0, PSP
 80029b4:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <pxCurrentTCBConst>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	3820      	subs	r0, #32
 80029ba:	6010      	str	r0, [r2, #0]
 80029bc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80029be:	4644      	mov	r4, r8
 80029c0:	464d      	mov	r5, r9
 80029c2:	4656      	mov	r6, sl
 80029c4:	465f      	mov	r7, fp
 80029c6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80029c8:	b508      	push	{r3, lr}
 80029ca:	b672      	cpsid	i
 80029cc:	f000 fb22 	bl	8003014 <vTaskSwitchContext>
 80029d0:	b662      	cpsie	i
 80029d2:	bc0c      	pop	{r2, r3}
 80029d4:	6811      	ldr	r1, [r2, #0]
 80029d6:	6808      	ldr	r0, [r1, #0]
 80029d8:	3010      	adds	r0, #16
 80029da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80029dc:	46a0      	mov	r8, r4
 80029de:	46a9      	mov	r9, r5
 80029e0:	46b2      	mov	sl, r6
 80029e2:	46bb      	mov	fp, r7
 80029e4:	f380 8809 	msr	PSP, r0
 80029e8:	3820      	subs	r0, #32
 80029ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80029ec:	4718      	bx	r3
 80029ee:	46c0      	nop			; (mov r8, r8)

080029f0 <pxCurrentTCBConst>:
 80029f0:	200000f4 	.word	0x200000f4

080029f4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80029f4:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80029f6:	f7ff ffcf 	bl	8002998 <ulSetInterruptMaskFromISR>
 80029fa:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80029fc:	f000 f9ec 	bl	8002dd8 <xTaskIncrementTick>
 8002a00:	2800      	cmp	r0, #0
 8002a02:	d003      	beq.n	8002a0c <xPortSysTickHandler+0x18>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8002a04:	2280      	movs	r2, #128	; 0x80
 8002a06:	0552      	lsls	r2, r2, #21
 8002a08:	4b02      	ldr	r3, [pc, #8]	; (8002a14 <xPortSysTickHandler+0x20>)
 8002a0a:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8002a0c:	0020      	movs	r0, r4
 8002a0e:	f7ff ffc8 	bl	80029a2 <vClearInterruptMaskFromISR>
}
 8002a12:	bd10      	pop	{r4, pc}
 8002a14:	e000ed04 	.word	0xe000ed04

08002a18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002a18:	b510      	push	{r4, lr}
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */
	/* Configure SysTick to interrupt at the requested rate. */

	portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <vPortSetupTimerInterrupt+0x1c>)
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	21fa      	movs	r1, #250	; 0xfa
 8002a20:	0089      	lsls	r1, r1, #2
 8002a22:	f7fd fb79 	bl	8000118 <__udivsi3>
 8002a26:	3801      	subs	r0, #1
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <vPortSetupTimerInterrupt+0x20>)
 8002a2a:	6018      	str	r0, [r3, #0]
	portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8002a2c:	2207      	movs	r2, #7
 8002a2e:	4b03      	ldr	r3, [pc, #12]	; (8002a3c <vPortSetupTimerInterrupt+0x24>)
 8002a30:	601a      	str	r2, [r3, #0]
}
 8002a32:	bd10      	pop	{r4, pc}
 8002a34:	2000006c 	.word	0x2000006c
 8002a38:	e000e014 	.word	0xe000e014
 8002a3c:	e000e010 	.word	0xe000e010

08002a40 <xPortStartScheduler>:
{
 8002a40:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8002a42:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <xPortStartScheduler+0x2c>)
 8002a44:	6819      	ldr	r1, [r3, #0]
 8002a46:	22ff      	movs	r2, #255	; 0xff
 8002a48:	0412      	lsls	r2, r2, #16
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8002a4e:	6819      	ldr	r1, [r3, #0]
 8002a50:	22ff      	movs	r2, #255	; 0xff
 8002a52:	0612      	lsls	r2, r2, #24
 8002a54:	430a      	orrs	r2, r1
 8002a56:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002a58:	f7ff ffde 	bl	8002a18 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	4b04      	ldr	r3, [pc, #16]	; (8002a70 <xPortStartScheduler+0x30>)
 8002a60:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 8002a62:	f7ff ff45 	bl	80028f0 <vPortStartFirstTask>
	prvTaskExitError();
 8002a66:	f7ff ff37 	bl	80028d8 <prvTaskExitError>
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	e000ed20 	.word	0xe000ed20
 8002a70:	20000000 	.word	0x20000000

08002a74 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002a74:	b510      	push	{r4, lr}
 8002a76:	0004      	movs	r4, r0
void *pvReturn;

	vTaskSuspendAll();
 8002a78:	f000 f9a6 	bl	8002dc8 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 8002a7c:	0020      	movs	r0, r4
 8002a7e:	f002 fcf5 	bl	800546c <malloc>
 8002a82:	0004      	movs	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002a84:	f000 fa36 	bl	8002ef4 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 8002a88:	0020      	movs	r0, r4
 8002a8a:	bd10      	pop	{r4, pc}

08002a8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002a8c:	b510      	push	{r4, lr}
 8002a8e:	1e04      	subs	r4, r0, #0
	if( pv )
 8002a90:	d006      	beq.n	8002aa0 <vPortFree+0x14>
	{
		vTaskSuspendAll();
 8002a92:	f000 f999 	bl	8002dc8 <vTaskSuspendAll>
		{
			free( pv );
 8002a96:	0020      	movs	r0, r4
 8002a98:	f002 fcf2 	bl	8005480 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8002a9c:	f000 fa2a 	bl	8002ef4 <xTaskResumeAll>
	}
}
 8002aa0:	bd10      	pop	{r4, pc}

08002aa2 <prvTaskCheckFreeStackSpace>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 8002aa2:	2300      	movs	r3, #0

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8002aa4:	e001      	b.n	8002aaa <prvTaskCheckFreeStackSpace+0x8>
		{
			pucStackByte -= portSTACK_GROWTH;
 8002aa6:	3001      	adds	r0, #1
			ulCount++;
 8002aa8:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8002aaa:	7802      	ldrb	r2, [r0, #0]
 8002aac:	2aa5      	cmp	r2, #165	; 0xa5
 8002aae:	d0fa      	beq.n	8002aa6 <prvTaskCheckFreeStackSpace+0x4>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8002ab0:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 8002ab2:	b298      	uxth	r0, r3
	}
 8002ab4:	4770      	bx	lr
	...

08002ab8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <prvResetNextTaskUnblockTime+0x30>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10a      	bne.n	8002ad8 <prvResetNextTaskUnblockTime+0x20>
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d109      	bne.n	8002adc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ac8:	4b07      	ldr	r3, [pc, #28]	; (8002ae8 <prvResetNextTaskUnblockTime+0x30>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <prvResetNextTaskUnblockTime+0x34>)
 8002ad4:	601a      	str	r2, [r3, #0]
	}
}
 8002ad6:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ad8:	2300      	movs	r3, #0
 8002ada:	e7f3      	b.n	8002ac4 <prvResetNextTaskUnblockTime+0xc>
		xNextTaskUnblockTime = portMAX_DELAY;
 8002adc:	2201      	movs	r2, #1
 8002ade:	4252      	negs	r2, r2
 8002ae0:	4b02      	ldr	r3, [pc, #8]	; (8002aec <prvResetNextTaskUnblockTime+0x34>)
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	e7f7      	b.n	8002ad6 <prvResetNextTaskUnblockTime+0x1e>
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	200000f8 	.word	0x200000f8
 8002aec:	200001cc 	.word	0x200001cc

08002af0 <prvInitialiseNewTask>:
{
 8002af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002af2:	b083      	sub	sp, #12
 8002af4:	9000      	str	r0, [sp, #0]
 8002af6:	000d      	movs	r5, r1
 8002af8:	0017      	movs	r7, r2
 8002afa:	9301      	str	r3, [sp, #4]
 8002afc:	9c08      	ldr	r4, [sp, #32]
 8002afe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b00:	0092      	lsls	r2, r2, #2
 8002b02:	21a5      	movs	r1, #165	; 0xa5
 8002b04:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8002b06:	f002 fcce 	bl	80054a6 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002b0a:	4b1c      	ldr	r3, [pc, #112]	; (8002b7c <prvInitialiseNewTask+0x8c>)
 8002b0c:	18fb      	adds	r3, r7, r3
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8002b12:	4694      	mov	ip, r2
 8002b14:	4463      	add	r3, ip
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002b16:	2207      	movs	r2, #7
 8002b18:	4393      	bics	r3, r2
 8002b1a:	001f      	movs	r7, r3
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	2b0b      	cmp	r3, #11
 8002b20:	d809      	bhi.n	8002b36 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b22:	18e9      	adds	r1, r5, r3
 8002b24:	7808      	ldrb	r0, [r1, #0]
 8002b26:	18f2      	adds	r2, r6, r3
 8002b28:	3234      	adds	r2, #52	; 0x34
 8002b2a:	7010      	strb	r0, [r2, #0]
		if( pcName[ x ] == 0x00 )
 8002b2c:	780a      	ldrb	r2, [r1, #0]
 8002b2e:	2a00      	cmp	r2, #0
 8002b30:	d001      	beq.n	8002b36 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b32:	3301      	adds	r3, #1
 8002b34:	e7f3      	b.n	8002b1e <prvInitialiseNewTask+0x2e>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b36:	2200      	movs	r2, #0
 8002b38:	233f      	movs	r3, #63	; 0x3f
 8002b3a:	54f2      	strb	r2, [r6, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b3c:	2c06      	cmp	r4, #6
 8002b3e:	d900      	bls.n	8002b42 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b40:	2406      	movs	r4, #6
	pxNewTCB->uxPriority = uxPriority;
 8002b42:	62f4      	str	r4, [r6, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002b44:	6434      	str	r4, [r6, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	6473      	str	r3, [r6, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b4a:	1d30      	adds	r0, r6, #4
 8002b4c:	f7ff fe89 	bl	8002862 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b50:	0030      	movs	r0, r6
 8002b52:	3018      	adds	r0, #24
 8002b54:	f7ff fe85 	bl	8002862 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b58:	6136      	str	r6, [r6, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b5a:	2307      	movs	r3, #7
 8002b5c:	1b1c      	subs	r4, r3, r4
 8002b5e:	61b4      	str	r4, [r6, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b60:	6276      	str	r6, [r6, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b62:	9a01      	ldr	r2, [sp, #4]
 8002b64:	9900      	ldr	r1, [sp, #0]
 8002b66:	0038      	movs	r0, r7
 8002b68:	f7ff fedc 	bl	8002924 <pxPortInitialiseStack>
 8002b6c:	6030      	str	r0, [r6, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d000      	beq.n	8002b76 <prvInitialiseNewTask+0x86>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b74:	601e      	str	r6, [r3, #0]
}
 8002b76:	b003      	add	sp, #12
 8002b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	3fffffff 	.word	0x3fffffff

08002b80 <prvIdleTask>:
{
 8002b80:	b510      	push	{r4, lr}
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002b82:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <prvIdleTask+0x10>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d9fb      	bls.n	8002b82 <prvIdleTask+0x2>
				taskYIELD();
 8002b8a:	f7ff fedd 	bl	8002948 <vPortYield>
 8002b8e:	e7f8      	b.n	8002b82 <prvIdleTask+0x2>
 8002b90:	20000100 	.word	0x20000100

08002b94 <prvInitialiseTaskLists>:
{
 8002b94:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b96:	2400      	movs	r4, #0
 8002b98:	e007      	b.n	8002baa <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b9a:	00a3      	lsls	r3, r4, #2
 8002b9c:	191b      	adds	r3, r3, r4
 8002b9e:	009a      	lsls	r2, r3, #2
 8002ba0:	480c      	ldr	r0, [pc, #48]	; (8002bd4 <prvInitialiseTaskLists+0x40>)
 8002ba2:	1880      	adds	r0, r0, r2
 8002ba4:	f7ff fe52 	bl	800284c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ba8:	3401      	adds	r4, #1
 8002baa:	2c06      	cmp	r4, #6
 8002bac:	d9f5      	bls.n	8002b9a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8002bae:	4d0a      	ldr	r5, [pc, #40]	; (8002bd8 <prvInitialiseTaskLists+0x44>)
 8002bb0:	0028      	movs	r0, r5
 8002bb2:	f7ff fe4b 	bl	800284c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002bb6:	4c09      	ldr	r4, [pc, #36]	; (8002bdc <prvInitialiseTaskLists+0x48>)
 8002bb8:	0020      	movs	r0, r4
 8002bba:	f7ff fe47 	bl	800284c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002bbe:	4808      	ldr	r0, [pc, #32]	; (8002be0 <prvInitialiseTaskLists+0x4c>)
 8002bc0:	f7ff fe44 	bl	800284c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8002bc4:	4807      	ldr	r0, [pc, #28]	; (8002be4 <prvInitialiseTaskLists+0x50>)
 8002bc6:	f7ff fe41 	bl	800284c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002bca:	4b07      	ldr	r3, [pc, #28]	; (8002be8 <prvInitialiseTaskLists+0x54>)
 8002bcc:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002bce:	4b07      	ldr	r3, [pc, #28]	; (8002bec <prvInitialiseTaskLists+0x58>)
 8002bd0:	601c      	str	r4, [r3, #0]
}
 8002bd2:	bd70      	pop	{r4, r5, r6, pc}
 8002bd4:	20000100 	.word	0x20000100
 8002bd8:	200001a0 	.word	0x200001a0
 8002bdc:	200001b4 	.word	0x200001b4
 8002be0:	200001d4 	.word	0x200001d4
 8002be4:	200001ec 	.word	0x200001ec
 8002be8:	200000f8 	.word	0x200000f8
 8002bec:	200000fc 	.word	0x200000fc

08002bf0 <prvAddNewTaskToReadyList>:
{
 8002bf0:	b510      	push	{r4, lr}
 8002bf2:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 8002bf4:	f7ff feb4 	bl	8002960 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002bf8:	4a1f      	ldr	r2, [pc, #124]	; (8002c78 <prvAddNewTaskToReadyList+0x88>)
 8002bfa:	6813      	ldr	r3, [r2, #0]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002c00:	4b1e      	ldr	r3, [pc, #120]	; (8002c7c <prvAddNewTaskToReadyList+0x8c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d02b      	beq.n	8002c60 <prvAddNewTaskToReadyList+0x70>
			if( xSchedulerRunning == pdFALSE )
 8002c08:	4b1d      	ldr	r3, [pc, #116]	; (8002c80 <prvAddNewTaskToReadyList+0x90>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d107      	bne.n	8002c20 <prvAddNewTaskToReadyList+0x30>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c10:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <prvAddNewTaskToReadyList+0x8c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d801      	bhi.n	8002c20 <prvAddNewTaskToReadyList+0x30>
					pxCurrentTCB = pxNewTCB;
 8002c1c:	4b17      	ldr	r3, [pc, #92]	; (8002c7c <prvAddNewTaskToReadyList+0x8c>)
 8002c1e:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
 8002c20:	4a18      	ldr	r2, [pc, #96]	; (8002c84 <prvAddNewTaskToReadyList+0x94>)
 8002c22:	6813      	ldr	r3, [r2, #0]
 8002c24:	3301      	adds	r3, #1
 8002c26:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002c28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002c2a:	4b17      	ldr	r3, [pc, #92]	; (8002c88 <prvAddNewTaskToReadyList+0x98>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d901      	bls.n	8002c36 <prvAddNewTaskToReadyList+0x46>
 8002c32:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <prvAddNewTaskToReadyList+0x98>)
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	1d21      	adds	r1, r4, #4
 8002c38:	0093      	lsls	r3, r2, #2
 8002c3a:	189b      	adds	r3, r3, r2
 8002c3c:	009a      	lsls	r2, r3, #2
 8002c3e:	4813      	ldr	r0, [pc, #76]	; (8002c8c <prvAddNewTaskToReadyList+0x9c>)
 8002c40:	1880      	adds	r0, r0, r2
 8002c42:	f7ff fe11 	bl	8002868 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002c46:	f7ff fe97 	bl	8002978 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	; (8002c80 <prvAddNewTaskToReadyList+0x90>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <prvAddNewTaskToReadyList+0x6e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c52:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <prvAddNewTaskToReadyList+0x8c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d308      	bcc.n	8002c70 <prvAddNewTaskToReadyList+0x80>
}
 8002c5e:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
 8002c60:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <prvAddNewTaskToReadyList+0x8c>)
 8002c62:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c64:	6813      	ldr	r3, [r2, #0]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d1da      	bne.n	8002c20 <prvAddNewTaskToReadyList+0x30>
				prvInitialiseTaskLists();
 8002c6a:	f7ff ff93 	bl	8002b94 <prvInitialiseTaskLists>
 8002c6e:	e7d7      	b.n	8002c20 <prvAddNewTaskToReadyList+0x30>
			taskYIELD_IF_USING_PREEMPTION();
 8002c70:	f7ff fe6a 	bl	8002948 <vPortYield>
}
 8002c74:	e7f3      	b.n	8002c5e <prvAddNewTaskToReadyList+0x6e>
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	2000018c 	.word	0x2000018c
 8002c7c:	200000f4 	.word	0x200000f4
 8002c80:	200001e8 	.word	0x200001e8
 8002c84:	20000198 	.word	0x20000198
 8002c88:	2000019c 	.word	0x2000019c
 8002c8c:	20000100 	.word	0x20000100

08002c90 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002c90:	b570      	push	{r4, r5, r6, lr}
 8002c92:	0004      	movs	r4, r0
 8002c94:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002c96:	4b17      	ldr	r3, [pc, #92]	; (8002cf4 <prvAddCurrentTaskToDelayedList+0x64>)
 8002c98:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c9a:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <prvAddCurrentTaskToDelayedList+0x68>)
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	3004      	adds	r0, #4
 8002ca0:	f7ff fe06 	bl	80028b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002ca4:	1c63      	adds	r3, r4, #1
 8002ca6:	d013      	beq.n	8002cd0 <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002ca8:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002caa:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <prvAddCurrentTaskToDelayedList+0x68>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8002cb0:	42a6      	cmp	r6, r4
 8002cb2:	d816      	bhi.n	8002ce2 <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <prvAddCurrentTaskToDelayedList+0x6c>)
 8002cb6:	6818      	ldr	r0, [r3, #0]
 8002cb8:	4b0f      	ldr	r3, [pc, #60]	; (8002cf8 <prvAddCurrentTaskToDelayedList+0x68>)
 8002cba:	6819      	ldr	r1, [r3, #0]
 8002cbc:	3104      	adds	r1, #4
 8002cbe:	f7ff fddf 	bl	8002880 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8002cc2:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <prvAddCurrentTaskToDelayedList+0x70>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	429c      	cmp	r4, r3
 8002cc8:	d212      	bcs.n	8002cf0 <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8002cca:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <prvAddCurrentTaskToDelayedList+0x70>)
 8002ccc:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002cce:	e00f      	b.n	8002cf0 <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002cd0:	2d00      	cmp	r5, #0
 8002cd2:	d0e9      	beq.n	8002ca8 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002cd4:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <prvAddCurrentTaskToDelayedList+0x68>)
 8002cd6:	6819      	ldr	r1, [r3, #0]
 8002cd8:	3104      	adds	r1, #4
 8002cda:	480a      	ldr	r0, [pc, #40]	; (8002d04 <prvAddCurrentTaskToDelayedList+0x74>)
 8002cdc:	f7ff fdc4 	bl	8002868 <vListInsertEnd>
 8002ce0:	e006      	b.n	8002cf0 <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <prvAddCurrentTaskToDelayedList+0x78>)
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <prvAddCurrentTaskToDelayedList+0x68>)
 8002ce8:	6819      	ldr	r1, [r3, #0]
 8002cea:	3104      	adds	r1, #4
 8002cec:	f7ff fdc8 	bl	8002880 <vListInsert>
}
 8002cf0:	bd70      	pop	{r4, r5, r6, pc}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	20000200 	.word	0x20000200
 8002cf8:	200000f4 	.word	0x200000f4
 8002cfc:	200000f8 	.word	0x200000f8
 8002d00:	200001cc 	.word	0x200001cc
 8002d04:	200001ec 	.word	0x200001ec
 8002d08:	200000fc 	.word	0x200000fc

08002d0c <xTaskCreate>:
	{
 8002d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	9004      	str	r0, [sp, #16]
 8002d12:	9105      	str	r1, [sp, #20]
 8002d14:	0014      	movs	r4, r2
 8002d16:	001f      	movs	r7, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d18:	0090      	lsls	r0, r2, #2
 8002d1a:	f7ff feab 	bl	8002a74 <pvPortMalloc>
 8002d1e:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
 8002d20:	d01e      	beq.n	8002d60 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002d22:	2048      	movs	r0, #72	; 0x48
 8002d24:	f7ff fea6 	bl	8002a74 <pvPortMalloc>
 8002d28:	1e05      	subs	r5, r0, #0
				if( pxNewTCB != NULL )
 8002d2a:	d015      	beq.n	8002d58 <xTaskCreate+0x4c>
					pxNewTCB->pxStack = pxStack;
 8002d2c:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8002d2e:	2d00      	cmp	r5, #0
 8002d30:	d018      	beq.n	8002d64 <xTaskCreate+0x58>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d32:	2300      	movs	r3, #0
 8002d34:	9303      	str	r3, [sp, #12]
 8002d36:	9502      	str	r5, [sp, #8]
 8002d38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d3a:	9301      	str	r3, [sp, #4]
 8002d3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	003b      	movs	r3, r7
 8002d42:	0022      	movs	r2, r4
 8002d44:	9905      	ldr	r1, [sp, #20]
 8002d46:	9804      	ldr	r0, [sp, #16]
 8002d48:	f7ff fed2 	bl	8002af0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d4c:	0028      	movs	r0, r5
 8002d4e:	f7ff ff4f 	bl	8002bf0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d52:	2001      	movs	r0, #1
	}
 8002d54:	b007      	add	sp, #28
 8002d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
 8002d58:	0030      	movs	r0, r6
 8002d5a:	f7ff fe97 	bl	8002a8c <vPortFree>
 8002d5e:	e7e6      	b.n	8002d2e <xTaskCreate+0x22>
				pxNewTCB = NULL;
 8002d60:	2500      	movs	r5, #0
 8002d62:	e7e4      	b.n	8002d2e <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d64:	2001      	movs	r0, #1
 8002d66:	4240      	negs	r0, r0
		return xReturn;
 8002d68:	e7f4      	b.n	8002d54 <xTaskCreate+0x48>
	...

08002d6c <vTaskStartScheduler>:
{
 8002d6c:	b500      	push	{lr}
 8002d6e:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 8002d70:	4b0f      	ldr	r3, [pc, #60]	; (8002db0 <vTaskStartScheduler+0x44>)
 8002d72:	9301      	str	r3, [sp, #4]
 8002d74:	2300      	movs	r3, #0
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	2240      	movs	r2, #64	; 0x40
 8002d7a:	490e      	ldr	r1, [pc, #56]	; (8002db4 <vTaskStartScheduler+0x48>)
 8002d7c:	480e      	ldr	r0, [pc, #56]	; (8002db8 <vTaskStartScheduler+0x4c>)
 8002d7e:	f7ff ffc5 	bl	8002d0c <xTaskCreate>
	if( xReturn == pdPASS )
 8002d82:	2801      	cmp	r0, #1
 8002d84:	d003      	beq.n	8002d8e <vTaskStartScheduler+0x22>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d86:	1c43      	adds	r3, r0, #1
 8002d88:	d00f      	beq.n	8002daa <vTaskStartScheduler+0x3e>
}
 8002d8a:	b003      	add	sp, #12
 8002d8c:	bd00      	pop	{pc}
		portDISABLE_INTERRUPTS();
 8002d8e:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8002d90:	2201      	movs	r2, #1
 8002d92:	4252      	negs	r2, r2
 8002d94:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <vTaskStartScheduler+0x50>)
 8002d96:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002d98:	3202      	adds	r2, #2
 8002d9a:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <vTaskStartScheduler+0x54>)
 8002d9c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002d9e:	2200      	movs	r2, #0
 8002da0:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <vTaskStartScheduler+0x58>)
 8002da2:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8002da4:	f7ff fe4c 	bl	8002a40 <xPortStartScheduler>
 8002da8:	e7ef      	b.n	8002d8a <vTaskStartScheduler+0x1e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002daa:	b672      	cpsid	i
 8002dac:	e7fe      	b.n	8002dac <vTaskStartScheduler+0x40>
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	200001c8 	.word	0x200001c8
 8002db4:	08005db0 	.word	0x08005db0
 8002db8:	08002b81 	.word	0x08002b81
 8002dbc:	200001cc 	.word	0x200001cc
 8002dc0:	200001e8 	.word	0x200001e8
 8002dc4:	20000200 	.word	0x20000200

08002dc8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002dc8:	4a02      	ldr	r2, [pc, #8]	; (8002dd4 <vTaskSuspendAll+0xc>)
 8002dca:	6813      	ldr	r3, [r2, #0]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	6013      	str	r3, [r2, #0]
}
 8002dd0:	4770      	bx	lr
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	20000194 	.word	0x20000194

08002dd8 <xTaskIncrementTick>:
{
 8002dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dda:	4b3b      	ldr	r3, [pc, #236]	; (8002ec8 <xTaskIncrementTick+0xf0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d166      	bne.n	8002eb0 <xTaskIncrementTick+0xd8>
		const TickType_t xConstTickCount = xTickCount + 1;
 8002de2:	4b3a      	ldr	r3, [pc, #232]	; (8002ecc <xTaskIncrementTick+0xf4>)
 8002de4:	681d      	ldr	r5, [r3, #0]
 8002de6:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8002de8:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8002dea:	2d00      	cmp	r5, #0
 8002dec:	d112      	bne.n	8002e14 <xTaskIncrementTick+0x3c>
			taskSWITCH_DELAYED_LISTS();
 8002dee:	4b38      	ldr	r3, [pc, #224]	; (8002ed0 <xTaskIncrementTick+0xf8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <xTaskIncrementTick+0x24>
 8002df8:	b672      	cpsid	i
 8002dfa:	e7fe      	b.n	8002dfa <xTaskIncrementTick+0x22>
 8002dfc:	4a34      	ldr	r2, [pc, #208]	; (8002ed0 <xTaskIncrementTick+0xf8>)
 8002dfe:	6811      	ldr	r1, [r2, #0]
 8002e00:	4b34      	ldr	r3, [pc, #208]	; (8002ed4 <xTaskIncrementTick+0xfc>)
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	6010      	str	r0, [r2, #0]
 8002e06:	6019      	str	r1, [r3, #0]
 8002e08:	4a33      	ldr	r2, [pc, #204]	; (8002ed8 <xTaskIncrementTick+0x100>)
 8002e0a:	6813      	ldr	r3, [r2, #0]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	f7ff fe52 	bl	8002ab8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002e14:	4b31      	ldr	r3, [pc, #196]	; (8002edc <xTaskIncrementTick+0x104>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	429d      	cmp	r5, r3
 8002e1a:	d23d      	bcs.n	8002e98 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 8002e1c:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e1e:	4b30      	ldr	r3, [pc, #192]	; (8002ee0 <xTaskIncrementTick+0x108>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e24:	0093      	lsls	r3, r2, #2
 8002e26:	189b      	adds	r3, r3, r2
 8002e28:	009a      	lsls	r2, r3, #2
 8002e2a:	4b2e      	ldr	r3, [pc, #184]	; (8002ee4 <xTaskIncrementTick+0x10c>)
 8002e2c:	58d3      	ldr	r3, [r2, r3]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d943      	bls.n	8002eba <xTaskIncrementTick+0xe2>
				xSwitchRequired = pdTRUE;
 8002e32:	2401      	movs	r4, #1
 8002e34:	e041      	b.n	8002eba <xTaskIncrementTick+0xe2>
							xSwitchRequired = pdTRUE;
 8002e36:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e38:	4b25      	ldr	r3, [pc, #148]	; (8002ed0 <xTaskIncrementTick+0xf8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d02c      	beq.n	8002e9c <xTaskIncrementTick+0xc4>
 8002e42:	2300      	movs	r3, #0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d12b      	bne.n	8002ea0 <xTaskIncrementTick+0xc8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e48:	4b21      	ldr	r3, [pc, #132]	; (8002ed0 <xTaskIncrementTick+0xf8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e50:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002e52:	429d      	cmp	r5, r3
 8002e54:	d329      	bcc.n	8002eaa <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e56:	1d37      	adds	r7, r6, #4
 8002e58:	0038      	movs	r0, r7
 8002e5a:	f7ff fd29 	bl	80028b0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e5e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e64:	0030      	movs	r0, r6
 8002e66:	3018      	adds	r0, #24
 8002e68:	f7ff fd22 	bl	80028b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e6c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8002e6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ee8 <xTaskIncrementTick+0x110>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d901      	bls.n	8002e7a <xTaskIncrementTick+0xa2>
 8002e76:	4b1c      	ldr	r3, [pc, #112]	; (8002ee8 <xTaskIncrementTick+0x110>)
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	0093      	lsls	r3, r2, #2
 8002e7c:	189b      	adds	r3, r3, r2
 8002e7e:	009a      	lsls	r2, r3, #2
 8002e80:	4818      	ldr	r0, [pc, #96]	; (8002ee4 <xTaskIncrementTick+0x10c>)
 8002e82:	1880      	adds	r0, r0, r2
 8002e84:	0039      	movs	r1, r7
 8002e86:	f7ff fcef 	bl	8002868 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e8a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8002e8c:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <xTaskIncrementTick+0x108>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d2cf      	bcs.n	8002e36 <xTaskIncrementTick+0x5e>
 8002e96:	e7cf      	b.n	8002e38 <xTaskIncrementTick+0x60>
 8002e98:	2400      	movs	r4, #0
 8002e9a:	e7cd      	b.n	8002e38 <xTaskIncrementTick+0x60>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	e7d1      	b.n	8002e44 <xTaskIncrementTick+0x6c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	4252      	negs	r2, r2
 8002ea4:	4b0d      	ldr	r3, [pc, #52]	; (8002edc <xTaskIncrementTick+0x104>)
 8002ea6:	601a      	str	r2, [r3, #0]
					break;
 8002ea8:	e7b9      	b.n	8002e1e <xTaskIncrementTick+0x46>
						xNextTaskUnblockTime = xItemValue;
 8002eaa:	4a0c      	ldr	r2, [pc, #48]	; (8002edc <xTaskIncrementTick+0x104>)
 8002eac:	6013      	str	r3, [r2, #0]
						break;
 8002eae:	e7b6      	b.n	8002e1e <xTaskIncrementTick+0x46>
		++uxPendedTicks;
 8002eb0:	4a0e      	ldr	r2, [pc, #56]	; (8002eec <xTaskIncrementTick+0x114>)
 8002eb2:	6813      	ldr	r3, [r2, #0]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8002eb8:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8002eba:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <xTaskIncrementTick+0x118>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d000      	beq.n	8002ec4 <xTaskIncrementTick+0xec>
			xSwitchRequired = pdTRUE;
 8002ec2:	2401      	movs	r4, #1
}
 8002ec4:	0020      	movs	r0, r4
 8002ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ec8:	20000194 	.word	0x20000194
 8002ecc:	20000200 	.word	0x20000200
 8002ed0:	200000f8 	.word	0x200000f8
 8002ed4:	200000fc 	.word	0x200000fc
 8002ed8:	200001d0 	.word	0x200001d0
 8002edc:	200001cc 	.word	0x200001cc
 8002ee0:	200000f4 	.word	0x200000f4
 8002ee4:	20000100 	.word	0x20000100
 8002ee8:	2000019c 	.word	0x2000019c
 8002eec:	20000190 	.word	0x20000190
 8002ef0:	20000204 	.word	0x20000204

08002ef4 <xTaskResumeAll>:
{
 8002ef4:	b570      	push	{r4, r5, r6, lr}
	configASSERT( uxSchedulerSuspended );
 8002ef6:	4b32      	ldr	r3, [pc, #200]	; (8002fc0 <xTaskResumeAll+0xcc>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <xTaskResumeAll+0xe>
 8002efe:	b672      	cpsid	i
 8002f00:	e7fe      	b.n	8002f00 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 8002f02:	f7ff fd2d 	bl	8002960 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002f06:	4b2e      	ldr	r3, [pc, #184]	; (8002fc0 <xTaskResumeAll+0xcc>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	3a01      	subs	r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d150      	bne.n	8002fb6 <xTaskResumeAll+0xc2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f14:	4b2b      	ldr	r3, [pc, #172]	; (8002fc4 <xTaskResumeAll+0xd0>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d104      	bne.n	8002f26 <xTaskResumeAll+0x32>
BaseType_t xAlreadyYielded = pdFALSE;
 8002f1c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002f1e:	f7ff fd2b 	bl	8002978 <vPortExitCritical>
}
 8002f22:	0020      	movs	r0, r4
 8002f24:	bd70      	pop	{r4, r5, r6, pc}
 8002f26:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f28:	4b27      	ldr	r3, [pc, #156]	; (8002fc8 <xTaskResumeAll+0xd4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d023      	beq.n	8002f78 <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002f30:	4b25      	ldr	r3, [pc, #148]	; (8002fc8 <xTaskResumeAll+0xd4>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f36:	0020      	movs	r0, r4
 8002f38:	3018      	adds	r0, #24
 8002f3a:	f7ff fcb9 	bl	80028b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f3e:	1d25      	adds	r5, r4, #4
 8002f40:	0028      	movs	r0, r5
 8002f42:	f7ff fcb5 	bl	80028b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f46:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002f48:	4b20      	ldr	r3, [pc, #128]	; (8002fcc <xTaskResumeAll+0xd8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d901      	bls.n	8002f54 <xTaskResumeAll+0x60>
 8002f50:	4b1e      	ldr	r3, [pc, #120]	; (8002fcc <xTaskResumeAll+0xd8>)
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	0093      	lsls	r3, r2, #2
 8002f56:	189b      	adds	r3, r3, r2
 8002f58:	009a      	lsls	r2, r3, #2
 8002f5a:	481d      	ldr	r0, [pc, #116]	; (8002fd0 <xTaskResumeAll+0xdc>)
 8002f5c:	1880      	adds	r0, r0, r2
 8002f5e:	0029      	movs	r1, r5
 8002f60:	f7ff fc82 	bl	8002868 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f64:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <xTaskResumeAll+0xe0>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d3db      	bcc.n	8002f28 <xTaskResumeAll+0x34>
						xYieldPending = pdTRUE;
 8002f70:	2201      	movs	r2, #1
 8002f72:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <xTaskResumeAll+0xe4>)
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	e7d7      	b.n	8002f28 <xTaskResumeAll+0x34>
				if( pxTCB != NULL )
 8002f78:	2c00      	cmp	r4, #0
 8002f7a:	d001      	beq.n	8002f80 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8002f7c:	f7ff fd9c 	bl	8002ab8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002f80:	4b16      	ldr	r3, [pc, #88]	; (8002fdc <xTaskResumeAll+0xe8>)
 8002f82:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002f84:	2c00      	cmp	r4, #0
 8002f86:	d10a      	bne.n	8002f9e <xTaskResumeAll+0xaa>
				if( xYieldPending != pdFALSE )
 8002f88:	4b13      	ldr	r3, [pc, #76]	; (8002fd8 <xTaskResumeAll+0xe4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d014      	beq.n	8002fba <xTaskResumeAll+0xc6>
					taskYIELD_IF_USING_PREEMPTION();
 8002f90:	f7ff fcda 	bl	8002948 <vPortYield>
						xAlreadyYielded = pdTRUE;
 8002f94:	2401      	movs	r4, #1
 8002f96:	e7c2      	b.n	8002f1e <xTaskResumeAll+0x2a>
							--uxPendedCounts;
 8002f98:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002f9a:	2c00      	cmp	r4, #0
 8002f9c:	d007      	beq.n	8002fae <xTaskResumeAll+0xba>
							if( xTaskIncrementTick() != pdFALSE )
 8002f9e:	f7ff ff1b 	bl	8002dd8 <xTaskIncrementTick>
 8002fa2:	2800      	cmp	r0, #0
 8002fa4:	d0f8      	beq.n	8002f98 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <xTaskResumeAll+0xe4>)
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	e7f4      	b.n	8002f98 <xTaskResumeAll+0xa4>
						uxPendedTicks = 0;
 8002fae:	2200      	movs	r2, #0
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <xTaskResumeAll+0xe8>)
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	e7e8      	b.n	8002f88 <xTaskResumeAll+0x94>
BaseType_t xAlreadyYielded = pdFALSE;
 8002fb6:	2400      	movs	r4, #0
 8002fb8:	e7b1      	b.n	8002f1e <xTaskResumeAll+0x2a>
 8002fba:	2400      	movs	r4, #0
 8002fbc:	e7af      	b.n	8002f1e <xTaskResumeAll+0x2a>
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	20000194 	.word	0x20000194
 8002fc4:	2000018c 	.word	0x2000018c
 8002fc8:	200001d4 	.word	0x200001d4
 8002fcc:	2000019c 	.word	0x2000019c
 8002fd0:	20000100 	.word	0x20000100
 8002fd4:	200000f4 	.word	0x200000f4
 8002fd8:	20000204 	.word	0x20000204
 8002fdc:	20000190 	.word	0x20000190

08002fe0 <vTaskDelay>:
	{
 8002fe0:	b510      	push	{r4, lr}
 8002fe2:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002fe4:	d00e      	beq.n	8003004 <vTaskDelay+0x24>
			configASSERT( uxSchedulerSuspended == 0 );
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <vTaskDelay+0x30>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <vTaskDelay+0x12>
 8002fee:	b672      	cpsid	i
 8002ff0:	e7fe      	b.n	8002ff0 <vTaskDelay+0x10>
			vTaskSuspendAll();
 8002ff2:	f7ff fee9 	bl	8002dc8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	0020      	movs	r0, r4
 8002ffa:	f7ff fe49 	bl	8002c90 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002ffe:	f7ff ff79 	bl	8002ef4 <xTaskResumeAll>
 8003002:	e000      	b.n	8003006 <vTaskDelay+0x26>
	BaseType_t xAlreadyYielded = pdFALSE;
 8003004:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 8003006:	2800      	cmp	r0, #0
 8003008:	d101      	bne.n	800300e <vTaskDelay+0x2e>
			portYIELD_WITHIN_API();
 800300a:	f7ff fc9d 	bl	8002948 <vPortYield>
	}
 800300e:	bd10      	pop	{r4, pc}
 8003010:	20000194 	.word	0x20000194

08003014 <vTaskSwitchContext>:
{
 8003014:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003016:	4b23      	ldr	r3, [pc, #140]	; (80030a4 <vTaskSwitchContext+0x90>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d11c      	bne.n	8003058 <vTaskSwitchContext+0x44>
		xYieldPending = pdFALSE;
 800301e:	2200      	movs	r2, #0
 8003020:	4b21      	ldr	r3, [pc, #132]	; (80030a8 <vTaskSwitchContext+0x94>)
 8003022:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8003024:	4b21      	ldr	r3, [pc, #132]	; (80030ac <vTaskSwitchContext+0x98>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	429a      	cmp	r2, r3
 8003030:	d805      	bhi.n	800303e <vTaskSwitchContext+0x2a>
 8003032:	4b1e      	ldr	r3, [pc, #120]	; (80030ac <vTaskSwitchContext+0x98>)
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	6819      	ldr	r1, [r3, #0]
 8003038:	3134      	adds	r1, #52	; 0x34
 800303a:	f001 f9ef 	bl	800441c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800303e:	4b1c      	ldr	r3, [pc, #112]	; (80030b0 <vTaskSwitchContext+0x9c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	009a      	lsls	r2, r3, #2
 8003044:	18d2      	adds	r2, r2, r3
 8003046:	0091      	lsls	r1, r2, #2
 8003048:	4a1a      	ldr	r2, [pc, #104]	; (80030b4 <vTaskSwitchContext+0xa0>)
 800304a:	588a      	ldr	r2, [r1, r2]
 800304c:	2a00      	cmp	r2, #0
 800304e:	d109      	bne.n	8003064 <vTaskSwitchContext+0x50>
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <vTaskSwitchContext+0x4c>
 8003054:	3b01      	subs	r3, #1
 8003056:	e7f4      	b.n	8003042 <vTaskSwitchContext+0x2e>
		xYieldPending = pdTRUE;
 8003058:	2201      	movs	r2, #1
 800305a:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <vTaskSwitchContext+0x94>)
 800305c:	601a      	str	r2, [r3, #0]
}
 800305e:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003060:	b672      	cpsid	i
 8003062:	e7fe      	b.n	8003062 <vTaskSwitchContext+0x4e>
 8003064:	4813      	ldr	r0, [pc, #76]	; (80030b4 <vTaskSwitchContext+0xa0>)
 8003066:	009a      	lsls	r2, r3, #2
 8003068:	1841      	adds	r1, r0, r1
 800306a:	684c      	ldr	r4, [r1, #4]
 800306c:	6864      	ldr	r4, [r4, #4]
 800306e:	604c      	str	r4, [r1, #4]
 8003070:	18d2      	adds	r2, r2, r3
 8003072:	0091      	lsls	r1, r2, #2
 8003074:	3108      	adds	r1, #8
 8003076:	1840      	adds	r0, r0, r1
 8003078:	4284      	cmp	r4, r0
 800307a:	d00b      	beq.n	8003094 <vTaskSwitchContext+0x80>
 800307c:	009a      	lsls	r2, r3, #2
 800307e:	18d2      	adds	r2, r2, r3
 8003080:	0091      	lsls	r1, r2, #2
 8003082:	4a0c      	ldr	r2, [pc, #48]	; (80030b4 <vTaskSwitchContext+0xa0>)
 8003084:	1852      	adds	r2, r2, r1
 8003086:	6852      	ldr	r2, [r2, #4]
 8003088:	68d1      	ldr	r1, [r2, #12]
 800308a:	4a08      	ldr	r2, [pc, #32]	; (80030ac <vTaskSwitchContext+0x98>)
 800308c:	6011      	str	r1, [r2, #0]
 800308e:	4a08      	ldr	r2, [pc, #32]	; (80030b0 <vTaskSwitchContext+0x9c>)
 8003090:	6013      	str	r3, [r2, #0]
}
 8003092:	e7e4      	b.n	800305e <vTaskSwitchContext+0x4a>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003094:	6860      	ldr	r0, [r4, #4]
 8003096:	009a      	lsls	r2, r3, #2
 8003098:	18d2      	adds	r2, r2, r3
 800309a:	0091      	lsls	r1, r2, #2
 800309c:	4a05      	ldr	r2, [pc, #20]	; (80030b4 <vTaskSwitchContext+0xa0>)
 800309e:	1852      	adds	r2, r2, r1
 80030a0:	6050      	str	r0, [r2, #4]
 80030a2:	e7eb      	b.n	800307c <vTaskSwitchContext+0x68>
 80030a4:	20000194 	.word	0x20000194
 80030a8:	20000204 	.word	0x20000204
 80030ac:	200000f4 	.word	0x200000f4
 80030b0:	2000019c 	.word	0x2000019c
 80030b4:	20000100 	.word	0x20000100

080030b8 <uxTaskGetStackHighWaterMark>:
	{
 80030b8:	b510      	push	{r4, lr}
		pxTCB = prvGetTCBFromHandle( xTask );
 80030ba:	2800      	cmp	r0, #0
 80030bc:	d003      	beq.n	80030c6 <uxTaskGetStackHighWaterMark+0xe>
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80030be:	6b00      	ldr	r0, [r0, #48]	; 0x30
		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80030c0:	f7ff fcef 	bl	8002aa2 <prvTaskCheckFreeStackSpace>
	}
 80030c4:	bd10      	pop	{r4, pc}
		pxTCB = prvGetTCBFromHandle( xTask );
 80030c6:	4b01      	ldr	r3, [pc, #4]	; (80030cc <uxTaskGetStackHighWaterMark+0x14>)
 80030c8:	6818      	ldr	r0, [r3, #0]
 80030ca:	e7f8      	b.n	80030be <uxTaskGetStackHighWaterMark+0x6>
 80030cc:	200000f4 	.word	0x200000f4

080030d0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80030d0:	4b06      	ldr	r3, [pc, #24]	; (80030ec <xTaskGetSchedulerState+0x1c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030d8:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <xTaskGetSchedulerState+0x20>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d103      	bne.n	80030e8 <xTaskGetSchedulerState+0x18>
				xReturn = taskSCHEDULER_RUNNING;
 80030e0:	2002      	movs	r0, #2
	}
 80030e2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80030e4:	2001      	movs	r0, #1
 80030e6:	e7fc      	b.n	80030e2 <xTaskGetSchedulerState+0x12>
				xReturn = taskSCHEDULER_SUSPENDED;
 80030e8:	2000      	movs	r0, #0
		return xReturn;
 80030ea:	e7fa      	b.n	80030e2 <xTaskGetSchedulerState+0x12>
 80030ec:	200001e8 	.word	0x200001e8
 80030f0:	20000194 	.word	0x20000194

080030f4 <prvGetNumberOfParameters>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 80030f4:	0003      	movs	r3, r0
int8_t cParameters = 0;
BaseType_t xLastCharacterWasSpace = pdFALSE;
 80030f6:	2100      	movs	r1, #0
int8_t cParameters = 0;
 80030f8:	2000      	movs	r0, #0

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 80030fa:	e005      	b.n	8003108 <prvGetNumberOfParameters+0x14>
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
 80030fc:	2901      	cmp	r1, #1
 80030fe:	d002      	beq.n	8003106 <prvGetNumberOfParameters+0x12>
			{
				cParameters++;
 8003100:	3001      	adds	r0, #1
 8003102:	b240      	sxtb	r0, r0
				xLastCharacterWasSpace = pdTRUE;
 8003104:	2101      	movs	r1, #1
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
 8003106:	3301      	adds	r3, #1
	while( *pcCommandString != 0x00 )
 8003108:	781a      	ldrb	r2, [r3, #0]
 800310a:	2a00      	cmp	r2, #0
 800310c:	d003      	beq.n	8003116 <prvGetNumberOfParameters+0x22>
		if( ( *pcCommandString ) == ' ' )
 800310e:	2a20      	cmp	r2, #32
 8003110:	d0f4      	beq.n	80030fc <prvGetNumberOfParameters+0x8>
			xLastCharacterWasSpace = pdFALSE;
 8003112:	2100      	movs	r1, #0
 8003114:	e7f7      	b.n	8003106 <prvGetNumberOfParameters+0x12>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 8003116:	2901      	cmp	r1, #1
 8003118:	d000      	beq.n	800311c <prvGetNumberOfParameters+0x28>
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
}
 800311a:	4770      	bx	lr
		cParameters--;
 800311c:	3801      	subs	r0, #1
 800311e:	b240      	sxtb	r0, r0
 8003120:	e7fb      	b.n	800311a <prvGetNumberOfParameters+0x26>
	...

08003124 <prvHelpCommand>:
{
 8003124:	b570      	push	{r4, r5, r6, lr}
 8003126:	000a      	movs	r2, r1
	if( pxCommand == NULL )
 8003128:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <prvHelpCommand+0x30>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00b      	beq.n	8003148 <prvHelpCommand+0x24>
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 8003130:	4c08      	ldr	r4, [pc, #32]	; (8003154 <prvHelpCommand+0x30>)
 8003132:	6825      	ldr	r5, [r4, #0]
 8003134:	682b      	ldr	r3, [r5, #0]
 8003136:	6859      	ldr	r1, [r3, #4]
 8003138:	f002 fab3 	bl	80056a2 <strncpy>
	pxCommand = pxCommand->pxNext;
 800313c:	686b      	ldr	r3, [r5, #4]
 800313e:	6023      	str	r3, [r4, #0]
	if( pxCommand == NULL )
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <prvHelpCommand+0x2c>
		xReturn = pdTRUE;
 8003144:	2001      	movs	r0, #1
}
 8003146:	bd70      	pop	{r4, r5, r6, pc}
		pxCommand = &xRegisteredCommands;
 8003148:	4903      	ldr	r1, [pc, #12]	; (8003158 <prvHelpCommand+0x34>)
 800314a:	4b02      	ldr	r3, [pc, #8]	; (8003154 <prvHelpCommand+0x30>)
 800314c:	6019      	str	r1, [r3, #0]
 800314e:	e7ef      	b.n	8003130 <prvHelpCommand+0xc>
		xReturn = pdFALSE;
 8003150:	2000      	movs	r0, #0
 8003152:	e7f8      	b.n	8003146 <prvHelpCommand+0x22>
 8003154:	2000040c 	.word	0x2000040c
 8003158:	20000008 	.word	0x20000008

0800315c <FreeRTOS_CLIRegisterCommand>:
{
 800315c:	b570      	push	{r4, r5, r6, lr}
 800315e:	1e05      	subs	r5, r0, #0
	configASSERT( pxCommandToRegister );
 8003160:	d006      	beq.n	8003170 <FreeRTOS_CLIRegisterCommand+0x14>
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 8003162:	2008      	movs	r0, #8
 8003164:	f7ff fc86 	bl	8002a74 <pvPortMalloc>
 8003168:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800316a:	d103      	bne.n	8003174 <FreeRTOS_CLIRegisterCommand+0x18>
 800316c:	b672      	cpsid	i
 800316e:	e7fe      	b.n	800316e <FreeRTOS_CLIRegisterCommand+0x12>
	configASSERT( pxCommandToRegister );
 8003170:	b672      	cpsid	i
 8003172:	e7fe      	b.n	8003172 <FreeRTOS_CLIRegisterCommand+0x16>
		taskENTER_CRITICAL();
 8003174:	f7ff fbf4 	bl	8002960 <vPortEnterCritical>
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 8003178:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
 800317a:	2300      	movs	r3, #0
 800317c:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 800317e:	4b04      	ldr	r3, [pc, #16]	; (8003190 <FreeRTOS_CLIRegisterCommand+0x34>)
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
 8003184:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
 8003186:	f7ff fbf7 	bl	8002978 <vPortExitCritical>
}
 800318a:	2001      	movs	r0, #1
 800318c:	bd70      	pop	{r4, r5, r6, pc}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	20000004 	.word	0x20000004

08003194 <FreeRTOS_CLIProcessCommand>:
{
 8003194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003196:	b083      	sub	sp, #12
 8003198:	0005      	movs	r5, r0
 800319a:	9100      	str	r1, [sp, #0]
 800319c:	9201      	str	r2, [sp, #4]
	if( pxCommand == NULL )
 800319e:	4b2c      	ldr	r3, [pc, #176]	; (8003250 <FreeRTOS_CLIProcessCommand+0xbc>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d016      	beq.n	80031d4 <FreeRTOS_CLIProcessCommand+0x40>
BaseType_t xReturn = pdTRUE;
 80031a6:	2401      	movs	r4, #1
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 80031a8:	4b29      	ldr	r3, [pc, #164]	; (8003250 <FreeRTOS_CLIProcessCommand+0xbc>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <FreeRTOS_CLIProcessCommand+0x20>
 80031b0:	2c00      	cmp	r4, #0
 80031b2:	d03d      	beq.n	8003230 <FreeRTOS_CLIProcessCommand+0x9c>
	else if( pxCommand != NULL )
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d044      	beq.n	8003242 <FreeRTOS_CLIProcessCommand+0xae>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	002a      	movs	r2, r5
 80031be:	9901      	ldr	r1, [sp, #4]
 80031c0:	9800      	ldr	r0, [sp, #0]
 80031c2:	4798      	blx	r3
 80031c4:	1e04      	subs	r4, r0, #0
		if( xReturn == pdFALSE )
 80031c6:	d102      	bne.n	80031ce <FreeRTOS_CLIProcessCommand+0x3a>
			pxCommand = NULL;
 80031c8:	2200      	movs	r2, #0
 80031ca:	4b21      	ldr	r3, [pc, #132]	; (8003250 <FreeRTOS_CLIProcessCommand+0xbc>)
 80031cc:	601a      	str	r2, [r3, #0]
}
 80031ce:	0020      	movs	r0, r4
 80031d0:	b003      	add	sp, #12
 80031d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80031d4:	4a1f      	ldr	r2, [pc, #124]	; (8003254 <FreeRTOS_CLIProcessCommand+0xc0>)
 80031d6:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <FreeRTOS_CLIProcessCommand+0xbc>)
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	e009      	b.n	80031f0 <FreeRTOS_CLIProcessCommand+0x5c>
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 80031dc:	0002      	movs	r2, r0
 80031de:	0021      	movs	r1, r4
 80031e0:	0028      	movs	r0, r5
 80031e2:	f002 fa4d 	bl	8005680 <strncmp>
 80031e6:	2800      	cmp	r0, #0
 80031e8:	d011      	beq.n	800320e <FreeRTOS_CLIProcessCommand+0x7a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	4b18      	ldr	r3, [pc, #96]	; (8003250 <FreeRTOS_CLIProcessCommand+0xbc>)
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	4b17      	ldr	r3, [pc, #92]	; (8003250 <FreeRTOS_CLIProcessCommand+0xbc>)
 80031f2:	681f      	ldr	r7, [r3, #0]
 80031f4:	2f00      	cmp	r7, #0
 80031f6:	d017      	beq.n	8003228 <FreeRTOS_CLIProcessCommand+0x94>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 80031f8:	683e      	ldr	r6, [r7, #0]
 80031fa:	6834      	ldr	r4, [r6, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 80031fc:	0020      	movs	r0, r4
 80031fe:	f7fc ff83 	bl	8000108 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 8003202:	5c2b      	ldrb	r3, [r5, r0]
 8003204:	2b20      	cmp	r3, #32
 8003206:	d0e9      	beq.n	80031dc <FreeRTOS_CLIProcessCommand+0x48>
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1ee      	bne.n	80031ea <FreeRTOS_CLIProcessCommand+0x56>
 800320c:	e7e6      	b.n	80031dc <FreeRTOS_CLIProcessCommand+0x48>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800320e:	240c      	movs	r4, #12
 8003210:	5734      	ldrsb	r4, [r6, r4]
 8003212:	2c00      	cmp	r4, #0
 8003214:	db0a      	blt.n	800322c <FreeRTOS_CLIProcessCommand+0x98>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 8003216:	0028      	movs	r0, r5
 8003218:	f7ff ff6c 	bl	80030f4 <prvGetNumberOfParameters>
 800321c:	4284      	cmp	r4, r0
 800321e:	d001      	beq.n	8003224 <FreeRTOS_CLIProcessCommand+0x90>
							xReturn = pdFALSE;
 8003220:	2400      	movs	r4, #0
 8003222:	e7c1      	b.n	80031a8 <FreeRTOS_CLIProcessCommand+0x14>
BaseType_t xReturn = pdTRUE;
 8003224:	2401      	movs	r4, #1
 8003226:	e7bf      	b.n	80031a8 <FreeRTOS_CLIProcessCommand+0x14>
 8003228:	2401      	movs	r4, #1
 800322a:	e7bd      	b.n	80031a8 <FreeRTOS_CLIProcessCommand+0x14>
 800322c:	2401      	movs	r4, #1
 800322e:	e7bb      	b.n	80031a8 <FreeRTOS_CLIProcessCommand+0x14>
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8003230:	9a01      	ldr	r2, [sp, #4]
 8003232:	4909      	ldr	r1, [pc, #36]	; (8003258 <FreeRTOS_CLIProcessCommand+0xc4>)
 8003234:	9800      	ldr	r0, [sp, #0]
 8003236:	f002 fa34 	bl	80056a2 <strncpy>
		pxCommand = NULL;
 800323a:	2200      	movs	r2, #0
 800323c:	4b04      	ldr	r3, [pc, #16]	; (8003250 <FreeRTOS_CLIProcessCommand+0xbc>)
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	e7c5      	b.n	80031ce <FreeRTOS_CLIProcessCommand+0x3a>
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8003242:	9a01      	ldr	r2, [sp, #4]
 8003244:	4905      	ldr	r1, [pc, #20]	; (800325c <FreeRTOS_CLIProcessCommand+0xc8>)
 8003246:	9800      	ldr	r0, [sp, #0]
 8003248:	f002 fa2b 	bl	80056a2 <strncpy>
		xReturn = pdFALSE;
 800324c:	2400      	movs	r4, #0
	return xReturn;
 800324e:	e7be      	b.n	80031ce <FreeRTOS_CLIProcessCommand+0x3a>
 8003250:	20000408 	.word	0x20000408
 8003254:	20000008 	.word	0x20000008
 8003258:	08005db8 	.word	0x08005db8
 800325c:	08005e10 	.word	0x08005e10

08003260 <FreeRTOS_CLIGetOutputBuffer>:
}
 8003260:	4800      	ldr	r0, [pc, #0]	; (8003264 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 8003262:	4770      	bx	lr
 8003264:	20000208 	.word	0x20000208

08003268 <FreeRTOS_CLIGetParameter>:
{
 8003268:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	6013      	str	r3, [r2, #0]
UBaseType_t uxParametersFound = 0;
 800326e:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 8003270:	e00f      	b.n	8003292 <FreeRTOS_CLIGetParameter+0x2a>
			pcCommandString++;
 8003272:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8003274:	7803      	ldrb	r3, [r0, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <FreeRTOS_CLIGetParameter+0x1a>
 800327a:	2b20      	cmp	r3, #32
 800327c:	d1f9      	bne.n	8003272 <FreeRTOS_CLIGetParameter+0xa>
 800327e:	e000      	b.n	8003282 <FreeRTOS_CLIGetParameter+0x1a>
			pcCommandString++;
 8003280:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8003282:	7803      	ldrb	r3, [r0, #0]
 8003284:	2b20      	cmp	r3, #32
 8003286:	d0fb      	beq.n	8003280 <FreeRTOS_CLIGetParameter+0x18>
		if( *pcCommandString != 0x00 )
 8003288:	2b00      	cmp	r3, #0
 800328a:	d016      	beq.n	80032ba <FreeRTOS_CLIGetParameter+0x52>
			uxParametersFound++;
 800328c:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800328e:	42a1      	cmp	r1, r4
 8003290:	d011      	beq.n	80032b6 <FreeRTOS_CLIGetParameter+0x4e>
	while( uxParametersFound < uxWantedParameter )
 8003292:	428c      	cmp	r4, r1
 8003294:	d3ee      	bcc.n	8003274 <FreeRTOS_CLIGetParameter+0xc>
const char *pcReturn = NULL;
 8003296:	2000      	movs	r0, #0
}
 8003298:	bd10      	pop	{r4, pc}
					( *pxParameterStringLength )++;
 800329a:	6813      	ldr	r3, [r2, #0]
 800329c:	3301      	adds	r3, #1
 800329e:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 80032a0:	3101      	adds	r1, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80032a2:	780b      	ldrb	r3, [r1, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <FreeRTOS_CLIGetParameter+0x44>
 80032a8:	2b20      	cmp	r3, #32
 80032aa:	d1f6      	bne.n	800329a <FreeRTOS_CLIGetParameter+0x32>
				if( *pxParameterStringLength == 0 )
 80032ac:	6813      	ldr	r3, [r2, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f2      	bne.n	8003298 <FreeRTOS_CLIGetParameter+0x30>
					pcReturn = NULL;
 80032b2:	2000      	movs	r0, #0
	return pcReturn;
 80032b4:	e7f0      	b.n	8003298 <FreeRTOS_CLIGetParameter+0x30>
 80032b6:	0001      	movs	r1, r0
 80032b8:	e7f3      	b.n	80032a2 <FreeRTOS_CLIGetParameter+0x3a>
const char *pcReturn = NULL;
 80032ba:	2000      	movs	r0, #0
 80032bc:	e7ec      	b.n	8003298 <FreeRTOS_CLIGetParameter+0x30>
	...

080032c0 <prvQuitStromPiConsole>:
static portBASE_TYPE prvQuitStromPiConsole( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
const int8_t *const pcMessage = ( int8_t * ) "";

	( void ) pcCommandString;
	configASSERT( pcWriteBuffer );
 80032c0:	2800      	cmp	r0, #0
 80032c2:	d101      	bne.n	80032c8 <prvQuitStromPiConsole+0x8>
 80032c4:	b672      	cpsid	i
 80032c6:	e7fe      	b.n	80032c6 <prvQuitStromPiConsole+0x6>

	/* This function assumes the buffer length is adequate. */
	( void ) xWriteBufferLen;

	console_start = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	4a02      	ldr	r2, [pc, #8]	; (80032d4 <prvQuitStromPiConsole+0x14>)
 80032cc:	7013      	strb	r3, [r2, #0]

	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessage );
 80032ce:	7003      	strb	r3, [r0, #0]

	return pdFALSE;
}
 80032d0:	2000      	movs	r0, #0
 80032d2:	4770      	bx	lr
 80032d4:	20000477 	.word	0x20000477

080032d8 <prvStartStromPiConsole>:
{
 80032d8:	b510      	push	{r4, lr}
	configASSERT( pcWriteBuffer );
 80032da:	2800      	cmp	r0, #0
 80032dc:	d101      	bne.n	80032e2 <prvStartStromPiConsole+0xa>
 80032de:	b672      	cpsid	i
 80032e0:	e7fe      	b.n	80032e0 <prvStartStromPiConsole+0x8>
	console_start = 1;
 80032e2:	2201      	movs	r2, #1
 80032e4:	4b03      	ldr	r3, [pc, #12]	; (80032f4 <prvStartStromPiConsole+0x1c>)
 80032e6:	701a      	strb	r2, [r3, #0]
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessage );
 80032e8:	32dc      	adds	r2, #220	; 0xdc
 80032ea:	4903      	ldr	r1, [pc, #12]	; (80032f8 <prvStartStromPiConsole+0x20>)
 80032ec:	f002 f8d2 	bl	8005494 <memcpy>
}
 80032f0:	2000      	movs	r0, #0
 80032f2:	bd10      	pop	{r4, pc}
 80032f4:	20000477 	.word	0x20000477
 80032f8:	08006608 	.word	0x08006608

080032fc <prvDateRPi>:
 * It uses the command_order=1 flag to bypass a deactivated console_output to communicate directly to the Script executed by the Raspberry Pi
 *
 * ***/

static portBASE_TYPE prvDateRPi( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 80032fc:	b530      	push	{r4, r5, lr}
 80032fe:	b087      	sub	sp, #28
 8003300:	1e04      	subs	r4, r0, #0
	( void ) pcCommandString;
	configASSERT( pcWriteBuffer );
 8003302:	d101      	bne.n	8003308 <prvDateRPi+0xc>
 8003304:	b672      	cpsid	i
 8003306:	e7fe      	b.n	8003306 <prvDateRPi+0xa>
	uint32_t date;

	RTC_TimeTypeDef stimestructureget;
	RTC_DateTypeDef sdatestructureget;

	HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8003308:	4d10      	ldr	r5, [pc, #64]	; (800334c <prvDateRPi+0x50>)
 800330a:	2200      	movs	r2, #0
 800330c:	a901      	add	r1, sp, #4
 800330e:	0028      	movs	r0, r5
 8003310:	f7fe fcf4 	bl	8001cfc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 8003314:	2200      	movs	r2, #0
 8003316:	4669      	mov	r1, sp
 8003318:	0028      	movs	r0, r5
 800331a:	f7fe fd1b 	bl	8001d54 <HAL_RTC_GetDate>

	date = sdatestructureget.Year * 10000 + sdatestructureget.Month * 100 + sdatestructureget.Date;
 800331e:	466b      	mov	r3, sp
 8003320:	78db      	ldrb	r3, [r3, #3]
 8003322:	4a0b      	ldr	r2, [pc, #44]	; (8003350 <prvDateRPi+0x54>)
 8003324:	435a      	muls	r2, r3
 8003326:	466b      	mov	r3, sp
 8003328:	7859      	ldrb	r1, [r3, #1]
 800332a:	2364      	movs	r3, #100	; 0x64
 800332c:	434b      	muls	r3, r1
 800332e:	18d2      	adds	r2, r2, r3
 8003330:	466b      	mov	r3, sp
 8003332:	789b      	ldrb	r3, [r3, #2]
 8003334:	18d2      	adds	r2, r2, r3

	command_order = 1;
 8003336:	2101      	movs	r1, #1
 8003338:	4b06      	ldr	r3, [pc, #24]	; (8003354 <prvDateRPi+0x58>)
 800333a:	7019      	strb	r1, [r3, #0]

	sprintf(( char * ) pcWriteBuffer, "%lu" ,date);
 800333c:	4906      	ldr	r1, [pc, #24]	; (8003358 <prvDateRPi+0x5c>)
 800333e:	0020      	movs	r0, r4
 8003340:	f002 f974 	bl	800562c <siprintf>

	return pdFALSE;
}
 8003344:	2000      	movs	r0, #0
 8003346:	b007      	add	sp, #28
 8003348:	bd30      	pop	{r4, r5, pc}
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	20000574 	.word	0x20000574
 8003350:	00002710 	.word	0x00002710
 8003354:	20000476 	.word	0x20000476
 8003358:	08006268 	.word	0x08006268

0800335c <prvTimeRPi>:
{
 800335c:	b570      	push	{r4, r5, r6, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8003362:	d101      	bne.n	8003368 <prvTimeRPi+0xc>
 8003364:	b672      	cpsid	i
 8003366:	e7fe      	b.n	8003366 <prvTimeRPi+0xa>
	HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8003368:	ad01      	add	r5, sp, #4
 800336a:	4e0f      	ldr	r6, [pc, #60]	; (80033a8 <prvTimeRPi+0x4c>)
 800336c:	2200      	movs	r2, #0
 800336e:	0029      	movs	r1, r5
 8003370:	0030      	movs	r0, r6
 8003372:	f7fe fcc3 	bl	8001cfc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 8003376:	2200      	movs	r2, #0
 8003378:	4669      	mov	r1, sp
 800337a:	0030      	movs	r0, r6
 800337c:	f7fe fcea 	bl	8001d54 <HAL_RTC_GetDate>
	time = stimestructureget.Hours * 10000 + stimestructureget.Minutes * 100 + stimestructureget.Seconds;
 8003380:	782b      	ldrb	r3, [r5, #0]
 8003382:	4a0a      	ldr	r2, [pc, #40]	; (80033ac <prvTimeRPi+0x50>)
 8003384:	435a      	muls	r2, r3
 8003386:	7869      	ldrb	r1, [r5, #1]
 8003388:	2364      	movs	r3, #100	; 0x64
 800338a:	434b      	muls	r3, r1
 800338c:	18d2      	adds	r2, r2, r3
 800338e:	78ab      	ldrb	r3, [r5, #2]
 8003390:	18d2      	adds	r2, r2, r3
	command_order = 1;
 8003392:	2101      	movs	r1, #1
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <prvTimeRPi+0x54>)
 8003396:	7019      	strb	r1, [r3, #0]
	sprintf(( char * ) pcWriteBuffer, "%lu" , time);
 8003398:	4906      	ldr	r1, [pc, #24]	; (80033b4 <prvTimeRPi+0x58>)
 800339a:	0020      	movs	r0, r4
 800339c:	f002 f946 	bl	800562c <siprintf>
}
 80033a0:	2000      	movs	r0, #0
 80033a2:	b006      	add	sp, #24
 80033a4:	bd70      	pop	{r4, r5, r6, pc}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	20000574 	.word	0x20000574
 80033ac:	00002710 	.word	0x00002710
 80033b0:	20000476 	.word	0x20000476
 80033b4:	08006268 	.word	0x08006268

080033b8 <prvTimeOutput>:
{
 80033b8:	b570      	push	{r4, r5, r6, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	1e05      	subs	r5, r0, #0
	configASSERT( pcWriteBuffer );
 80033be:	d101      	bne.n	80033c4 <prvTimeOutput+0xc>
 80033c0:	b672      	cpsid	i
 80033c2:	e7fe      	b.n	80033c2 <prvTimeOutput+0xa>
	HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 80033c4:	ac03      	add	r4, sp, #12
 80033c6:	4e0b      	ldr	r6, [pc, #44]	; (80033f4 <prvTimeOutput+0x3c>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	0021      	movs	r1, r4
 80033cc:	0030      	movs	r0, r6
 80033ce:	f7fe fc95 	bl	8001cfc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 80033d2:	2200      	movs	r2, #0
 80033d4:	a902      	add	r1, sp, #8
 80033d6:	0030      	movs	r0, r6
 80033d8:	f7fe fcbc 	bl	8001d54 <HAL_RTC_GetDate>
	sprintf(( char * ) pcWriteBuffer,"%02d:%02d:%02d",stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds);
 80033dc:	7822      	ldrb	r2, [r4, #0]
 80033de:	7863      	ldrb	r3, [r4, #1]
 80033e0:	78a1      	ldrb	r1, [r4, #2]
 80033e2:	9100      	str	r1, [sp, #0]
 80033e4:	4904      	ldr	r1, [pc, #16]	; (80033f8 <prvTimeOutput+0x40>)
 80033e6:	0028      	movs	r0, r5
 80033e8:	f002 f920 	bl	800562c <siprintf>
}
 80033ec:	2000      	movs	r0, #0
 80033ee:	b008      	add	sp, #32
 80033f0:	bd70      	pop	{r4, r5, r6, pc}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	20000574 	.word	0x20000574
 80033f8:	080066e8 	.word	0x080066e8

080033fc <prvPowerOff>:
{
 80033fc:	b510      	push	{r4, lr}
 80033fe:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8003400:	d101      	bne.n	8003406 <prvPowerOff+0xa>
 8003402:	b672      	cpsid	i
 8003404:	e7fe      	b.n	8003404 <prvPowerOff+0x8>
	poweroff_flag = 1;
 8003406:	2201      	movs	r2, #1
 8003408:	4b05      	ldr	r3, [pc, #20]	; (8003420 <prvPowerOff+0x24>)
 800340a:	701a      	strb	r2, [r3, #0]
	ShutdownRPi();
 800340c:	f001 f854 	bl	80044b8 <ShutdownRPi>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessage );
 8003410:	221b      	movs	r2, #27
 8003412:	4904      	ldr	r1, [pc, #16]	; (8003424 <prvPowerOff+0x28>)
 8003414:	0020      	movs	r0, r4
 8003416:	f002 f83d 	bl	8005494 <memcpy>
}
 800341a:	2000      	movs	r0, #0
 800341c:	bd10      	pop	{r4, pc}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	200004b1 	.word	0x200004b1
 8003424:	080062c0 	.word	0x080062c0

08003428 <prvShowStatus>:
	pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE prvShowStatus ( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 8003428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800342a:	b08f      	sub	sp, #60	; 0x3c
 800342c:	1e04      	subs	r4, r0, #0
	( void ) pcCommandString;
	configASSERT( pcWriteBuffer );
 800342e:	d01b      	beq.n	8003468 <prvShowStatus+0x40>
	( void ) xWriteBufferLen;

	RTC_TimeTypeDef stimestructureget;
	RTC_DateTypeDef sdatestructureget;

	HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8003430:	ad09      	add	r5, sp, #36	; 0x24
 8003432:	4fd3      	ldr	r7, [pc, #844]	; (8003780 <prvShowStatus+0x358>)
 8003434:	2200      	movs	r2, #0
 8003436:	0029      	movs	r1, r5
 8003438:	0038      	movs	r0, r7
 800343a:	f7fe fc5f 	bl	8001cfc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 800343e:	ae08      	add	r6, sp, #32
 8003440:	2200      	movs	r2, #0
 8003442:	0031      	movs	r1, r6
 8003444:	0038      	movs	r0, r7
 8003446:	f7fe fc85 	bl	8001d54 <HAL_RTC_GetDate>

	sprintf(( char * ) pcWriteBuffer, "\r\n Time: %02d:%02d:%02d", stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds);
 800344a:	782a      	ldrb	r2, [r5, #0]
 800344c:	786b      	ldrb	r3, [r5, #1]
 800344e:	78a9      	ldrb	r1, [r5, #2]
 8003450:	9100      	str	r1, [sp, #0]
 8003452:	49cc      	ldr	r1, [pc, #816]	; (8003784 <prvShowStatus+0x35c>)
 8003454:	0020      	movs	r0, r4
 8003456:	f002 f8e9 	bl	800562c <siprintf>

	char temp_message[20];

	switch (sdatestructureget.WeekDay)
 800345a:	7833      	ldrb	r3, [r6, #0]
 800345c:	2b07      	cmp	r3, #7
 800345e:	d80d      	bhi.n	800347c <prvShowStatus+0x54>
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4ac9      	ldr	r2, [pc, #804]	; (8003788 <prvShowStatus+0x360>)
 8003464:	58d3      	ldr	r3, [r2, r3]
 8003466:	469f      	mov	pc, r3
	configASSERT( pcWriteBuffer );
 8003468:	b672      	cpsid	i
 800346a:	e7fe      	b.n	800346a <prvShowStatus+0x42>
		{
			case 1: strcpy(temp_message, "Monday"); break;
 800346c:	aa03      	add	r2, sp, #12
 800346e:	4bc7      	ldr	r3, [pc, #796]	; (800378c <prvShowStatus+0x364>)
 8003470:	6819      	ldr	r1, [r3, #0]
 8003472:	9103      	str	r1, [sp, #12]
 8003474:	8899      	ldrh	r1, [r3, #4]
 8003476:	8091      	strh	r1, [r2, #4]
 8003478:	799b      	ldrb	r3, [r3, #6]
 800347a:	7193      	strb	r3, [r2, #6]
			case 5: strcpy(temp_message, "Friday"); break;
			case 6: strcpy(temp_message, "Saturday"); break;
			case 7: strcpy(temp_message, "Sunday"); break;
		}

	sprintf(( char * ) pcWriteBuffer + strlen(( char * ) pcWriteBuffer), "\r\n Date: %s %02d.%02d.20%02d\r\n", temp_message, sdatestructureget.Date, sdatestructureget.Month, sdatestructureget.Year);
 800347c:	0020      	movs	r0, r4
 800347e:	f7fc fe43 	bl	8000108 <strlen>
 8003482:	aa08      	add	r2, sp, #32
 8003484:	7893      	ldrb	r3, [r2, #2]
 8003486:	7851      	ldrb	r1, [r2, #1]
 8003488:	78d2      	ldrb	r2, [r2, #3]
 800348a:	1820      	adds	r0, r4, r0
 800348c:	9201      	str	r2, [sp, #4]
 800348e:	9100      	str	r1, [sp, #0]
 8003490:	aa03      	add	r2, sp, #12
 8003492:	49bf      	ldr	r1, [pc, #764]	; (8003790 <prvShowStatus+0x368>)
 8003494:	f002 f8ca 	bl	800562c <siprintf>


	switch(modus)
 8003498:	4bbe      	ldr	r3, [pc, #760]	; (8003794 <prvShowStatus+0x36c>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b02      	cmp	r3, #2
 800349e:	d100      	bne.n	80034a2 <prvShowStatus+0x7a>
 80034a0:	e096      	b.n	80035d0 <prvShowStatus+0x1a8>
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	2a02      	cmp	r2, #2
 80034a6:	d900      	bls.n	80034aa <prvShowStatus+0x82>
 80034a8:	e085      	b.n	80035b6 <prvShowStatus+0x18e>
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d106      	bne.n	80034bc <prvShowStatus+0x94>
	{
	case 1:	strcpy(temp_message, "mUSB -> Wide"); break;
 80034ae:	ab03      	add	r3, sp, #12
 80034b0:	4ab9      	ldr	r2, [pc, #740]	; (8003798 <prvShowStatus+0x370>)
 80034b2:	ca23      	ldmia	r2!, {r0, r1, r5}
 80034b4:	c323      	stmia	r3!, {r0, r1, r5}
 80034b6:	0019      	movs	r1, r3
 80034b8:	7813      	ldrb	r3, [r2, #0]
 80034ba:	700b      	strb	r3, [r1, #0]
	case 2: strcpy(temp_message, "Wide -> mUSB"); break;
	case 3:	strcpy(temp_message, "mUSB -> Battery"); break;
	case 4: strcpy(temp_message,"Wide -> Battery"); break;
	}
	sprintf(( char * ) pcWriteBuffer + strlen(( char * ) pcWriteBuffer), "\r\n StromPi-Mode: %s \r\n", temp_message);
 80034bc:	0020      	movs	r0, r4
 80034be:	f7fc fe23 	bl	8000108 <strlen>
 80034c2:	1820      	adds	r0, r4, r0
 80034c4:	aa03      	add	r2, sp, #12
 80034c6:	49b5      	ldr	r1, [pc, #724]	; (800379c <prvShowStatus+0x374>)
 80034c8:	f002 f8b0 	bl	800562c <siprintf>


	switch(alarm_enable)
 80034cc:	4bb4      	ldr	r3, [pc, #720]	; (80037a0 <prvShowStatus+0x378>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d100      	bne.n	80034d6 <prvShowStatus+0xae>
 80034d4:	e08c      	b.n	80035f0 <prvShowStatus+0x1c8>
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d100      	bne.n	80034dc <prvShowStatus+0xb4>
 80034da:	e091      	b.n	8003600 <prvShowStatus+0x1d8>
	{
	case 0:	strcpy(temp_message, "Disabled"); break;
	case 1: strcpy(temp_message, "Enabled"); break;
	}
	sprintf(( char * ) pcWriteBuffer + strlen(( char * ) pcWriteBuffer), "\r\n WakeUp-Alarm: %s ", temp_message);
 80034dc:	0020      	movs	r0, r4
 80034de:	f7fc fe13 	bl	8000108 <strlen>
 80034e2:	1820      	adds	r0, r4, r0
 80034e4:	aa03      	add	r2, sp, #12
 80034e6:	49af      	ldr	r1, [pc, #700]	; (80037a4 <prvShowStatus+0x37c>)
 80034e8:	f002 f8a0 	bl	800562c <siprintf>


	if(alarmTime == 1)
 80034ec:	4bae      	ldr	r3, [pc, #696]	; (80037a8 <prvShowStatus+0x380>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d100      	bne.n	80034f6 <prvShowStatus+0xce>
 80034f4:	e089      	b.n	800360a <prvShowStatus+0x1e2>
		strcpy(temp_message, "Time-Alarm");
	else if(alarmDate == 1)
 80034f6:	4bad      	ldr	r3, [pc, #692]	; (80037ac <prvShowStatus+0x384>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d100      	bne.n	8003500 <prvShowStatus+0xd8>
 80034fe:	e08e      	b.n	800361e <prvShowStatus+0x1f6>
		strcpy(temp_message, "Date-Alarm");
	else if(alarmWeekDay == 1)
 8003500:	4bab      	ldr	r3, [pc, #684]	; (80037b0 <prvShowStatus+0x388>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d100      	bne.n	800350a <prvShowStatus+0xe2>
 8003508:	e093      	b.n	8003632 <prvShowStatus+0x20a>
		strcpy(temp_message, "Weekday-Alarm");

	sprintf(( char * ) pcWriteBuffer + strlen(( char * ) pcWriteBuffer), "\r\n  Alarm-Mode: %s ", temp_message);
 800350a:	0020      	movs	r0, r4
 800350c:	f7fc fdfc 	bl	8000108 <strlen>
 8003510:	1820      	adds	r0, r4, r0
 8003512:	aa03      	add	r2, sp, #12
 8003514:	49a7      	ldr	r1, [pc, #668]	; (80037b4 <prvShowStatus+0x38c>)
 8003516:	f002 f889 	bl	800562c <siprintf>

	sprintf(( char * ) pcWriteBuffer + strlen(( char * ) pcWriteBuffer), "\r\n  Alarm-Time: %02d:%02d", alarm_hour, alarm_min);
 800351a:	0020      	movs	r0, r4
 800351c:	f7fc fdf4 	bl	8000108 <strlen>
 8003520:	4ba5      	ldr	r3, [pc, #660]	; (80037b8 <prvShowStatus+0x390>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	4aa5      	ldr	r2, [pc, #660]	; (80037bc <prvShowStatus+0x394>)
 8003526:	7812      	ldrb	r2, [r2, #0]
 8003528:	1820      	adds	r0, r4, r0
 800352a:	49a5      	ldr	r1, [pc, #660]	; (80037c0 <prvShowStatus+0x398>)
 800352c:	f002 f87e 	bl	800562c <siprintf>

	sprintf(( char * ) pcWriteBuffer + strlen(( char * ) pcWriteBuffer), "\r\n  Alarm-Date: %02d.%02d", alarm_day, alarm_month);
 8003530:	0020      	movs	r0, r4
 8003532:	f7fc fde9 	bl	8000108 <strlen>
 8003536:	4ba3      	ldr	r3, [pc, #652]	; (80037c4 <prvShowStatus+0x39c>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	4aa3      	ldr	r2, [pc, #652]	; (80037c8 <prvShowStatus+0x3a0>)
 800353c:	7812      	ldrb	r2, [r2, #0]
 800353e:	1820      	adds	r0, r4, r0
 8003540:	49a2      	ldr	r1, [pc, #648]	; (80037cc <prvShowStatus+0x3a4>)
 8003542:	f002 f873 	bl	800562c <siprintf>

	switch (alarm_weekday)
 8003546:	4ba2      	ldr	r3, [pc, #648]	; (80037d0 <prvShowStatus+0x3a8>)
 8003548:	781a      	ldrb	r2, [r3, #0]
 800354a:	2a07      	cmp	r2, #7
 800354c:	d900      	bls.n	8003550 <prvShowStatus+0x128>
 800354e:	e080      	b.n	8003652 <prvShowStatus+0x22a>
 8003550:	0093      	lsls	r3, r2, #2
 8003552:	4aa0      	ldr	r2, [pc, #640]	; (80037d4 <prvShowStatus+0x3ac>)
 8003554:	58d3      	ldr	r3, [r2, r3]
 8003556:	469f      	mov	pc, r3
			case 2: strcpy(temp_message, "Tuesday"); break;
 8003558:	aa03      	add	r2, sp, #12
 800355a:	4b9f      	ldr	r3, [pc, #636]	; (80037d8 <prvShowStatus+0x3b0>)
 800355c:	cb03      	ldmia	r3!, {r0, r1}
 800355e:	c203      	stmia	r2!, {r0, r1}
 8003560:	e78c      	b.n	800347c <prvShowStatus+0x54>
			case 3: strcpy(temp_message, "Wednesday"); break;
 8003562:	ab03      	add	r3, sp, #12
 8003564:	4a9d      	ldr	r2, [pc, #628]	; (80037dc <prvShowStatus+0x3b4>)
 8003566:	ca03      	ldmia	r2!, {r0, r1}
 8003568:	c303      	stmia	r3!, {r0, r1}
 800356a:	0019      	movs	r1, r3
 800356c:	8813      	ldrh	r3, [r2, #0]
 800356e:	800b      	strh	r3, [r1, #0]
 8003570:	e784      	b.n	800347c <prvShowStatus+0x54>
			case 4: strcpy(temp_message, "Thursday"); break;
 8003572:	ab03      	add	r3, sp, #12
 8003574:	4a9a      	ldr	r2, [pc, #616]	; (80037e0 <prvShowStatus+0x3b8>)
 8003576:	ca03      	ldmia	r2!, {r0, r1}
 8003578:	c303      	stmia	r3!, {r0, r1}
 800357a:	0019      	movs	r1, r3
 800357c:	7813      	ldrb	r3, [r2, #0]
 800357e:	700b      	strb	r3, [r1, #0]
 8003580:	e77c      	b.n	800347c <prvShowStatus+0x54>
			case 5: strcpy(temp_message, "Friday"); break;
 8003582:	aa03      	add	r2, sp, #12
 8003584:	4b97      	ldr	r3, [pc, #604]	; (80037e4 <prvShowStatus+0x3bc>)
 8003586:	6819      	ldr	r1, [r3, #0]
 8003588:	9103      	str	r1, [sp, #12]
 800358a:	8899      	ldrh	r1, [r3, #4]
 800358c:	8091      	strh	r1, [r2, #4]
 800358e:	799b      	ldrb	r3, [r3, #6]
 8003590:	7193      	strb	r3, [r2, #6]
 8003592:	e773      	b.n	800347c <prvShowStatus+0x54>
			case 6: strcpy(temp_message, "Saturday"); break;
 8003594:	ab03      	add	r3, sp, #12
 8003596:	4a94      	ldr	r2, [pc, #592]	; (80037e8 <prvShowStatus+0x3c0>)
 8003598:	ca03      	ldmia	r2!, {r0, r1}
 800359a:	c303      	stmia	r3!, {r0, r1}
 800359c:	0019      	movs	r1, r3
 800359e:	7813      	ldrb	r3, [r2, #0]
 80035a0:	700b      	strb	r3, [r1, #0]
 80035a2:	e76b      	b.n	800347c <prvShowStatus+0x54>
			case 7: strcpy(temp_message, "Sunday"); break;
 80035a4:	aa03      	add	r2, sp, #12
 80035a6:	4b91      	ldr	r3, [pc, #580]	; (80037ec <prvShowStatus+0x3c4>)
 80035a8:	6819      	ldr	r1, [r3, #0]
 80035aa:	9103      	str	r1, [sp, #12]
 80035ac:	8899      	ldrh	r1, [r3, #4]
 80035ae:	8091      	strh	r1, [r2, #4]
 80035b0:	799b      	ldrb	r3, [r3, #6]
 80035b2:	7193      	strb	r3, [r2, #6]
 80035b4:	e762      	b.n	800347c <prvShowStatus+0x54>
	switch(modus)
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d012      	beq.n	80035e0 <prvShowStatus+0x1b8>
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d000      	beq.n	80035c0 <prvShowStatus+0x198>
 80035be:	e77d      	b.n	80034bc <prvShowStatus+0x94>
	case 4: strcpy(temp_message,"Wide -> Battery"); break;
 80035c0:	ab03      	add	r3, sp, #12
 80035c2:	4a8b      	ldr	r2, [pc, #556]	; (80037f0 <prvShowStatus+0x3c8>)
 80035c4:	ca23      	ldmia	r2!, {r0, r1, r5}
 80035c6:	c323      	stmia	r3!, {r0, r1, r5}
 80035c8:	0019      	movs	r1, r3
 80035ca:	6813      	ldr	r3, [r2, #0]
 80035cc:	600b      	str	r3, [r1, #0]
 80035ce:	e775      	b.n	80034bc <prvShowStatus+0x94>
	case 2: strcpy(temp_message, "Wide -> mUSB"); break;
 80035d0:	ab03      	add	r3, sp, #12
 80035d2:	4a88      	ldr	r2, [pc, #544]	; (80037f4 <prvShowStatus+0x3cc>)
 80035d4:	ca23      	ldmia	r2!, {r0, r1, r5}
 80035d6:	c323      	stmia	r3!, {r0, r1, r5}
 80035d8:	0019      	movs	r1, r3
 80035da:	7813      	ldrb	r3, [r2, #0]
 80035dc:	700b      	strb	r3, [r1, #0]
 80035de:	e76d      	b.n	80034bc <prvShowStatus+0x94>
	case 3:	strcpy(temp_message, "mUSB -> Battery"); break;
 80035e0:	ab03      	add	r3, sp, #12
 80035e2:	4a85      	ldr	r2, [pc, #532]	; (80037f8 <prvShowStatus+0x3d0>)
 80035e4:	ca23      	ldmia	r2!, {r0, r1, r5}
 80035e6:	c323      	stmia	r3!, {r0, r1, r5}
 80035e8:	0019      	movs	r1, r3
 80035ea:	6813      	ldr	r3, [r2, #0]
 80035ec:	600b      	str	r3, [r1, #0]
 80035ee:	e765      	b.n	80034bc <prvShowStatus+0x94>
	case 0:	strcpy(temp_message, "Disabled"); break;
 80035f0:	ab03      	add	r3, sp, #12
 80035f2:	4a82      	ldr	r2, [pc, #520]	; (80037fc <prvShowStatus+0x3d4>)
 80035f4:	ca03      	ldmia	r2!, {r0, r1}
 80035f6:	c303      	stmia	r3!, {r0, r1}
 80035f8:	0019      	movs	r1, r3
 80035fa:	7813      	ldrb	r3, [r2, #0]
 80035fc:	700b      	strb	r3, [r1, #0]
 80035fe:	e76d      	b.n	80034dc <prvShowStatus+0xb4>
	case 1: strcpy(temp_message, "Enabled"); break;
 8003600:	aa03      	add	r2, sp, #12
 8003602:	4b7f      	ldr	r3, [pc, #508]	; (8003800 <prvShowStatus+0x3d8>)
 8003604:	cb03      	ldmia	r3!, {r0, r1}
 8003606:	c203      	stmia	r2!, {r0, r1}
 8003608:	e768      	b.n	80034dc <prvShowStatus+0xb4>
		strcpy(temp_message, "Time-Alarm");
 800360a:	ab03      	add	r3, sp, #12
 800360c:	4a7d      	ldr	r2, [pc, #500]	; (8003804 <prvShowStatus+0x3dc>)
 800360e:	ca03      	ldmia	r2!, {r0, r1}
 8003610:	c303      	stmia	r3!, {r0, r1}
 8003612:	0019      	movs	r1, r3
 8003614:	8813      	ldrh	r3, [r2, #0]
 8003616:	800b      	strh	r3, [r1, #0]
 8003618:	7893      	ldrb	r3, [r2, #2]
 800361a:	708b      	strb	r3, [r1, #2]
 800361c:	e775      	b.n	800350a <prvShowStatus+0xe2>
		strcpy(temp_message, "Date-Alarm");
 800361e:	ab03      	add	r3, sp, #12
 8003620:	4a79      	ldr	r2, [pc, #484]	; (8003808 <prvShowStatus+0x3e0>)
 8003622:	ca03      	ldmia	r2!, {r0, r1}
 8003624:	c303      	stmia	r3!, {r0, r1}
 8003626:	0019      	movs	r1, r3
 8003628:	8813      	ldrh	r3, [r2, #0]
 800362a:	800b      	strh	r3, [r1, #0]
 800362c:	7893      	ldrb	r3, [r2, #2]
 800362e:	708b      	strb	r3, [r1, #2]
 8003630:	e76b      	b.n	800350a <prvShowStatus+0xe2>
		strcpy(temp_message, "Weekday-Alarm");
 8003632:	ab03      	add	r3, sp, #12
 8003634:	4a75      	ldr	r2, [pc, #468]	; (800380c <prvShowStatus+0x3e4>)
 8003636:	ca23      	ldmia	r2!, {r0, r1, r5}
 8003638:	c323      	stmia	r3!, {r0, r1, r5}
 800363a:	0019      	movs	r1, r3
 800363c:	8813      	ldrh	r3, [r2, #0]
 800363e:	800b      	strh	r3, [r1, #0]
 8003640:	e763      	b.n	800350a <prvShowStatus+0xe2>
		{
			case 1: strcpy(temp_message, "Monday"); break;
 8003642:	aa03      	add	r2, sp, #12
 8003644:	4b51      	ldr	r3, [pc, #324]	; (800378c <prvShowStatus+0x364>)
 8003646:	6819      	ldr	r1, [r3, #0]
 8003648:	9103      	str	r1, [sp, #12]
 800364a:	8899      	ldrh	r1, [r3, #4]
 800364c:	8091      	strh	r1, [r2, #4]
 800364e:	799b      	ldrb	r3, [r3, #6]
 8003650:	7193      	strb	r3, [r2, #6]
			case 5: strcpy(temp_message, "Friday"); break;
			case 6: strcpy(temp_message, "Saturday"); break;
			case 7: strcpy(temp_message, "Sunday"); break;
		}

	sprintf(( char * ) pcWriteBuffer + strlen(( char * ) pcWriteBuffer), "\r\n  Alarm-Weekday: %s \r\n", temp_message);
 8003652:	0020      	movs	r0, r4
 8003654:	f7fc fd58 	bl	8000108 <strlen>
 8003658:	1820      	adds	r0, r4, r0
 800365a:	aa03      	add	r2, sp, #12
 800365c:	496c      	ldr	r1, [pc, #432]	; (8003810 <prvShowStatus+0x3e8>)
 800365e:	f001 ffe5 	bl	800562c <siprintf>

	switch(alarmPoweroff)
 8003662:	4b6c      	ldr	r3, [pc, #432]	; (8003814 <prvShowStatus+0x3ec>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d100      	bne.n	800366c <prvShowStatus+0x244>
 800366a:	e06e      	b.n	800374a <prvShowStatus+0x322>
 800366c:	2b01      	cmp	r3, #1
 800366e:	d100      	bne.n	8003672 <prvShowStatus+0x24a>
 8003670:	e073      	b.n	800375a <prvShowStatus+0x332>
		{
		case 0:	strcpy(temp_message, "Disabled"); break;
		case 1: strcpy(temp_message, "Enabled"); break;
		}
	sprintf(( char * ) pcWriteBuffer + strlen(( char * ) pcWriteBuffer), "\r\n PowerOff-Alarm: %s ", temp_message);
 8003672:	0020      	movs	r0, r4
 8003674:	f7fc fd48 	bl	8000108 <strlen>
 8003678:	1820      	adds	r0, r4, r0
 800367a:	aa03      	add	r2, sp, #12
 800367c:	4966      	ldr	r1, [pc, #408]	; (8003818 <prvShowStatus+0x3f0>)
 800367e:	f001 ffd5 	bl	800562c <siprintf>

	sprintf(( char * ) pcWriteBuffer + strlen(( char * ) pcWriteBuffer), "\r\n  PowerOff-Alarm-Time: %02d:%02d\r\n", alarm_hour_off, alarm_min_off);
 8003682:	0020      	movs	r0, r4
 8003684:	f7fc fd40 	bl	8000108 <strlen>
 8003688:	4b64      	ldr	r3, [pc, #400]	; (800381c <prvShowStatus+0x3f4>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	4a64      	ldr	r2, [pc, #400]	; (8003820 <prvShowStatus+0x3f8>)
 800368e:	7812      	ldrb	r2, [r2, #0]
 8003690:	1820      	adds	r0, r4, r0
 8003692:	4964      	ldr	r1, [pc, #400]	; (8003824 <prvShowStatus+0x3fc>)
 8003694:	f001 ffca 	bl	800562c <siprintf>

	switch(shutdown_enable)
 8003698:	4b63      	ldr	r3, [pc, #396]	; (8003828 <prvShowStatus+0x400>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d061      	beq.n	8003764 <prvShowStatus+0x33c>
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d067      	beq.n	8003774 <prvShowStatus+0x34c>
			{
			case 0:	strcpy(temp_message, "Disabled"); break;
			case 1: strcpy(temp_message, "Enabled"); break;
			}
	sprintf(( char * ) pcWriteBuffer + strlen(( char * ) pcWriteBuffer), "\r\n Raspberry Pi Shutdown: %s ", temp_message);
 80036a4:	0020      	movs	r0, r4
 80036a6:	f7fc fd2f 	bl	8000108 <strlen>
 80036aa:	1820      	adds	r0, r4, r0
 80036ac:	aa03      	add	r2, sp, #12
 80036ae:	495f      	ldr	r1, [pc, #380]	; (800382c <prvShowStatus+0x404>)
 80036b0:	f001 ffbc 	bl	800562c <siprintf>

	sprintf(( char * ) pcWriteBuffer + strlen(( char * ) pcWriteBuffer), "\r\n  Shutdown-Timer: %d seconds \r\n", shutdown_time);
 80036b4:	0020      	movs	r0, r4
 80036b6:	f7fc fd27 	bl	8000108 <strlen>
 80036ba:	4b5d      	ldr	r3, [pc, #372]	; (8003830 <prvShowStatus+0x408>)
 80036bc:	781a      	ldrb	r2, [r3, #0]
 80036be:	1820      	adds	r0, r4, r0
 80036c0:	495c      	ldr	r1, [pc, #368]	; (8003834 <prvShowStatus+0x40c>)
 80036c2:	f001 ffb3 	bl	800562c <siprintf>

	switch(warning_enable)
 80036c6:	4b5c      	ldr	r3, [pc, #368]	; (8003838 <prvShowStatus+0x410>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d100      	bne.n	80036d0 <prvShowStatus+0x2a8>
 80036ce:	e0b7      	b.n	8003840 <prvShowStatus+0x418>
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d100      	bne.n	80036d6 <prvShowStatus+0x2ae>
 80036d4:	e0bc      	b.n	8003850 <prvShowStatus+0x428>
				{
				case 0:	strcpy(temp_message, "Disabled"); break;
				case 1: strcpy(temp_message, "Enabled"); break;
				}
		sprintf(( char * ) pcWriteBuffer + strlen(( char * ) pcWriteBuffer), "\r\n\r\n Powerfail Warning: %s ", temp_message);
 80036d6:	0020      	movs	r0, r4
 80036d8:	f7fc fd16 	bl	8000108 <strlen>
 80036dc:	1820      	adds	r0, r4, r0
 80036de:	aa03      	add	r2, sp, #12
 80036e0:	4956      	ldr	r1, [pc, #344]	; (800383c <prvShowStatus+0x414>)
 80036e2:	f001 ffa3 	bl	800562c <siprintf>

	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 80036e6:	2000      	movs	r0, #0
 80036e8:	b00f      	add	sp, #60	; 0x3c
 80036ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			case 2: strcpy(temp_message, "Tuesday"); break;
 80036ec:	aa03      	add	r2, sp, #12
 80036ee:	4b3a      	ldr	r3, [pc, #232]	; (80037d8 <prvShowStatus+0x3b0>)
 80036f0:	cb03      	ldmia	r3!, {r0, r1}
 80036f2:	c203      	stmia	r2!, {r0, r1}
 80036f4:	e7ad      	b.n	8003652 <prvShowStatus+0x22a>
			case 3: strcpy(temp_message, "Wednesday"); break;
 80036f6:	ab03      	add	r3, sp, #12
 80036f8:	4a38      	ldr	r2, [pc, #224]	; (80037dc <prvShowStatus+0x3b4>)
 80036fa:	ca03      	ldmia	r2!, {r0, r1}
 80036fc:	c303      	stmia	r3!, {r0, r1}
 80036fe:	0019      	movs	r1, r3
 8003700:	8813      	ldrh	r3, [r2, #0]
 8003702:	800b      	strh	r3, [r1, #0]
 8003704:	e7a5      	b.n	8003652 <prvShowStatus+0x22a>
			case 4: strcpy(temp_message, "Thursday"); break;
 8003706:	ab03      	add	r3, sp, #12
 8003708:	4a35      	ldr	r2, [pc, #212]	; (80037e0 <prvShowStatus+0x3b8>)
 800370a:	ca03      	ldmia	r2!, {r0, r1}
 800370c:	c303      	stmia	r3!, {r0, r1}
 800370e:	0019      	movs	r1, r3
 8003710:	7813      	ldrb	r3, [r2, #0]
 8003712:	700b      	strb	r3, [r1, #0]
 8003714:	e79d      	b.n	8003652 <prvShowStatus+0x22a>
			case 5: strcpy(temp_message, "Friday"); break;
 8003716:	aa03      	add	r2, sp, #12
 8003718:	4b32      	ldr	r3, [pc, #200]	; (80037e4 <prvShowStatus+0x3bc>)
 800371a:	6819      	ldr	r1, [r3, #0]
 800371c:	9103      	str	r1, [sp, #12]
 800371e:	8899      	ldrh	r1, [r3, #4]
 8003720:	8091      	strh	r1, [r2, #4]
 8003722:	799b      	ldrb	r3, [r3, #6]
 8003724:	7193      	strb	r3, [r2, #6]
 8003726:	e794      	b.n	8003652 <prvShowStatus+0x22a>
			case 6: strcpy(temp_message, "Saturday"); break;
 8003728:	ab03      	add	r3, sp, #12
 800372a:	4a2f      	ldr	r2, [pc, #188]	; (80037e8 <prvShowStatus+0x3c0>)
 800372c:	ca03      	ldmia	r2!, {r0, r1}
 800372e:	c303      	stmia	r3!, {r0, r1}
 8003730:	0019      	movs	r1, r3
 8003732:	7813      	ldrb	r3, [r2, #0]
 8003734:	700b      	strb	r3, [r1, #0]
 8003736:	e78c      	b.n	8003652 <prvShowStatus+0x22a>
			case 7: strcpy(temp_message, "Sunday"); break;
 8003738:	aa03      	add	r2, sp, #12
 800373a:	4b2c      	ldr	r3, [pc, #176]	; (80037ec <prvShowStatus+0x3c4>)
 800373c:	6819      	ldr	r1, [r3, #0]
 800373e:	9103      	str	r1, [sp, #12]
 8003740:	8899      	ldrh	r1, [r3, #4]
 8003742:	8091      	strh	r1, [r2, #4]
 8003744:	799b      	ldrb	r3, [r3, #6]
 8003746:	7193      	strb	r3, [r2, #6]
 8003748:	e783      	b.n	8003652 <prvShowStatus+0x22a>
		case 0:	strcpy(temp_message, "Disabled"); break;
 800374a:	ab03      	add	r3, sp, #12
 800374c:	4a2b      	ldr	r2, [pc, #172]	; (80037fc <prvShowStatus+0x3d4>)
 800374e:	ca03      	ldmia	r2!, {r0, r1}
 8003750:	c303      	stmia	r3!, {r0, r1}
 8003752:	0019      	movs	r1, r3
 8003754:	7813      	ldrb	r3, [r2, #0]
 8003756:	700b      	strb	r3, [r1, #0]
 8003758:	e78b      	b.n	8003672 <prvShowStatus+0x24a>
		case 1: strcpy(temp_message, "Enabled"); break;
 800375a:	aa03      	add	r2, sp, #12
 800375c:	4b28      	ldr	r3, [pc, #160]	; (8003800 <prvShowStatus+0x3d8>)
 800375e:	cb03      	ldmia	r3!, {r0, r1}
 8003760:	c203      	stmia	r2!, {r0, r1}
 8003762:	e786      	b.n	8003672 <prvShowStatus+0x24a>
			case 0:	strcpy(temp_message, "Disabled"); break;
 8003764:	ab03      	add	r3, sp, #12
 8003766:	4a25      	ldr	r2, [pc, #148]	; (80037fc <prvShowStatus+0x3d4>)
 8003768:	ca03      	ldmia	r2!, {r0, r1}
 800376a:	c303      	stmia	r3!, {r0, r1}
 800376c:	0019      	movs	r1, r3
 800376e:	7813      	ldrb	r3, [r2, #0]
 8003770:	700b      	strb	r3, [r1, #0]
 8003772:	e797      	b.n	80036a4 <prvShowStatus+0x27c>
			case 1: strcpy(temp_message, "Enabled"); break;
 8003774:	aa03      	add	r2, sp, #12
 8003776:	4b22      	ldr	r3, [pc, #136]	; (8003800 <prvShowStatus+0x3d8>)
 8003778:	cb03      	ldmia	r3!, {r0, r1}
 800377a:	c203      	stmia	r2!, {r0, r1}
 800377c:	e792      	b.n	80036a4 <prvShowStatus+0x27c>
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	20000574 	.word	0x20000574
 8003784:	0800637c 	.word	0x0800637c
 8003788:	08005ea8 	.word	0x08005ea8
 800378c:	08006394 	.word	0x08006394
 8003790:	080063d8 	.word	0x080063d8
 8003794:	200004bb 	.word	0x200004bb
 8003798:	080063f8 	.word	0x080063f8
 800379c:	08006438 	.word	0x08006438
 80037a0:	200004b3 	.word	0x200004b3
 80037a4:	08006464 	.word	0x08006464
 80037a8:	20000494 	.word	0x20000494
 80037ac:	200004ae 	.word	0x200004ae
 80037b0:	200004b6 	.word	0x200004b6
 80037b4:	080064a4 	.word	0x080064a4
 80037b8:	200004b9 	.word	0x200004b9
 80037bc:	20000495 	.word	0x20000495
 80037c0:	080064b8 	.word	0x080064b8
 80037c4:	200004ac 	.word	0x200004ac
 80037c8:	200004af 	.word	0x200004af
 80037cc:	080064d4 	.word	0x080064d4
 80037d0:	200004b8 	.word	0x200004b8
 80037d4:	08005ec8 	.word	0x08005ec8
 80037d8:	0800639c 	.word	0x0800639c
 80037dc:	080063a4 	.word	0x080063a4
 80037e0:	080063b0 	.word	0x080063b0
 80037e4:	080063bc 	.word	0x080063bc
 80037e8:	080063c4 	.word	0x080063c4
 80037ec:	080063d0 	.word	0x080063d0
 80037f0:	08006428 	.word	0x08006428
 80037f4:	08006408 	.word	0x08006408
 80037f8:	08006418 	.word	0x08006418
 80037fc:	08006450 	.word	0x08006450
 8003800:	0800645c 	.word	0x0800645c
 8003804:	0800647c 	.word	0x0800647c
 8003808:	08006488 	.word	0x08006488
 800380c:	08006494 	.word	0x08006494
 8003810:	080064f0 	.word	0x080064f0
 8003814:	200004a4 	.word	0x200004a4
 8003818:	0800650c 	.word	0x0800650c
 800381c:	200004a3 	.word	0x200004a3
 8003820:	200004b2 	.word	0x200004b2
 8003824:	08006524 	.word	0x08006524
 8003828:	200004ba 	.word	0x200004ba
 800382c:	0800654c 	.word	0x0800654c
 8003830:	200004a2 	.word	0x200004a2
 8003834:	0800656c 	.word	0x0800656c
 8003838:	200004b4 	.word	0x200004b4
 800383c:	08006590 	.word	0x08006590
				case 0:	strcpy(temp_message, "Disabled"); break;
 8003840:	ab03      	add	r3, sp, #12
 8003842:	4a06      	ldr	r2, [pc, #24]	; (800385c <prvShowStatus+0x434>)
 8003844:	ca03      	ldmia	r2!, {r0, r1}
 8003846:	c303      	stmia	r3!, {r0, r1}
 8003848:	0019      	movs	r1, r3
 800384a:	7813      	ldrb	r3, [r2, #0]
 800384c:	700b      	strb	r3, [r1, #0]
 800384e:	e742      	b.n	80036d6 <prvShowStatus+0x2ae>
				case 1: strcpy(temp_message, "Enabled"); break;
 8003850:	aa03      	add	r2, sp, #12
 8003852:	4b03      	ldr	r3, [pc, #12]	; (8003860 <prvShowStatus+0x438>)
 8003854:	cb03      	ldmia	r3!, {r0, r1}
 8003856:	c203      	stmia	r2!, {r0, r1}
 8003858:	e73d      	b.n	80036d6 <prvShowStatus+0x2ae>
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	08006450 	.word	0x08006450
 8003860:	0800645c 	.word	0x0800645c

08003864 <prvADCOutput>:
{
 8003864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003866:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8003868:	d05a      	beq.n	8003920 <prvADCOutput+0xbc>
	if (rawValue[0] > minWide)
 800386a:	4b41      	ldr	r3, [pc, #260]	; (8003970 <prvADCOutput+0x10c>)
 800386c:	881a      	ldrh	r2, [r3, #0]
 800386e:	2396      	movs	r3, #150	; 0x96
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	429a      	cmp	r2, r3
 8003874:	d956      	bls.n	8003924 <prvADCOutput+0xc0>
		sprintf(( char * ) pcWriteBuffer, "****************************\r\nWide-Range-Inputvoltage: %d.%03d V",  measuredValue[0]/1000, measuredValue[0]%1000);
 8003876:	4b3f      	ldr	r3, [pc, #252]	; (8003974 <prvADCOutput+0x110>)
 8003878:	881e      	ldrh	r6, [r3, #0]
 800387a:	21fa      	movs	r1, #250	; 0xfa
 800387c:	0089      	lsls	r1, r1, #2
 800387e:	0030      	movs	r0, r6
 8003880:	f7fc fcd0 	bl	8000224 <__aeabi_uidivmod>
 8003884:	b28d      	uxth	r5, r1
 8003886:	21fa      	movs	r1, #250	; 0xfa
 8003888:	0089      	lsls	r1, r1, #2
 800388a:	0030      	movs	r0, r6
 800388c:	f7fc fc44 	bl	8000118 <__udivsi3>
 8003890:	b282      	uxth	r2, r0
 8003892:	002b      	movs	r3, r5
 8003894:	4938      	ldr	r1, [pc, #224]	; (8003978 <prvADCOutput+0x114>)
 8003896:	0020      	movs	r0, r4
 8003898:	f001 fec8 	bl	800562c <siprintf>
	if (rawValue[1] > minBatConnect)
 800389c:	4b34      	ldr	r3, [pc, #208]	; (8003970 <prvADCOutput+0x10c>)
 800389e:	885b      	ldrh	r3, [r3, #2]
 80038a0:	2b0a      	cmp	r3, #10
 80038a2:	d944      	bls.n	800392e <prvADCOutput+0xca>
		sprintf(( char * ) pcWriteBuffer + strlen(( char * ) pcWriteBuffer), "\r\nLifePo4-Batteryvoltage: %d.%03d V", measuredValue[1]/1000, measuredValue[1]%1000);
 80038a4:	0020      	movs	r0, r4
 80038a6:	f7fc fc2f 	bl	8000108 <strlen>
 80038aa:	0005      	movs	r5, r0
 80038ac:	4b31      	ldr	r3, [pc, #196]	; (8003974 <prvADCOutput+0x110>)
 80038ae:	885f      	ldrh	r7, [r3, #2]
 80038b0:	21fa      	movs	r1, #250	; 0xfa
 80038b2:	0089      	lsls	r1, r1, #2
 80038b4:	0038      	movs	r0, r7
 80038b6:	f7fc fcb5 	bl	8000224 <__aeabi_uidivmod>
 80038ba:	b28e      	uxth	r6, r1
 80038bc:	21fa      	movs	r1, #250	; 0xfa
 80038be:	0089      	lsls	r1, r1, #2
 80038c0:	0038      	movs	r0, r7
 80038c2:	f7fc fc29 	bl	8000118 <__udivsi3>
 80038c6:	b282      	uxth	r2, r0
 80038c8:	1960      	adds	r0, r4, r5
 80038ca:	0033      	movs	r3, r6
 80038cc:	492b      	ldr	r1, [pc, #172]	; (800397c <prvADCOutput+0x118>)
 80038ce:	f001 fead 	bl	800562c <siprintf>
	if (rawValue[2] > minUSB)
 80038d2:	4b27      	ldr	r3, [pc, #156]	; (8003970 <prvADCOutput+0x10c>)
 80038d4:	889a      	ldrh	r2, [r3, #4]
 80038d6:	23e1      	movs	r3, #225	; 0xe1
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	429a      	cmp	r2, r3
 80038dc:	d830      	bhi.n	8003940 <prvADCOutput+0xdc>
		sprintf(( char * ) pcWriteBuffer + strlen(( char * ) pcWriteBuffer), "\r\nmicroUSB-Inputvoltage: not connected");
 80038de:	0020      	movs	r0, r4
 80038e0:	f7fc fc12 	bl	8000108 <strlen>
 80038e4:	1820      	adds	r0, r4, r0
 80038e6:	2227      	movs	r2, #39	; 0x27
 80038e8:	4925      	ldr	r1, [pc, #148]	; (8003980 <prvADCOutput+0x11c>)
 80038ea:	f001 fdd3 	bl	8005494 <memcpy>
	sprintf(( char * ) pcWriteBuffer + strlen(( char * ) pcWriteBuffer), "\r\nOutput-Voltage: %d.%03d V\r\n****************************\r\n", measuredValue[3]/1000, measuredValue[3]%1000);
 80038ee:	0020      	movs	r0, r4
 80038f0:	f7fc fc0a 	bl	8000108 <strlen>
 80038f4:	0007      	movs	r7, r0
 80038f6:	4b1f      	ldr	r3, [pc, #124]	; (8003974 <prvADCOutput+0x110>)
 80038f8:	88de      	ldrh	r6, [r3, #6]
 80038fa:	21fa      	movs	r1, #250	; 0xfa
 80038fc:	0089      	lsls	r1, r1, #2
 80038fe:	0030      	movs	r0, r6
 8003900:	f7fc fc90 	bl	8000224 <__aeabi_uidivmod>
 8003904:	b28d      	uxth	r5, r1
 8003906:	21fa      	movs	r1, #250	; 0xfa
 8003908:	0089      	lsls	r1, r1, #2
 800390a:	0030      	movs	r0, r6
 800390c:	f7fc fc04 	bl	8000118 <__udivsi3>
 8003910:	b282      	uxth	r2, r0
 8003912:	19e0      	adds	r0, r4, r7
 8003914:	002b      	movs	r3, r5
 8003916:	491b      	ldr	r1, [pc, #108]	; (8003984 <prvADCOutput+0x120>)
 8003918:	f001 fe88 	bl	800562c <siprintf>
}
 800391c:	2000      	movs	r0, #0
 800391e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 8003920:	b672      	cpsid	i
 8003922:	e7fe      	b.n	8003922 <prvADCOutput+0xbe>
		sprintf(( char * ) pcWriteBuffer, "****************************\r\nWide-Range-Inputvoltage: not connected");
 8003924:	2245      	movs	r2, #69	; 0x45
 8003926:	4918      	ldr	r1, [pc, #96]	; (8003988 <prvADCOutput+0x124>)
 8003928:	f001 fdb4 	bl	8005494 <memcpy>
 800392c:	e7b6      	b.n	800389c <prvADCOutput+0x38>
		sprintf(( char * ) pcWriteBuffer + strlen(( char * ) pcWriteBuffer), "\r\nLifePo4-Batteryvoltage: not connected");
 800392e:	0020      	movs	r0, r4
 8003930:	f7fc fbea 	bl	8000108 <strlen>
 8003934:	1820      	adds	r0, r4, r0
 8003936:	2228      	movs	r2, #40	; 0x28
 8003938:	4914      	ldr	r1, [pc, #80]	; (800398c <prvADCOutput+0x128>)
 800393a:	f001 fdab 	bl	8005494 <memcpy>
 800393e:	e7c8      	b.n	80038d2 <prvADCOutput+0x6e>
		sprintf(( char * ) pcWriteBuffer + strlen(( char * ) pcWriteBuffer), "\r\nmicroUSB-Inputvoltage: %d.%03d V", measuredValue[2]/1000, measuredValue[2]%1000);
 8003940:	0020      	movs	r0, r4
 8003942:	f7fc fbe1 	bl	8000108 <strlen>
 8003946:	0005      	movs	r5, r0
 8003948:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <prvADCOutput+0x110>)
 800394a:	889f      	ldrh	r7, [r3, #4]
 800394c:	21fa      	movs	r1, #250	; 0xfa
 800394e:	0089      	lsls	r1, r1, #2
 8003950:	0038      	movs	r0, r7
 8003952:	f7fc fc67 	bl	8000224 <__aeabi_uidivmod>
 8003956:	b28e      	uxth	r6, r1
 8003958:	21fa      	movs	r1, #250	; 0xfa
 800395a:	0089      	lsls	r1, r1, #2
 800395c:	0038      	movs	r0, r7
 800395e:	f7fc fbdb 	bl	8000118 <__udivsi3>
 8003962:	b282      	uxth	r2, r0
 8003964:	1960      	adds	r0, r4, r5
 8003966:	0033      	movs	r3, r6
 8003968:	4909      	ldr	r1, [pc, #36]	; (8003990 <prvADCOutput+0x12c>)
 800396a:	f001 fe5f 	bl	800562c <siprintf>
 800396e:	e7be      	b.n	80038ee <prvADCOutput+0x8a>
 8003970:	20000498 	.word	0x20000498
 8003974:	200004bc 	.word	0x200004bc
 8003978:	08005f28 	.word	0x08005f28
 800397c:	08005fb4 	.word	0x08005fb4
 8003980:	08006024 	.word	0x08006024
 8003984:	0800604c 	.word	0x0800604c
 8003988:	08005f6c 	.word	0x08005f6c
 800398c:	08005fd8 	.word	0x08005fd8
 8003990:	08006000 	.word	0x08006000

08003994 <prvUARTCommandConsoleTask>:
{
 8003994:	b570      	push	{r4, r5, r6, lr}
 8003996:	b082      	sub	sp, #8
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8003998:	f7ff fc62 	bl	8003260 <FreeRTOS_CLIGetOutputBuffer>
 800399c:	0005      	movs	r5, r0
	uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 800399e:	2000      	movs	r0, #0
 80039a0:	f7ff fb8a 	bl	80030b8 <uxTaskGetStackHighWaterMark>
 80039a4:	9000      	str	r0, [sp, #0]
int8_t cRxedChar, cInputIndex = 0, *pcOutputString;
 80039a6:	2600      	movs	r6, #0
 80039a8:	e095      	b.n	8003ad6 <prvUARTCommandConsoleTask+0x142>
			cInputIndex = 0;
 80039aa:	2600      	movs	r6, #0
 80039ac:	e093      	b.n	8003ad6 <prvUARTCommandConsoleTask+0x142>
			HAL_UART_Receive_IT(&huart1, (uint8_t *) &cRxedChar, 1 );
 80039ae:	2201      	movs	r2, #1
 80039b0:	466b      	mov	r3, sp
 80039b2:	1dd9      	adds	r1, r3, #7
 80039b4:	484a      	ldr	r0, [pc, #296]	; (8003ae0 <prvUARTCommandConsoleTask+0x14c>)
 80039b6:	f7fe fb29 	bl	800200c <HAL_UART_Receive_IT>
		while(rx_ready != 1)
 80039ba:	4b4a      	ldr	r3, [pc, #296]	; (8003ae4 <prvUARTCommandConsoleTask+0x150>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d1f5      	bne.n	80039ae <prvUARTCommandConsoleTask+0x1a>
		rx_ready = 0;
 80039c2:	2200      	movs	r2, #0
 80039c4:	4b47      	ldr	r3, [pc, #284]	; (8003ae4 <prvUARTCommandConsoleTask+0x150>)
 80039c6:	701a      	strb	r2, [r3, #0]
		if(UART_CheckIdleState(&huart1) == HAL_OK && console_start == 1)
 80039c8:	4845      	ldr	r0, [pc, #276]	; (8003ae0 <prvUARTCommandConsoleTask+0x14c>)
 80039ca:	f7fe fd6b 	bl	80024a4 <UART_CheckIdleState>
 80039ce:	2800      	cmp	r0, #0
 80039d0:	d103      	bne.n	80039da <prvUARTCommandConsoleTask+0x46>
 80039d2:	4b45      	ldr	r3, [pc, #276]	; (8003ae8 <prvUARTCommandConsoleTask+0x154>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d013      	beq.n	8003a02 <prvUARTCommandConsoleTask+0x6e>
		if( cRxedChar == '\r' )
 80039da:	466b      	mov	r3, sp
 80039dc:	3307      	adds	r3, #7
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	b25b      	sxtb	r3, r3
 80039e2:	2b0d      	cmp	r3, #13
 80039e4:	d014      	beq.n	8003a10 <prvUARTCommandConsoleTask+0x7c>
			else if( cRxedChar == '\b' )
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d06e      	beq.n	8003ac8 <prvUARTCommandConsoleTask+0x134>
				if( ( cRxedChar >= ' ' ) && ( cRxedChar <= '~' ) )
 80039ea:	001a      	movs	r2, r3
 80039ec:	3a20      	subs	r2, #32
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	2a5e      	cmp	r2, #94	; 0x5e
 80039f2:	d870      	bhi.n	8003ad6 <prvUARTCommandConsoleTask+0x142>
					if( cInputIndex < cmdMAX_INPUT_SIZE )
 80039f4:	2e31      	cmp	r6, #49	; 0x31
 80039f6:	dc6e      	bgt.n	8003ad6 <prvUARTCommandConsoleTask+0x142>
						cInputString[ cInputIndex ] = cRxedChar;
 80039f8:	4a3c      	ldr	r2, [pc, #240]	; (8003aec <prvUARTCommandConsoleTask+0x158>)
 80039fa:	5593      	strb	r3, [r2, r6]
						cInputIndex++;
 80039fc:	3601      	adds	r6, #1
 80039fe:	b276      	sxtb	r6, r6
 8003a00:	e069      	b.n	8003ad6 <prvUARTCommandConsoleTask+0x142>
		  HAL_UART_Transmit(&huart1, (uint8_t *) &cRxedChar, sizeof( cRxedChar ), sizeof( cRxedChar ) );
 8003a02:	2201      	movs	r2, #1
 8003a04:	4669      	mov	r1, sp
 8003a06:	3107      	adds	r1, #7
 8003a08:	4835      	ldr	r0, [pc, #212]	; (8003ae0 <prvUARTCommandConsoleTask+0x14c>)
 8003a0a:	f7fe fcd9 	bl	80023c0 <HAL_UART_Transmit>
 8003a0e:	e7e4      	b.n	80039da <prvUARTCommandConsoleTask+0x46>
			  if(UART_CheckIdleState(&huart1) == HAL_OK && console_start == 1)
 8003a10:	4833      	ldr	r0, [pc, #204]	; (8003ae0 <prvUARTCommandConsoleTask+0x14c>)
 8003a12:	f7fe fd47 	bl	80024a4 <UART_CheckIdleState>
 8003a16:	2800      	cmp	r0, #0
 8003a18:	d103      	bne.n	8003a22 <prvUARTCommandConsoleTask+0x8e>
 8003a1a:	4b33      	ldr	r3, [pc, #204]	; (8003ae8 <prvUARTCommandConsoleTask+0x154>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d006      	beq.n	8003a30 <prvUARTCommandConsoleTask+0x9c>
			if( cInputIndex == 0 )
 8003a22:	2e00      	cmp	r6, #0
 8003a24:	d10f      	bne.n	8003a46 <prvUARTCommandConsoleTask+0xb2>
				strcpy( ( char * ) cInputString, ( char * ) cLastInputString );
 8003a26:	4932      	ldr	r1, [pc, #200]	; (8003af0 <prvUARTCommandConsoleTask+0x15c>)
 8003a28:	4830      	ldr	r0, [pc, #192]	; (8003aec <prvUARTCommandConsoleTask+0x158>)
 8003a2a:	f001 fe21 	bl	8005670 <strcpy>
 8003a2e:	e00a      	b.n	8003a46 <prvUARTCommandConsoleTask+0xb2>
					HAL_UART_Transmit(&huart1, (uint8_t *) pcNewLine, strlen( ( char * ) pcNewLine ), strlen( ( char * ) pcNewLine ) );
 8003a30:	3301      	adds	r3, #1
 8003a32:	2202      	movs	r2, #2
 8003a34:	492f      	ldr	r1, [pc, #188]	; (8003af4 <prvUARTCommandConsoleTask+0x160>)
 8003a36:	482a      	ldr	r0, [pc, #168]	; (8003ae0 <prvUARTCommandConsoleTask+0x14c>)
 8003a38:	f7fe fcc2 	bl	80023c0 <HAL_UART_Transmit>
 8003a3c:	e7f1      	b.n	8003a22 <prvUARTCommandConsoleTask+0x8e>
				if( xReturned == pdPASS )
 8003a3e:	2c01      	cmp	r4, #1
 8003a40:	d008      	beq.n	8003a54 <prvUARTCommandConsoleTask+0xc0>
			} while( xReturned != pdFALSE );
 8003a42:	2c00      	cmp	r4, #0
 8003a44:	d022      	beq.n	8003a8c <prvUARTCommandConsoleTask+0xf8>
				if(UART_CheckIdleState(&huart1) == HAL_OK)
 8003a46:	4826      	ldr	r0, [pc, #152]	; (8003ae0 <prvUARTCommandConsoleTask+0x14c>)
 8003a48:	f7fe fd2c 	bl	80024a4 <UART_CheckIdleState>
 8003a4c:	2800      	cmp	r0, #0
 8003a4e:	d1f6      	bne.n	8003a3e <prvUARTCommandConsoleTask+0xaa>
				  xReturned = pdPASS;
 8003a50:	2401      	movs	r4, #1
 8003a52:	e7f4      	b.n	8003a3e <prvUARTCommandConsoleTask+0xaa>
					xReturned = FreeRTOS_CLIProcessCommand( cInputString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );
 8003a54:	2280      	movs	r2, #128	; 0x80
 8003a56:	0092      	lsls	r2, r2, #2
 8003a58:	0029      	movs	r1, r5
 8003a5a:	4824      	ldr	r0, [pc, #144]	; (8003aec <prvUARTCommandConsoleTask+0x158>)
 8003a5c:	f7ff fb9a 	bl	8003194 <FreeRTOS_CLIProcessCommand>
 8003a60:	0004      	movs	r4, r0
					if (console_start == 1 || command_order == 1)
 8003a62:	4b21      	ldr	r3, [pc, #132]	; (8003ae8 <prvUARTCommandConsoleTask+0x154>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d003      	beq.n	8003a72 <prvUARTCommandConsoleTask+0xde>
 8003a6a:	4b23      	ldr	r3, [pc, #140]	; (8003af8 <prvUARTCommandConsoleTask+0x164>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d1e7      	bne.n	8003a42 <prvUARTCommandConsoleTask+0xae>
						HAL_UART_Transmit(&huart1, (uint8_t *) pcOutputString, strlen( ( char * ) pcOutputString ), strlen( ( char * ) pcOutputString ) );
 8003a72:	0028      	movs	r0, r5
 8003a74:	f7fc fb48 	bl	8000108 <strlen>
 8003a78:	0003      	movs	r3, r0
 8003a7a:	b282      	uxth	r2, r0
 8003a7c:	0029      	movs	r1, r5
 8003a7e:	4818      	ldr	r0, [pc, #96]	; (8003ae0 <prvUARTCommandConsoleTask+0x14c>)
 8003a80:	f7fe fc9e 	bl	80023c0 <HAL_UART_Transmit>
						command_order = 0;
 8003a84:	2200      	movs	r2, #0
 8003a86:	4b1c      	ldr	r3, [pc, #112]	; (8003af8 <prvUARTCommandConsoleTask+0x164>)
 8003a88:	701a      	strb	r2, [r3, #0]
 8003a8a:	e7da      	b.n	8003a42 <prvUARTCommandConsoleTask+0xae>
			strcpy( ( char * ) cLastInputString, ( char * ) cInputString );
 8003a8c:	4e17      	ldr	r6, [pc, #92]	; (8003aec <prvUARTCommandConsoleTask+0x158>)
 8003a8e:	0031      	movs	r1, r6
 8003a90:	4817      	ldr	r0, [pc, #92]	; (8003af0 <prvUARTCommandConsoleTask+0x15c>)
 8003a92:	f001 fded 	bl	8005670 <strcpy>
			memset( cInputString, 0x00, cmdMAX_INPUT_SIZE );
 8003a96:	2232      	movs	r2, #50	; 0x32
 8003a98:	2100      	movs	r1, #0
 8003a9a:	0030      	movs	r0, r6
 8003a9c:	f001 fd03 	bl	80054a6 <memset>
            if(UART_CheckIdleState(&huart1) == HAL_OK && console_start == 1)
 8003aa0:	480f      	ldr	r0, [pc, #60]	; (8003ae0 <prvUARTCommandConsoleTask+0x14c>)
 8003aa2:	f7fe fcff 	bl	80024a4 <UART_CheckIdleState>
 8003aa6:	2800      	cmp	r0, #0
 8003aa8:	d000      	beq.n	8003aac <prvUARTCommandConsoleTask+0x118>
 8003aaa:	e77e      	b.n	80039aa <prvUARTCommandConsoleTask+0x16>
 8003aac:	4b0e      	ldr	r3, [pc, #56]	; (8003ae8 <prvUARTCommandConsoleTask+0x154>)
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d001      	beq.n	8003ab8 <prvUARTCommandConsoleTask+0x124>
			cInputIndex = 0;
 8003ab4:	2600      	movs	r6, #0
 8003ab6:	e00e      	b.n	8003ad6 <prvUARTCommandConsoleTask+0x142>
            	HAL_UART_Transmit(&huart1, (uint8_t *) pcEndOfCommandOutputString, strlen( ( char * ) pcEndOfCommandOutputString ), strlen( ( char * ) pcEndOfCommandOutputString ) );
 8003ab8:	3302      	adds	r3, #2
 8003aba:	2203      	movs	r2, #3
 8003abc:	490f      	ldr	r1, [pc, #60]	; (8003afc <prvUARTCommandConsoleTask+0x168>)
 8003abe:	4808      	ldr	r0, [pc, #32]	; (8003ae0 <prvUARTCommandConsoleTask+0x14c>)
 8003ac0:	f7fe fc7e 	bl	80023c0 <HAL_UART_Transmit>
			cInputIndex = 0;
 8003ac4:	2600      	movs	r6, #0
 8003ac6:	e006      	b.n	8003ad6 <prvUARTCommandConsoleTask+0x142>
				if( cInputIndex > 0 )
 8003ac8:	2e00      	cmp	r6, #0
 8003aca:	dd04      	ble.n	8003ad6 <prvUARTCommandConsoleTask+0x142>
					cInputIndex--;
 8003acc:	3e01      	subs	r6, #1
 8003ace:	b276      	sxtb	r6, r6
					cInputString[ cInputIndex ] = '\0';
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	4b06      	ldr	r3, [pc, #24]	; (8003aec <prvUARTCommandConsoleTask+0x158>)
 8003ad4:	559a      	strb	r2, [r3, r6]
		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	f7ff faee 	bl	80030b8 <uxTaskGetStackHighWaterMark>
 8003adc:	9000      	str	r0, [sp, #0]
		while(rx_ready != 1)
 8003ade:	e76c      	b.n	80039ba <prvUARTCommandConsoleTask+0x26>
 8003ae0:	20000504 	.word	0x20000504
 8003ae4:	20000478 	.word	0x20000478
 8003ae8:	20000477 	.word	0x20000477
 8003aec:	20000410 	.word	0x20000410
 8003af0:	20000444 	.word	0x20000444
 8003af4:	08006e58 	.word	0x08006e58
 8003af8:	20000476 	.word	0x20000476
 8003afc:	080066f8 	.word	0x080066f8

08003b00 <vUARTCommandConsoleStart>:
{
 8003b00:	b500      	push	{lr}
 8003b02:	b083      	sub	sp, #12
	xTaskCreate( 	prvUARTCommandConsoleTask,				/* The task that implements the command console. */
 8003b04:	4b25      	ldr	r3, [pc, #148]	; (8003b9c <vUARTCommandConsoleStart+0x9c>)
 8003b06:	9301      	str	r3, [sp, #4]
 8003b08:	2303      	movs	r3, #3
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	22c0      	movs	r2, #192	; 0xc0
 8003b10:	4923      	ldr	r1, [pc, #140]	; (8003ba0 <vUARTCommandConsoleStart+0xa0>)
 8003b12:	4824      	ldr	r0, [pc, #144]	; (8003ba4 <vUARTCommandConsoleStart+0xa4>)
 8003b14:	f7ff f8fa 	bl	8002d0c <xTaskCreate>
	  FreeRTOS_CLIRegisterCommand( &xTimeOutput );
 8003b18:	4823      	ldr	r0, [pc, #140]	; (8003ba8 <vUARTCommandConsoleStart+0xa8>)
 8003b1a:	f7ff fb1f 	bl	800315c <FreeRTOS_CLIRegisterCommand>
	  FreeRTOS_CLIRegisterCommand( &xADCOutput );
 8003b1e:	4823      	ldr	r0, [pc, #140]	; (8003bac <vUARTCommandConsoleStart+0xac>)
 8003b20:	f7ff fb1c 	bl	800315c <FreeRTOS_CLIRegisterCommand>
	  FreeRTOS_CLIRegisterCommand( &xMode );
 8003b24:	4822      	ldr	r0, [pc, #136]	; (8003bb0 <vUARTCommandConsoleStart+0xb0>)
 8003b26:	f7ff fb19 	bl	800315c <FreeRTOS_CLIRegisterCommand>
	  FreeRTOS_CLIRegisterCommand( &xSetClock );
 8003b2a:	4822      	ldr	r0, [pc, #136]	; (8003bb4 <vUARTCommandConsoleStart+0xb4>)
 8003b2c:	f7ff fb16 	bl	800315c <FreeRTOS_CLIRegisterCommand>
	  FreeRTOS_CLIRegisterCommand( &xSetDate );
 8003b30:	4821      	ldr	r0, [pc, #132]	; (8003bb8 <vUARTCommandConsoleStart+0xb8>)
 8003b32:	f7ff fb13 	bl	800315c <FreeRTOS_CLIRegisterCommand>
	  FreeRTOS_CLIRegisterCommand( &xStartStromPiConsole );
 8003b36:	4821      	ldr	r0, [pc, #132]	; (8003bbc <vUARTCommandConsoleStart+0xbc>)
 8003b38:	f7ff fb10 	bl	800315c <FreeRTOS_CLIRegisterCommand>
	  FreeRTOS_CLIRegisterCommand( &xSetTimer );
 8003b3c:	4820      	ldr	r0, [pc, #128]	; (8003bc0 <vUARTCommandConsoleStart+0xc0>)
 8003b3e:	f7ff fb0d 	bl	800315c <FreeRTOS_CLIRegisterCommand>
	  FreeRTOS_CLIRegisterCommand( &xShutdownEnable );
 8003b42:	4820      	ldr	r0, [pc, #128]	; (8003bc4 <vUARTCommandConsoleStart+0xc4>)
 8003b44:	f7ff fb0a 	bl	800315c <FreeRTOS_CLIRegisterCommand>
	  FreeRTOS_CLIRegisterCommand( &xWarning );
 8003b48:	481f      	ldr	r0, [pc, #124]	; (8003bc8 <vUARTCommandConsoleStart+0xc8>)
 8003b4a:	f7ff fb07 	bl	800315c <FreeRTOS_CLIRegisterCommand>
	  FreeRTOS_CLIRegisterCommand( &xAlarmMode );
 8003b4e:	481f      	ldr	r0, [pc, #124]	; (8003bcc <vUARTCommandConsoleStart+0xcc>)
 8003b50:	f7ff fb04 	bl	800315c <FreeRTOS_CLIRegisterCommand>
	  FreeRTOS_CLIRegisterCommand( &xAlarmEnable );
 8003b54:	481e      	ldr	r0, [pc, #120]	; (8003bd0 <vUARTCommandConsoleStart+0xd0>)
 8003b56:	f7ff fb01 	bl	800315c <FreeRTOS_CLIRegisterCommand>
	  FreeRTOS_CLIRegisterCommand( &xAlarmTime );
 8003b5a:	481e      	ldr	r0, [pc, #120]	; (8003bd4 <vUARTCommandConsoleStart+0xd4>)
 8003b5c:	f7ff fafe 	bl	800315c <FreeRTOS_CLIRegisterCommand>
	  FreeRTOS_CLIRegisterCommand( &xAlarmWeekday );
 8003b60:	481d      	ldr	r0, [pc, #116]	; (8003bd8 <vUARTCommandConsoleStart+0xd8>)
 8003b62:	f7ff fafb 	bl	800315c <FreeRTOS_CLIRegisterCommand>
	  FreeRTOS_CLIRegisterCommand( &xAlarmDate );
 8003b66:	481d      	ldr	r0, [pc, #116]	; (8003bdc <vUARTCommandConsoleStart+0xdc>)
 8003b68:	f7ff faf8 	bl	800315c <FreeRTOS_CLIRegisterCommand>
	  FreeRTOS_CLIRegisterCommand( &xAlarmPowerOffTime );
 8003b6c:	481c      	ldr	r0, [pc, #112]	; (8003be0 <vUARTCommandConsoleStart+0xe0>)
 8003b6e:	f7ff faf5 	bl	800315c <FreeRTOS_CLIRegisterCommand>
	  FreeRTOS_CLIRegisterCommand( &xAlarmPowerOffEnable );
 8003b72:	481c      	ldr	r0, [pc, #112]	; (8003be4 <vUARTCommandConsoleStart+0xe4>)
 8003b74:	f7ff faf2 	bl	800315c <FreeRTOS_CLIRegisterCommand>
	  FreeRTOS_CLIRegisterCommand( &xShowStatus );
 8003b78:	481b      	ldr	r0, [pc, #108]	; (8003be8 <vUARTCommandConsoleStart+0xe8>)
 8003b7a:	f7ff faef 	bl	800315c <FreeRTOS_CLIRegisterCommand>
	  FreeRTOS_CLIRegisterCommand( &xPowerOff );
 8003b7e:	481b      	ldr	r0, [pc, #108]	; (8003bec <vUARTCommandConsoleStart+0xec>)
 8003b80:	f7ff faec 	bl	800315c <FreeRTOS_CLIRegisterCommand>
	  FreeRTOS_CLIRegisterCommand( &xTimeRPi );
 8003b84:	481a      	ldr	r0, [pc, #104]	; (8003bf0 <vUARTCommandConsoleStart+0xf0>)
 8003b86:	f7ff fae9 	bl	800315c <FreeRTOS_CLIRegisterCommand>
	  FreeRTOS_CLIRegisterCommand( &xDateRPi );
 8003b8a:	481a      	ldr	r0, [pc, #104]	; (8003bf4 <vUARTCommandConsoleStart+0xf4>)
 8003b8c:	f7ff fae6 	bl	800315c <FreeRTOS_CLIRegisterCommand>
	  FreeRTOS_CLIRegisterCommand( &xQuitStromPiConsole );
 8003b90:	4819      	ldr	r0, [pc, #100]	; (8003bf8 <vUARTCommandConsoleStart+0xf8>)
 8003b92:	f7ff fae3 	bl	800315c <FreeRTOS_CLIRegisterCommand>
}
 8003b96:	b003      	add	sp, #12
 8003b98:	bd00      	pop	{pc}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	2000047c 	.word	0x2000047c
 8003ba0:	08006eb8 	.word	0x08006eb8
 8003ba4:	08003995 	.word	0x08003995
 8003ba8:	08006fe0 	.word	0x08006fe0
 8003bac:	08006ec0 	.word	0x08006ec0
 8003bb0:	08006f50 	.word	0x08006f50
 8003bb4:	08006f80 	.word	0x08006f80
 8003bb8:	08006f90 	.word	0x08006f90
 8003bbc:	08006fd0 	.word	0x08006fd0
 8003bc0:	08006fa0 	.word	0x08006fa0
 8003bc4:	08006fc0 	.word	0x08006fc0
 8003bc8:	08007000 	.word	0x08007000
 8003bcc:	08006ef0 	.word	0x08006ef0
 8003bd0:	08006ee0 	.word	0x08006ee0
 8003bd4:	08006f20 	.word	0x08006f20
 8003bd8:	08006f30 	.word	0x08006f30
 8003bdc:	08006ed0 	.word	0x08006ed0
 8003be0:	08006f10 	.word	0x08006f10
 8003be4:	08006f00 	.word	0x08006f00
 8003be8:	08006fb0 	.word	0x08006fb0
 8003bec:	08006f60 	.word	0x08006f60
 8003bf0:	08006ff0 	.word	0x08006ff0
 8003bf4:	08006f40 	.word	0x08006f40
 8003bf8:	08006f70 	.word	0x08006f70

08003bfc <ascii2int>:

/*-----------------------------------------------------------*/

int ascii2int(const char* s)
{
 8003bfc:	b510      	push	{r4, lr}
 8003bfe:	0004      	movs	r4, r0
	int i = 0;
 8003c00:	2300      	movs	r3, #0
	while (*s != 0)
 8003c02:	7822      	ldrb	r2, [r4, #0]
 8003c04:	2a00      	cmp	r2, #0
 8003c06:	d00c      	beq.n	8003c22 <ascii2int+0x26>
	{
		if (*s >= '0' && *s <= '9')
 8003c08:	0011      	movs	r1, r2
 8003c0a:	3930      	subs	r1, #48	; 0x30
 8003c0c:	b2c9      	uxtb	r1, r1
 8003c0e:	2909      	cmp	r1, #9
 8003c10:	d806      	bhi.n	8003c20 <ascii2int+0x24>
		{
			i = i * 10 + (*s - '0');
 8003c12:	0098      	lsls	r0, r3, #2
 8003c14:	18c0      	adds	r0, r0, r3
 8003c16:	0043      	lsls	r3, r0, #1
 8003c18:	3a30      	subs	r2, #48	; 0x30
 8003c1a:	189b      	adds	r3, r3, r2
			s++;
 8003c1c:	3401      	adds	r4, #1
 8003c1e:	e7f0      	b.n	8003c02 <ascii2int+0x6>
		}
		else return 0;
 8003c20:	2300      	movs	r3, #0
	}
	return i;

}
 8003c22:	0018      	movs	r0, r3
 8003c24:	bd10      	pop	{r4, pc}
	...

08003c28 <prvAlarmPowerOffEnable>:
{
 8003c28:	b530      	push	{r4, r5, lr}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	0004      	movs	r4, r0
 8003c2e:	0010      	movs	r0, r2
	pcParameter1 = FreeRTOS_CLIGetParameter
 8003c30:	aa01      	add	r2, sp, #4
 8003c32:	2101      	movs	r1, #1
 8003c34:	f7ff fb18 	bl	8003268 <FreeRTOS_CLIGetParameter>
	configASSERT( pcWriteBuffer );
 8003c38:	2c00      	cmp	r4, #0
 8003c3a:	d011      	beq.n	8003c60 <prvAlarmPowerOffEnable+0x38>
    pcParameter1[ xParameter1StringLength ] = 0x00;
 8003c3c:	9b01      	ldr	r3, [sp, #4]
 8003c3e:	18c3      	adds	r3, r0, r3
 8003c40:	2200      	movs	r2, #0
 8003c42:	701a      	strb	r2, [r3, #0]
    poweroff_enable_temp = ascii2int(pcParameter1);
 8003c44:	f7ff ffda 	bl	8003bfc <ascii2int>
    alarmPoweroff = poweroff_enable_temp;
 8003c48:	4d0c      	ldr	r5, [pc, #48]	; (8003c7c <prvAlarmPowerOffEnable+0x54>)
 8003c4a:	7028      	strb	r0, [r5, #0]
    flashConfig();
 8003c4c:	f000 feac 	bl	80049a8 <flashConfig>
    switch (alarmPoweroff)
 8003c50:	782b      	ldrb	r3, [r5, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d006      	beq.n	8003c64 <prvAlarmPowerOffEnable+0x3c>
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d00a      	beq.n	8003c70 <prvAlarmPowerOffEnable+0x48>
}
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	b003      	add	sp, #12
 8003c5e:	bd30      	pop	{r4, r5, pc}
	configASSERT( pcWriteBuffer );
 8003c60:	b672      	cpsid	i
 8003c62:	e7fe      	b.n	8003c62 <prvAlarmPowerOffEnable+0x3a>
    					sprintf(( char * ) pcWriteBuffer,"The PowerOff-Alarm has been disabled");
 8003c64:	2225      	movs	r2, #37	; 0x25
 8003c66:	4906      	ldr	r1, [pc, #24]	; (8003c80 <prvAlarmPowerOffEnable+0x58>)
 8003c68:	0020      	movs	r0, r4
 8003c6a:	f001 fc13 	bl	8005494 <memcpy>
    					break;
 8003c6e:	e7f4      	b.n	8003c5a <prvAlarmPowerOffEnable+0x32>
        	    		sprintf(( char * ) pcWriteBuffer,"The PowerOff-Alarm has been enabled");
 8003c70:	2224      	movs	r2, #36	; 0x24
 8003c72:	4904      	ldr	r1, [pc, #16]	; (8003c84 <prvAlarmPowerOffEnable+0x5c>)
 8003c74:	0020      	movs	r0, r4
 8003c76:	f001 fc0d 	bl	8005494 <memcpy>
        	    		break;
 8003c7a:	e7ee      	b.n	8003c5a <prvAlarmPowerOffEnable+0x32>
 8003c7c:	200004a4 	.word	0x200004a4
 8003c80:	08006190 	.word	0x08006190
 8003c84:	080061b8 	.word	0x080061b8

08003c88 <prvAlarmPowerOffTime>:
{
 8003c88:	b570      	push	{r4, r5, r6, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	0005      	movs	r5, r0
 8003c8e:	0016      	movs	r6, r2
	pcParameter1 = FreeRTOS_CLIGetParameter
 8003c90:	aa01      	add	r2, sp, #4
 8003c92:	2101      	movs	r1, #1
 8003c94:	0030      	movs	r0, r6
 8003c96:	f7ff fae7 	bl	8003268 <FreeRTOS_CLIGetParameter>
 8003c9a:	0004      	movs	r4, r0
	pcParameter2 = FreeRTOS_CLIGetParameter
 8003c9c:	466a      	mov	r2, sp
 8003c9e:	2102      	movs	r1, #2
 8003ca0:	0030      	movs	r0, r6
 8003ca2:	f7ff fae1 	bl	8003268 <FreeRTOS_CLIGetParameter>
 8003ca6:	0006      	movs	r6, r0
	configASSERT( pcWriteBuffer );
 8003ca8:	2d00      	cmp	r5, #0
 8003caa:	d101      	bne.n	8003cb0 <prvAlarmPowerOffTime+0x28>
 8003cac:	b672      	cpsid	i
 8003cae:	e7fe      	b.n	8003cae <prvAlarmPowerOffTime+0x26>
    pcParameter1[ xParameter1StringLength ] = 0x00;
 8003cb0:	9b01      	ldr	r3, [sp, #4]
 8003cb2:	18e3      	adds	r3, r4, r3
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	701a      	strb	r2, [r3, #0]
    pcParameter2[ xParameter2StringLength ] = 0x00;
 8003cb8:	9b00      	ldr	r3, [sp, #0]
 8003cba:	18c3      	adds	r3, r0, r3
 8003cbc:	701a      	strb	r2, [r3, #0]
	hour = ascii2int(pcParameter1);
 8003cbe:	0020      	movs	r0, r4
 8003cc0:	f7ff ff9c 	bl	8003bfc <ascii2int>
 8003cc4:	b2c4      	uxtb	r4, r0
	min = ascii2int(pcParameter2);
 8003cc6:	0030      	movs	r0, r6
 8003cc8:	f7ff ff98 	bl	8003bfc <ascii2int>
	alarm_hour_off = hour;
 8003ccc:	4e07      	ldr	r6, [pc, #28]	; (8003cec <prvAlarmPowerOffTime+0x64>)
 8003cce:	7034      	strb	r4, [r6, #0]
	alarm_min_off = min;
 8003cd0:	4c07      	ldr	r4, [pc, #28]	; (8003cf0 <prvAlarmPowerOffTime+0x68>)
 8003cd2:	7020      	strb	r0, [r4, #0]
	flashConfig();
 8003cd4:	f000 fe68 	bl	80049a8 <flashConfig>
	sprintf(( char * ) pcWriteBuffer,"The time of the Time-Alarm has been set to %02d:%02d",alarm_hour_off, alarm_min_off);
 8003cd8:	7823      	ldrb	r3, [r4, #0]
 8003cda:	7832      	ldrb	r2, [r6, #0]
 8003cdc:	4905      	ldr	r1, [pc, #20]	; (8003cf4 <prvAlarmPowerOffTime+0x6c>)
 8003cde:	0028      	movs	r0, r5
 8003ce0:	f001 fca4 	bl	800562c <siprintf>
}
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	b002      	add	sp, #8
 8003ce8:	bd70      	pop	{r4, r5, r6, pc}
 8003cea:	46c0      	nop			; (mov r8, r8)
 8003cec:	200004b2 	.word	0x200004b2
 8003cf0:	200004a3 	.word	0x200004a3
 8003cf4:	080061dc 	.word	0x080061dc

08003cf8 <prvAlarmDate>:
{
 8003cf8:	b570      	push	{r4, r5, r6, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	0005      	movs	r5, r0
 8003cfe:	0016      	movs	r6, r2
	pcParameter1 = FreeRTOS_CLIGetParameter
 8003d00:	aa01      	add	r2, sp, #4
 8003d02:	2101      	movs	r1, #1
 8003d04:	0030      	movs	r0, r6
 8003d06:	f7ff faaf 	bl	8003268 <FreeRTOS_CLIGetParameter>
 8003d0a:	0004      	movs	r4, r0
	pcParameter2 = FreeRTOS_CLIGetParameter
 8003d0c:	466a      	mov	r2, sp
 8003d0e:	2102      	movs	r1, #2
 8003d10:	0030      	movs	r0, r6
 8003d12:	f7ff faa9 	bl	8003268 <FreeRTOS_CLIGetParameter>
 8003d16:	0006      	movs	r6, r0
	configASSERT( pcWriteBuffer );
 8003d18:	2d00      	cmp	r5, #0
 8003d1a:	d101      	bne.n	8003d20 <prvAlarmDate+0x28>
 8003d1c:	b672      	cpsid	i
 8003d1e:	e7fe      	b.n	8003d1e <prvAlarmDate+0x26>
    pcParameter1[ xParameter1StringLength ] = 0x00;
 8003d20:	9b01      	ldr	r3, [sp, #4]
 8003d22:	18e3      	adds	r3, r4, r3
 8003d24:	2200      	movs	r2, #0
 8003d26:	701a      	strb	r2, [r3, #0]
    pcParameter2[ xParameter2StringLength ] = 0x00;
 8003d28:	9b00      	ldr	r3, [sp, #0]
 8003d2a:	18c3      	adds	r3, r0, r3
 8003d2c:	701a      	strb	r2, [r3, #0]
	day = ascii2int(pcParameter1);
 8003d2e:	0020      	movs	r0, r4
 8003d30:	f7ff ff64 	bl	8003bfc <ascii2int>
 8003d34:	b2c4      	uxtb	r4, r0
	month = ascii2int(pcParameter2);
 8003d36:	0030      	movs	r0, r6
 8003d38:	f7ff ff60 	bl	8003bfc <ascii2int>
	alarm_day = day;
 8003d3c:	4e07      	ldr	r6, [pc, #28]	; (8003d5c <prvAlarmDate+0x64>)
 8003d3e:	7034      	strb	r4, [r6, #0]
	alarm_month = month;
 8003d40:	4c07      	ldr	r4, [pc, #28]	; (8003d60 <prvAlarmDate+0x68>)
 8003d42:	7020      	strb	r0, [r4, #0]
	flashConfig();
 8003d44:	f000 fe30 	bl	80049a8 <flashConfig>
	sprintf(( char * ) pcWriteBuffer,"The date of the Date-Alarm has been set to %02d.%02d", alarm_day, alarm_month);
 8003d48:	7823      	ldrb	r3, [r4, #0]
 8003d4a:	7832      	ldrb	r2, [r6, #0]
 8003d4c:	4905      	ldr	r1, [pc, #20]	; (8003d64 <prvAlarmDate+0x6c>)
 8003d4e:	0028      	movs	r0, r5
 8003d50:	f001 fc6c 	bl	800562c <siprintf>
}
 8003d54:	2000      	movs	r0, #0
 8003d56:	b002      	add	sp, #8
 8003d58:	bd70      	pop	{r4, r5, r6, pc}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	200004af 	.word	0x200004af
 8003d60:	200004ac 	.word	0x200004ac
 8003d64:	08006088 	.word	0x08006088

08003d68 <prvAlarmWeekday>:
{
 8003d68:	b530      	push	{r4, r5, lr}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	0004      	movs	r4, r0
 8003d6e:	0010      	movs	r0, r2
	pcParameter1 = FreeRTOS_CLIGetParameter
 8003d70:	aa05      	add	r2, sp, #20
 8003d72:	2101      	movs	r1, #1
 8003d74:	f7ff fa78 	bl	8003268 <FreeRTOS_CLIGetParameter>
	configASSERT( pcWriteBuffer );
 8003d78:	2c00      	cmp	r4, #0
 8003d7a:	d012      	beq.n	8003da2 <prvAlarmWeekday+0x3a>
    pcParameter1[ xParameter1StringLength ] = 0x00;
 8003d7c:	9b05      	ldr	r3, [sp, #20]
 8003d7e:	18c3      	adds	r3, r0, r3
 8003d80:	2200      	movs	r2, #0
 8003d82:	701a      	strb	r2, [r3, #0]
	weekday = ascii2int(pcParameter1);
 8003d84:	f7ff ff3a 	bl	8003bfc <ascii2int>
 8003d88:	0005      	movs	r5, r0
	alarm_weekday = weekday;
 8003d8a:	4b26      	ldr	r3, [pc, #152]	; (8003e24 <prvAlarmWeekday+0xbc>)
 8003d8c:	7018      	strb	r0, [r3, #0]
	flashConfig();
 8003d8e:	f000 fe0b 	bl	80049a8 <flashConfig>
	switch(weekday)
 8003d92:	23ff      	movs	r3, #255	; 0xff
 8003d94:	402b      	ands	r3, r5
 8003d96:	2b07      	cmp	r3, #7
 8003d98:	d80d      	bhi.n	8003db6 <prvAlarmWeekday+0x4e>
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4a22      	ldr	r2, [pc, #136]	; (8003e28 <prvAlarmWeekday+0xc0>)
 8003d9e:	58d3      	ldr	r3, [r2, r3]
 8003da0:	469f      	mov	pc, r3
	configASSERT( pcWriteBuffer );
 8003da2:	b672      	cpsid	i
 8003da4:	e7fe      	b.n	8003da4 <prvAlarmWeekday+0x3c>
		case 1: strcpy(weekday_message, "Monday"); break;
 8003da6:	4b21      	ldr	r3, [pc, #132]	; (8003e2c <prvAlarmWeekday+0xc4>)
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	9200      	str	r2, [sp, #0]
 8003dac:	889a      	ldrh	r2, [r3, #4]
 8003dae:	4669      	mov	r1, sp
 8003db0:	808a      	strh	r2, [r1, #4]
 8003db2:	799b      	ldrb	r3, [r3, #6]
 8003db4:	718b      	strb	r3, [r1, #6]
	sprintf(( char * ) pcWriteBuffer,"The Weekday-Alarm has been set to %s", weekday_message);
 8003db6:	466a      	mov	r2, sp
 8003db8:	491d      	ldr	r1, [pc, #116]	; (8003e30 <prvAlarmWeekday+0xc8>)
 8003dba:	0020      	movs	r0, r4
 8003dbc:	f001 fc36 	bl	800562c <siprintf>
}
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	b007      	add	sp, #28
 8003dc4:	bd30      	pop	{r4, r5, pc}
		case 2: strcpy(weekday_message, "Tuesday"); break;
 8003dc6:	466a      	mov	r2, sp
 8003dc8:	4b1a      	ldr	r3, [pc, #104]	; (8003e34 <prvAlarmWeekday+0xcc>)
 8003dca:	cb03      	ldmia	r3!, {r0, r1}
 8003dcc:	c203      	stmia	r2!, {r0, r1}
 8003dce:	e7f2      	b.n	8003db6 <prvAlarmWeekday+0x4e>
		case 3: strcpy(weekday_message, "Wednesday"); break;
 8003dd0:	466b      	mov	r3, sp
 8003dd2:	4a19      	ldr	r2, [pc, #100]	; (8003e38 <prvAlarmWeekday+0xd0>)
 8003dd4:	ca03      	ldmia	r2!, {r0, r1}
 8003dd6:	c303      	stmia	r3!, {r0, r1}
 8003dd8:	0019      	movs	r1, r3
 8003dda:	8813      	ldrh	r3, [r2, #0]
 8003ddc:	800b      	strh	r3, [r1, #0]
 8003dde:	e7ea      	b.n	8003db6 <prvAlarmWeekday+0x4e>
		case 4: strcpy(weekday_message, "Thursday"); break;
 8003de0:	466b      	mov	r3, sp
 8003de2:	4a16      	ldr	r2, [pc, #88]	; (8003e3c <prvAlarmWeekday+0xd4>)
 8003de4:	ca03      	ldmia	r2!, {r0, r1}
 8003de6:	c303      	stmia	r3!, {r0, r1}
 8003de8:	0019      	movs	r1, r3
 8003dea:	7813      	ldrb	r3, [r2, #0]
 8003dec:	700b      	strb	r3, [r1, #0]
 8003dee:	e7e2      	b.n	8003db6 <prvAlarmWeekday+0x4e>
		case 5: strcpy(weekday_message, "Friday"); break;
 8003df0:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <prvAlarmWeekday+0xd8>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	9200      	str	r2, [sp, #0]
 8003df6:	889a      	ldrh	r2, [r3, #4]
 8003df8:	4669      	mov	r1, sp
 8003dfa:	808a      	strh	r2, [r1, #4]
 8003dfc:	799b      	ldrb	r3, [r3, #6]
 8003dfe:	718b      	strb	r3, [r1, #6]
 8003e00:	e7d9      	b.n	8003db6 <prvAlarmWeekday+0x4e>
		case 6: strcpy(weekday_message, "Saturday"); break;
 8003e02:	466b      	mov	r3, sp
 8003e04:	4a0f      	ldr	r2, [pc, #60]	; (8003e44 <prvAlarmWeekday+0xdc>)
 8003e06:	ca03      	ldmia	r2!, {r0, r1}
 8003e08:	c303      	stmia	r3!, {r0, r1}
 8003e0a:	0019      	movs	r1, r3
 8003e0c:	7813      	ldrb	r3, [r2, #0]
 8003e0e:	700b      	strb	r3, [r1, #0]
 8003e10:	e7d1      	b.n	8003db6 <prvAlarmWeekday+0x4e>
		case 7: strcpy(weekday_message, "Sunday"); break;
 8003e12:	4b0d      	ldr	r3, [pc, #52]	; (8003e48 <prvAlarmWeekday+0xe0>)
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	9200      	str	r2, [sp, #0]
 8003e18:	889a      	ldrh	r2, [r3, #4]
 8003e1a:	4669      	mov	r1, sp
 8003e1c:	808a      	strh	r2, [r1, #4]
 8003e1e:	799b      	ldrb	r3, [r3, #6]
 8003e20:	718b      	strb	r3, [r1, #6]
 8003e22:	e7c8      	b.n	8003db6 <prvAlarmWeekday+0x4e>
 8003e24:	200004b8 	.word	0x200004b8
 8003e28:	08005ee8 	.word	0x08005ee8
 8003e2c:	08006394 	.word	0x08006394
 8003e30:	08006240 	.word	0x08006240
 8003e34:	0800639c 	.word	0x0800639c
 8003e38:	080063a4 	.word	0x080063a4
 8003e3c:	080063b0 	.word	0x080063b0
 8003e40:	080063bc 	.word	0x080063bc
 8003e44:	080063c4 	.word	0x080063c4
 8003e48:	080063d0 	.word	0x080063d0

08003e4c <prvAlarmTime>:
{
 8003e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	0005      	movs	r5, r0
 8003e52:	0014      	movs	r4, r2
	pcParameter1 = FreeRTOS_CLIGetParameter
 8003e54:	aa01      	add	r2, sp, #4
 8003e56:	2101      	movs	r1, #1
 8003e58:	0020      	movs	r0, r4
 8003e5a:	f7ff fa05 	bl	8003268 <FreeRTOS_CLIGetParameter>
 8003e5e:	0006      	movs	r6, r0
	pcParameter2 = FreeRTOS_CLIGetParameter
 8003e60:	466a      	mov	r2, sp
 8003e62:	2102      	movs	r1, #2
 8003e64:	0020      	movs	r0, r4
 8003e66:	f7ff f9ff 	bl	8003268 <FreeRTOS_CLIGetParameter>
 8003e6a:	0004      	movs	r4, r0
	configASSERT( pcWriteBuffer );
 8003e6c:	2d00      	cmp	r5, #0
 8003e6e:	d101      	bne.n	8003e74 <prvAlarmTime+0x28>
 8003e70:	b672      	cpsid	i
 8003e72:	e7fe      	b.n	8003e72 <prvAlarmTime+0x26>
    pcParameter1[ xParameter1StringLength ] = 0x00;
 8003e74:	9b01      	ldr	r3, [sp, #4]
 8003e76:	18f3      	adds	r3, r6, r3
 8003e78:	2200      	movs	r2, #0
 8003e7a:	701a      	strb	r2, [r3, #0]
    pcParameter2[ xParameter2StringLength ] = 0x00;
 8003e7c:	9b00      	ldr	r3, [sp, #0]
 8003e7e:	18c3      	adds	r3, r0, r3
 8003e80:	701a      	strb	r2, [r3, #0]
	hour = ascii2int(pcParameter1);
 8003e82:	0030      	movs	r0, r6
 8003e84:	f7ff feba 	bl	8003bfc <ascii2int>
 8003e88:	0006      	movs	r6, r0
 8003e8a:	b2c7      	uxtb	r7, r0
	min = ascii2int(pcParameter2);
 8003e8c:	0020      	movs	r0, r4
 8003e8e:	f7ff feb5 	bl	8003bfc <ascii2int>
 8003e92:	0004      	movs	r4, r0
	alarm_hour = hour;
 8003e94:	4b08      	ldr	r3, [pc, #32]	; (8003eb8 <prvAlarmTime+0x6c>)
 8003e96:	701f      	strb	r7, [r3, #0]
	alarm_min = min;
 8003e98:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <prvAlarmTime+0x70>)
 8003e9a:	7018      	strb	r0, [r3, #0]
	flashConfig();
 8003e9c:	f000 fd84 	bl	80049a8 <flashConfig>
	sprintf(( char * ) pcWriteBuffer,"The WakeUp-Alarm has been set to %02d:%02d", hour , min);
 8003ea0:	22ff      	movs	r2, #255	; 0xff
 8003ea2:	0023      	movs	r3, r4
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	4032      	ands	r2, r6
 8003ea8:	4905      	ldr	r1, [pc, #20]	; (8003ec0 <prvAlarmTime+0x74>)
 8003eaa:	0028      	movs	r0, r5
 8003eac:	f001 fbbe 	bl	800562c <siprintf>
}
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	b003      	add	sp, #12
 8003eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	20000495 	.word	0x20000495
 8003ebc:	200004b9 	.word	0x200004b9
 8003ec0:	08006214 	.word	0x08006214

08003ec4 <prvAlarmEnable>:
{
 8003ec4:	b530      	push	{r4, r5, lr}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	0004      	movs	r4, r0
 8003eca:	0010      	movs	r0, r2
	pcParameter1 = FreeRTOS_CLIGetParameter
 8003ecc:	aa01      	add	r2, sp, #4
 8003ece:	2101      	movs	r1, #1
 8003ed0:	f7ff f9ca 	bl	8003268 <FreeRTOS_CLIGetParameter>
	configASSERT( pcWriteBuffer );
 8003ed4:	2c00      	cmp	r4, #0
 8003ed6:	d011      	beq.n	8003efc <prvAlarmEnable+0x38>
    pcParameter1[ xParameter1StringLength ] = 0x00;
 8003ed8:	9b01      	ldr	r3, [sp, #4]
 8003eda:	18c3      	adds	r3, r0, r3
 8003edc:	2200      	movs	r2, #0
 8003ede:	701a      	strb	r2, [r3, #0]
    alarm_enable_temp = ascii2int(pcParameter1);
 8003ee0:	f7ff fe8c 	bl	8003bfc <ascii2int>
    alarm_enable = alarm_enable_temp;
 8003ee4:	4d0c      	ldr	r5, [pc, #48]	; (8003f18 <prvAlarmEnable+0x54>)
 8003ee6:	7028      	strb	r0, [r5, #0]
    flashConfig();
 8003ee8:	f000 fd5e 	bl	80049a8 <flashConfig>
    switch (alarm_enable)
 8003eec:	782b      	ldrb	r3, [r5, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d006      	beq.n	8003f00 <prvAlarmEnable+0x3c>
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d00a      	beq.n	8003f0c <prvAlarmEnable+0x48>
}
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	b003      	add	sp, #12
 8003efa:	bd30      	pop	{r4, r5, pc}
	configASSERT( pcWriteBuffer );
 8003efc:	b672      	cpsid	i
 8003efe:	e7fe      	b.n	8003efe <prvAlarmEnable+0x3a>
    					sprintf(( char * ) pcWriteBuffer,"The WakeUp-Alarm has been disabled");
 8003f00:	2223      	movs	r2, #35	; 0x23
 8003f02:	4906      	ldr	r1, [pc, #24]	; (8003f1c <prvAlarmEnable+0x58>)
 8003f04:	0020      	movs	r0, r4
 8003f06:	f001 fac5 	bl	8005494 <memcpy>
    					break;
 8003f0a:	e7f4      	b.n	8003ef6 <prvAlarmEnable+0x32>
        	    		sprintf(( char * ) pcWriteBuffer,"The WakeUp-Alarm has been enabled");
 8003f0c:	2222      	movs	r2, #34	; 0x22
 8003f0e:	4904      	ldr	r1, [pc, #16]	; (8003f20 <prvAlarmEnable+0x5c>)
 8003f10:	0020      	movs	r0, r4
 8003f12:	f001 fabf 	bl	8005494 <memcpy>
        	    		break;
 8003f16:	e7ee      	b.n	8003ef6 <prvAlarmEnable+0x32>
 8003f18:	200004b3 	.word	0x200004b3
 8003f1c:	080060c0 	.word	0x080060c0
 8003f20:	080060e4 	.word	0x080060e4

08003f24 <prvAlarmMode>:
{
 8003f24:	b510      	push	{r4, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	0004      	movs	r4, r0
 8003f2a:	0010      	movs	r0, r2
	pcParameter1 = FreeRTOS_CLIGetParameter
 8003f2c:	aa01      	add	r2, sp, #4
 8003f2e:	2101      	movs	r1, #1
 8003f30:	f7ff f99a 	bl	8003268 <FreeRTOS_CLIGetParameter>
	configASSERT( pcWriteBuffer );
 8003f34:	2c00      	cmp	r4, #0
 8003f36:	d010      	beq.n	8003f5a <prvAlarmMode+0x36>
    pcParameter1[ xParameter1StringLength ] = 0x00;
 8003f38:	9b01      	ldr	r3, [sp, #4]
 8003f3a:	18c3      	adds	r3, r0, r3
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	701a      	strb	r2, [r3, #0]
    alarm_modus = ascii2int(pcParameter1);
 8003f40:	f7ff fe5c 	bl	8003bfc <ascii2int>
    switch (alarm_modus)
 8003f44:	23ff      	movs	r3, #255	; 0xff
 8003f46:	4018      	ands	r0, r3
 8003f48:	2802      	cmp	r0, #2
 8003f4a:	d018      	beq.n	8003f7e <prvAlarmMode+0x5a>
 8003f4c:	2803      	cmp	r0, #3
 8003f4e:	d026      	beq.n	8003f9e <prvAlarmMode+0x7a>
 8003f50:	2801      	cmp	r0, #1
 8003f52:	d004      	beq.n	8003f5e <prvAlarmMode+0x3a>
}
 8003f54:	2000      	movs	r0, #0
 8003f56:	b002      	add	sp, #8
 8003f58:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8003f5a:	b672      	cpsid	i
 8003f5c:	e7fe      	b.n	8003f5c <prvAlarmMode+0x38>
					alarmTime = 1;
 8003f5e:	2201      	movs	r2, #1
 8003f60:	4b17      	ldr	r3, [pc, #92]	; (8003fc0 <prvAlarmMode+0x9c>)
 8003f62:	701a      	strb	r2, [r3, #0]
					alarmDate = 0;
 8003f64:	2300      	movs	r3, #0
 8003f66:	4a17      	ldr	r2, [pc, #92]	; (8003fc4 <prvAlarmMode+0xa0>)
 8003f68:	7013      	strb	r3, [r2, #0]
					alarmWeekDay = 0;
 8003f6a:	4a17      	ldr	r2, [pc, #92]	; (8003fc8 <prvAlarmMode+0xa4>)
 8003f6c:	7013      	strb	r3, [r2, #0]
					flashConfig();
 8003f6e:	f000 fd1b 	bl	80049a8 <flashConfig>
					sprintf(( char * ) pcWriteBuffer,"The WakeUp-Alarm has been set to ""Time-Alarm""");
 8003f72:	222c      	movs	r2, #44	; 0x2c
 8003f74:	4915      	ldr	r1, [pc, #84]	; (8003fcc <prvAlarmMode+0xa8>)
 8003f76:	0020      	movs	r0, r4
 8003f78:	f001 fa8c 	bl	8005494 <memcpy>
					break;
 8003f7c:	e7ea      	b.n	8003f54 <prvAlarmMode+0x30>
    	    		alarmTime = 0;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	4a0f      	ldr	r2, [pc, #60]	; (8003fc0 <prvAlarmMode+0x9c>)
 8003f82:	7013      	strb	r3, [r2, #0]
    	    		alarmDate = 1;
 8003f84:	2101      	movs	r1, #1
 8003f86:	4a0f      	ldr	r2, [pc, #60]	; (8003fc4 <prvAlarmMode+0xa0>)
 8003f88:	7011      	strb	r1, [r2, #0]
    	    		alarmWeekDay = 0;
 8003f8a:	4a0f      	ldr	r2, [pc, #60]	; (8003fc8 <prvAlarmMode+0xa4>)
 8003f8c:	7013      	strb	r3, [r2, #0]
    	    		flashConfig();
 8003f8e:	f000 fd0b 	bl	80049a8 <flashConfig>
    	    		sprintf(( char * ) pcWriteBuffer,"The WakeUp-Alarm has been set to ""Date-Alarm""");
 8003f92:	222c      	movs	r2, #44	; 0x2c
 8003f94:	490e      	ldr	r1, [pc, #56]	; (8003fd0 <prvAlarmMode+0xac>)
 8003f96:	0020      	movs	r0, r4
 8003f98:	f001 fa7c 	bl	8005494 <memcpy>
    	    		break;
 8003f9c:	e7da      	b.n	8003f54 <prvAlarmMode+0x30>
    	    		alarmTime = 0;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	4a07      	ldr	r2, [pc, #28]	; (8003fc0 <prvAlarmMode+0x9c>)
 8003fa2:	7013      	strb	r3, [r2, #0]
    	    		alarmDate = 0;
 8003fa4:	4a07      	ldr	r2, [pc, #28]	; (8003fc4 <prvAlarmMode+0xa0>)
 8003fa6:	7013      	strb	r3, [r2, #0]
    	    		alarmWeekDay = 1;
 8003fa8:	2201      	movs	r2, #1
 8003faa:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <prvAlarmMode+0xa4>)
 8003fac:	701a      	strb	r2, [r3, #0]
    	    		flashConfig();
 8003fae:	f000 fcfb 	bl	80049a8 <flashConfig>
    	    		sprintf(( char * ) pcWriteBuffer,"The WakeUp-Alarm has been set to ""Weekday-Alarm""");
 8003fb2:	222f      	movs	r2, #47	; 0x2f
 8003fb4:	4907      	ldr	r1, [pc, #28]	; (8003fd4 <prvAlarmMode+0xb0>)
 8003fb6:	0020      	movs	r0, r4
 8003fb8:	f001 fa6c 	bl	8005494 <memcpy>
    	    		break;
 8003fbc:	e7ca      	b.n	8003f54 <prvAlarmMode+0x30>
 8003fbe:	46c0      	nop			; (mov r8, r8)
 8003fc0:	20000494 	.word	0x20000494
 8003fc4:	200004ae 	.word	0x200004ae
 8003fc8:	200004b6 	.word	0x200004b6
 8003fcc:	08006108 	.word	0x08006108
 8003fd0:	08006134 	.word	0x08006134
 8003fd4:	08006160 	.word	0x08006160

08003fd8 <prvWarning>:
{
 8003fd8:	b530      	push	{r4, r5, lr}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	0004      	movs	r4, r0
 8003fde:	0010      	movs	r0, r2
	pcParameter1 = FreeRTOS_CLIGetParameter
 8003fe0:	aa01      	add	r2, sp, #4
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	f7ff f940 	bl	8003268 <FreeRTOS_CLIGetParameter>
	configASSERT( pcWriteBuffer );
 8003fe8:	2c00      	cmp	r4, #0
 8003fea:	d011      	beq.n	8004010 <prvWarning+0x38>
    pcParameter1[ xParameter1StringLength ] = 0x00;
 8003fec:	9b01      	ldr	r3, [sp, #4]
 8003fee:	18c3      	adds	r3, r0, r3
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]
    warning_enable_temp = ascii2int(pcParameter1);
 8003ff4:	f7ff fe02 	bl	8003bfc <ascii2int>
    warning_enable = warning_enable_temp;
 8003ff8:	4d0c      	ldr	r5, [pc, #48]	; (800402c <prvWarning+0x54>)
 8003ffa:	7028      	strb	r0, [r5, #0]
    flashConfig();
 8003ffc:	f000 fcd4 	bl	80049a8 <flashConfig>
    switch (warning_enable)
 8004000:	782b      	ldrb	r3, [r5, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d006      	beq.n	8004014 <prvWarning+0x3c>
 8004006:	2b01      	cmp	r3, #1
 8004008:	d00a      	beq.n	8004020 <prvWarning+0x48>
}
 800400a:	2000      	movs	r0, #0
 800400c:	b003      	add	sp, #12
 800400e:	bd30      	pop	{r4, r5, pc}
	configASSERT( pcWriteBuffer );
 8004010:	b672      	cpsid	i
 8004012:	e7fe      	b.n	8004012 <prvWarning+0x3a>
    					sprintf(( char * ) pcWriteBuffer,"The Powerfail Warning has been deactivated");
 8004014:	222b      	movs	r2, #43	; 0x2b
 8004016:	4906      	ldr	r1, [pc, #24]	; (8004030 <prvWarning+0x58>)
 8004018:	0020      	movs	r0, r4
 800401a:	f001 fa3b 	bl	8005494 <memcpy>
    					break;
 800401e:	e7f4      	b.n	800400a <prvWarning+0x32>
        	    		sprintf(( char * ) pcWriteBuffer,"The Powerfail Warning has been enabled");
 8004020:	2227      	movs	r2, #39	; 0x27
 8004022:	4904      	ldr	r1, [pc, #16]	; (8004034 <prvWarning+0x5c>)
 8004024:	0020      	movs	r0, r4
 8004026:	f001 fa35 	bl	8005494 <memcpy>
        	    		break;
 800402a:	e7ee      	b.n	800400a <prvWarning+0x32>
 800402c:	200004b4 	.word	0x200004b4
 8004030:	080066fc 	.word	0x080066fc
 8004034:	08006728 	.word	0x08006728

08004038 <prvShutdownEnable>:
{
 8004038:	b530      	push	{r4, r5, lr}
 800403a:	b083      	sub	sp, #12
 800403c:	0004      	movs	r4, r0
 800403e:	0010      	movs	r0, r2
	pcParameter1 = FreeRTOS_CLIGetParameter
 8004040:	aa01      	add	r2, sp, #4
 8004042:	2101      	movs	r1, #1
 8004044:	f7ff f910 	bl	8003268 <FreeRTOS_CLIGetParameter>
	configASSERT( pcWriteBuffer );
 8004048:	2c00      	cmp	r4, #0
 800404a:	d011      	beq.n	8004070 <prvShutdownEnable+0x38>
    pcParameter1[ xParameter1StringLength ] = 0x00;
 800404c:	9b01      	ldr	r3, [sp, #4]
 800404e:	18c3      	adds	r3, r0, r3
 8004050:	2200      	movs	r2, #0
 8004052:	701a      	strb	r2, [r3, #0]
    shutdown_enable_temp = ascii2int(pcParameter1);
 8004054:	f7ff fdd2 	bl	8003bfc <ascii2int>
    shutdown_enable = shutdown_enable_temp;
 8004058:	4d0c      	ldr	r5, [pc, #48]	; (800408c <prvShutdownEnable+0x54>)
 800405a:	7028      	strb	r0, [r5, #0]
    flashConfig();
 800405c:	f000 fca4 	bl	80049a8 <flashConfig>
    switch (shutdown_enable)
 8004060:	782b      	ldrb	r3, [r5, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d006      	beq.n	8004074 <prvShutdownEnable+0x3c>
 8004066:	2b01      	cmp	r3, #1
 8004068:	d00a      	beq.n	8004080 <prvShutdownEnable+0x48>
}
 800406a:	2000      	movs	r0, #0
 800406c:	b003      	add	sp, #12
 800406e:	bd30      	pop	{r4, r5, pc}
	configASSERT( pcWriteBuffer );
 8004070:	b672      	cpsid	i
 8004072:	e7fe      	b.n	8004072 <prvShutdownEnable+0x3a>
    					sprintf(( char * ) pcWriteBuffer,"The Raspberry-Pi Shutdown has been deactivated");
 8004074:	222f      	movs	r2, #47	; 0x2f
 8004076:	4906      	ldr	r1, [pc, #24]	; (8004090 <prvShutdownEnable+0x58>)
 8004078:	0020      	movs	r0, r4
 800407a:	f001 fa0b 	bl	8005494 <memcpy>
    					break;
 800407e:	e7f4      	b.n	800406a <prvShutdownEnable+0x32>
        	    		sprintf(( char * ) pcWriteBuffer,"The Raspberry-Pi Shutdown has been enabled");
 8004080:	222b      	movs	r2, #43	; 0x2b
 8004082:	4904      	ldr	r1, [pc, #16]	; (8004094 <prvShutdownEnable+0x5c>)
 8004084:	0020      	movs	r0, r4
 8004086:	f001 fa05 	bl	8005494 <memcpy>
        	    		break;
 800408a:	e7ee      	b.n	800406a <prvShutdownEnable+0x32>
 800408c:	200004ba 	.word	0x200004ba
 8004090:	080065ac 	.word	0x080065ac
 8004094:	080065dc 	.word	0x080065dc

08004098 <prvSetTimer>:
{
 8004098:	b530      	push	{r4, r5, lr}
 800409a:	b083      	sub	sp, #12
 800409c:	0004      	movs	r4, r0
 800409e:	0010      	movs	r0, r2
	pcParameter1 = FreeRTOS_CLIGetParameter
 80040a0:	aa01      	add	r2, sp, #4
 80040a2:	2101      	movs	r1, #1
 80040a4:	f7ff f8e0 	bl	8003268 <FreeRTOS_CLIGetParameter>
	configASSERT( pcWriteBuffer );
 80040a8:	2c00      	cmp	r4, #0
 80040aa:	d101      	bne.n	80040b0 <prvSetTimer+0x18>
 80040ac:	b672      	cpsid	i
 80040ae:	e7fe      	b.n	80040ae <prvSetTimer+0x16>
    pcParameter1[ xParameter1StringLength ] = 0x00;
 80040b0:	9b01      	ldr	r3, [sp, #4]
 80040b2:	18c3      	adds	r3, r0, r3
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
    timer_sec = ascii2int(pcParameter1);
 80040b8:	f7ff fda0 	bl	8003bfc <ascii2int>
 80040bc:	0005      	movs	r5, r0
    shutdown_time = timer_sec;
 80040be:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <prvSetTimer+0x40>)
 80040c0:	7018      	strb	r0, [r3, #0]
    flashConfig();
 80040c2:	f000 fc71 	bl	80049a8 <flashConfig>
	sprintf(( char * ) pcWriteBuffer,"The Shutdown-Timer has been set to %02d seconds", timer_sec);
 80040c6:	22ff      	movs	r2, #255	; 0xff
 80040c8:	402a      	ands	r2, r5
 80040ca:	4904      	ldr	r1, [pc, #16]	; (80040dc <prvSetTimer+0x44>)
 80040cc:	0020      	movs	r0, r4
 80040ce:	f001 faad 	bl	800562c <siprintf>
}
 80040d2:	2000      	movs	r0, #0
 80040d4:	b003      	add	sp, #12
 80040d6:	bd30      	pop	{r4, r5, pc}
 80040d8:	200004a2 	.word	0x200004a2
 80040dc:	0800634c 	.word	0x0800634c

080040e0 <prvSetDate>:
{
 80040e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040e2:	b08f      	sub	sp, #60	; 0x3c
 80040e4:	9003      	str	r0, [sp, #12]
 80040e6:	0014      	movs	r4, r2
	pcParameter1 = FreeRTOS_CLIGetParameter
 80040e8:	aa08      	add	r2, sp, #32
 80040ea:	2101      	movs	r1, #1
 80040ec:	0020      	movs	r0, r4
 80040ee:	f7ff f8bb 	bl	8003268 <FreeRTOS_CLIGetParameter>
 80040f2:	0007      	movs	r7, r0
	pcParameter2 = FreeRTOS_CLIGetParameter
 80040f4:	aa07      	add	r2, sp, #28
 80040f6:	2102      	movs	r1, #2
 80040f8:	0020      	movs	r0, r4
 80040fa:	f7ff f8b5 	bl	8003268 <FreeRTOS_CLIGetParameter>
 80040fe:	0006      	movs	r6, r0
	pcParameter3 = FreeRTOS_CLIGetParameter
 8004100:	aa06      	add	r2, sp, #24
 8004102:	2103      	movs	r1, #3
 8004104:	0020      	movs	r0, r4
 8004106:	f7ff f8af 	bl	8003268 <FreeRTOS_CLIGetParameter>
 800410a:	0005      	movs	r5, r0
		pcParameter4 = FreeRTOS_CLIGetParameter
 800410c:	aa05      	add	r2, sp, #20
 800410e:	2104      	movs	r1, #4
 8004110:	0020      	movs	r0, r4
 8004112:	f7ff f8a9 	bl	8003268 <FreeRTOS_CLIGetParameter>
 8004116:	0004      	movs	r4, r0
	configASSERT( pcWriteBuffer );
 8004118:	9b03      	ldr	r3, [sp, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d033      	beq.n	8004186 <prvSetDate+0xa6>
    pcParameter1[ xParameter1StringLength ] = 0x00;
 800411e:	9b08      	ldr	r3, [sp, #32]
 8004120:	18fa      	adds	r2, r7, r3
 8004122:	2300      	movs	r3, #0
 8004124:	7013      	strb	r3, [r2, #0]
    pcParameter2[ xParameter2StringLength ] = 0x00;
 8004126:	9a07      	ldr	r2, [sp, #28]
 8004128:	18b2      	adds	r2, r6, r2
 800412a:	7013      	strb	r3, [r2, #0]
    pcParameter3[ xParameter3StringLength ] = 0x00;
 800412c:	9a06      	ldr	r2, [sp, #24]
 800412e:	18aa      	adds	r2, r5, r2
 8004130:	7013      	strb	r3, [r2, #0]
    pcParameter4[ xParameter4StringLength ] = 0x00;
 8004132:	9a05      	ldr	r2, [sp, #20]
 8004134:	1882      	adds	r2, r0, r2
 8004136:	7013      	strb	r3, [r2, #0]
	day = ascii2int(pcParameter1);
 8004138:	0038      	movs	r0, r7
 800413a:	f7ff fd5f 	bl	8003bfc <ascii2int>
 800413e:	b2c7      	uxtb	r7, r0
	month = ascii2int(pcParameter2);
 8004140:	0030      	movs	r0, r6
 8004142:	f7ff fd5b 	bl	8003bfc <ascii2int>
 8004146:	b2c6      	uxtb	r6, r0
	year = ascii2int(pcParameter3);
 8004148:	0028      	movs	r0, r5
 800414a:	f7ff fd57 	bl	8003bfc <ascii2int>
 800414e:	b2c5      	uxtb	r5, r0
	weekday = ascii2int(pcParameter4);
 8004150:	0020      	movs	r0, r4
 8004152:	f7ff fd53 	bl	8003bfc <ascii2int>
 8004156:	0004      	movs	r4, r0
	sdatestructure.Year = year;
 8004158:	a904      	add	r1, sp, #16
 800415a:	70cd      	strb	r5, [r1, #3]
	sdatestructure.Month = month;
 800415c:	704e      	strb	r6, [r1, #1]
	sdatestructure.Date = day;
 800415e:	708f      	strb	r7, [r1, #2]
	sdatestructure.WeekDay = weekday;
 8004160:	7008      	strb	r0, [r1, #0]
	if(HAL_RTC_SetDate(&hrtc,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 8004162:	2200      	movs	r2, #0
 8004164:	482b      	ldr	r0, [pc, #172]	; (8004214 <prvSetDate+0x134>)
 8004166:	f7fd fd53 	bl	8001c10 <HAL_RTC_SetDate>
 800416a:	2800      	cmp	r0, #0
 800416c:	d003      	beq.n	8004176 <prvSetDate+0x96>
		Error_Handler();
 800416e:	492a      	ldr	r1, [pc, #168]	; (8004218 <prvSetDate+0x138>)
 8004170:	482a      	ldr	r0, [pc, #168]	; (800421c <prvSetDate+0x13c>)
 8004172:	f000 fb49 	bl	8004808 <_Error_Handler>
	switch (weekday)
 8004176:	23ff      	movs	r3, #255	; 0xff
 8004178:	4023      	ands	r3, r4
 800417a:	2b07      	cmp	r3, #7
 800417c:	d80d      	bhi.n	800419a <prvSetDate+0xba>
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4a27      	ldr	r2, [pc, #156]	; (8004220 <prvSetDate+0x140>)
 8004182:	58d3      	ldr	r3, [r2, r3]
 8004184:	469f      	mov	pc, r3
	configASSERT( pcWriteBuffer );
 8004186:	b672      	cpsid	i
 8004188:	e7fe      	b.n	8004188 <prvSetDate+0xa8>
		case 1: strcpy(weekday_message, "Monday"); break;
 800418a:	aa09      	add	r2, sp, #36	; 0x24
 800418c:	4b25      	ldr	r3, [pc, #148]	; (8004224 <prvSetDate+0x144>)
 800418e:	6819      	ldr	r1, [r3, #0]
 8004190:	9109      	str	r1, [sp, #36]	; 0x24
 8004192:	8899      	ldrh	r1, [r3, #4]
 8004194:	8091      	strh	r1, [r2, #4]
 8004196:	799b      	ldrb	r3, [r3, #6]
 8004198:	7193      	strb	r3, [r2, #6]
	sprintf(( char * ) pcWriteBuffer,"The date has been set to %s %02d.%02d.20%02d", weekday_message, sdatestructure.Date, sdatestructure.Month, sdatestructure.Year);
 800419a:	aa04      	add	r2, sp, #16
 800419c:	7893      	ldrb	r3, [r2, #2]
 800419e:	7851      	ldrb	r1, [r2, #1]
 80041a0:	78d2      	ldrb	r2, [r2, #3]
 80041a2:	9201      	str	r2, [sp, #4]
 80041a4:	9100      	str	r1, [sp, #0]
 80041a6:	aa09      	add	r2, sp, #36	; 0x24
 80041a8:	491f      	ldr	r1, [pc, #124]	; (8004228 <prvSetDate+0x148>)
 80041aa:	9803      	ldr	r0, [sp, #12]
 80041ac:	f001 fa3e 	bl	800562c <siprintf>
}
 80041b0:	2000      	movs	r0, #0
 80041b2:	b00f      	add	sp, #60	; 0x3c
 80041b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		case 2: strcpy(weekday_message, "Tuesday"); break;
 80041b6:	aa09      	add	r2, sp, #36	; 0x24
 80041b8:	4b1c      	ldr	r3, [pc, #112]	; (800422c <prvSetDate+0x14c>)
 80041ba:	cb03      	ldmia	r3!, {r0, r1}
 80041bc:	c203      	stmia	r2!, {r0, r1}
 80041be:	e7ec      	b.n	800419a <prvSetDate+0xba>
		case 3: strcpy(weekday_message, "Wednesday"); break;
 80041c0:	ab09      	add	r3, sp, #36	; 0x24
 80041c2:	4a1b      	ldr	r2, [pc, #108]	; (8004230 <prvSetDate+0x150>)
 80041c4:	ca03      	ldmia	r2!, {r0, r1}
 80041c6:	c303      	stmia	r3!, {r0, r1}
 80041c8:	0019      	movs	r1, r3
 80041ca:	8813      	ldrh	r3, [r2, #0]
 80041cc:	800b      	strh	r3, [r1, #0]
 80041ce:	e7e4      	b.n	800419a <prvSetDate+0xba>
		case 4: strcpy(weekday_message, "Thursday"); break;
 80041d0:	ab09      	add	r3, sp, #36	; 0x24
 80041d2:	4a18      	ldr	r2, [pc, #96]	; (8004234 <prvSetDate+0x154>)
 80041d4:	ca03      	ldmia	r2!, {r0, r1}
 80041d6:	c303      	stmia	r3!, {r0, r1}
 80041d8:	0019      	movs	r1, r3
 80041da:	7813      	ldrb	r3, [r2, #0]
 80041dc:	700b      	strb	r3, [r1, #0]
 80041de:	e7dc      	b.n	800419a <prvSetDate+0xba>
		case 5: strcpy(weekday_message, "Friday"); break;
 80041e0:	aa09      	add	r2, sp, #36	; 0x24
 80041e2:	4b15      	ldr	r3, [pc, #84]	; (8004238 <prvSetDate+0x158>)
 80041e4:	6819      	ldr	r1, [r3, #0]
 80041e6:	9109      	str	r1, [sp, #36]	; 0x24
 80041e8:	8899      	ldrh	r1, [r3, #4]
 80041ea:	8091      	strh	r1, [r2, #4]
 80041ec:	799b      	ldrb	r3, [r3, #6]
 80041ee:	7193      	strb	r3, [r2, #6]
 80041f0:	e7d3      	b.n	800419a <prvSetDate+0xba>
		case 6: strcpy(weekday_message, "Saturday"); break;
 80041f2:	ab09      	add	r3, sp, #36	; 0x24
 80041f4:	4a11      	ldr	r2, [pc, #68]	; (800423c <prvSetDate+0x15c>)
 80041f6:	ca03      	ldmia	r2!, {r0, r1}
 80041f8:	c303      	stmia	r3!, {r0, r1}
 80041fa:	0019      	movs	r1, r3
 80041fc:	7813      	ldrb	r3, [r2, #0]
 80041fe:	700b      	strb	r3, [r1, #0]
 8004200:	e7cb      	b.n	800419a <prvSetDate+0xba>
		case 7: strcpy(weekday_message, "Sunday"); break;
 8004202:	aa09      	add	r2, sp, #36	; 0x24
 8004204:	4b0e      	ldr	r3, [pc, #56]	; (8004240 <prvSetDate+0x160>)
 8004206:	6819      	ldr	r1, [r3, #0]
 8004208:	9109      	str	r1, [sp, #36]	; 0x24
 800420a:	8899      	ldrh	r1, [r3, #4]
 800420c:	8091      	strh	r1, [r2, #4]
 800420e:	799b      	ldrb	r3, [r3, #6]
 8004210:	7193      	strb	r3, [r2, #6]
 8004212:	e7c2      	b.n	800419a <prvSetDate+0xba>
 8004214:	20000574 	.word	0x20000574
 8004218:	0000026a 	.word	0x0000026a
 800421c:	08006308 	.word	0x08006308
 8004220:	08005f08 	.word	0x08005f08
 8004224:	08006394 	.word	0x08006394
 8004228:	0800631c 	.word	0x0800631c
 800422c:	0800639c 	.word	0x0800639c
 8004230:	080063a4 	.word	0x080063a4
 8004234:	080063b0 	.word	0x080063b0
 8004238:	080063bc 	.word	0x080063bc
 800423c:	080063c4 	.word	0x080063c4
 8004240:	080063d0 	.word	0x080063d0

08004244 <prvSetClock>:
{
 8004244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004246:	b08d      	sub	sp, #52	; 0x34
 8004248:	0004      	movs	r4, r0
 800424a:	9003      	str	r0, [sp, #12]
 800424c:	0015      	movs	r5, r2
	pcParameter1 = FreeRTOS_CLIGetParameter
 800424e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004250:	2101      	movs	r1, #1
 8004252:	0028      	movs	r0, r5
 8004254:	f7ff f808 	bl	8003268 <FreeRTOS_CLIGetParameter>
 8004258:	0007      	movs	r7, r0
	pcParameter2 = FreeRTOS_CLIGetParameter
 800425a:	aa0a      	add	r2, sp, #40	; 0x28
 800425c:	2102      	movs	r1, #2
 800425e:	0028      	movs	r0, r5
 8004260:	f7ff f802 	bl	8003268 <FreeRTOS_CLIGetParameter>
 8004264:	0006      	movs	r6, r0
	pcParameter3 = FreeRTOS_CLIGetParameter
 8004266:	aa09      	add	r2, sp, #36	; 0x24
 8004268:	2103      	movs	r1, #3
 800426a:	0028      	movs	r0, r5
 800426c:	f7fe fffc 	bl	8003268 <FreeRTOS_CLIGetParameter>
 8004270:	0005      	movs	r5, r0
	configASSERT( pcWriteBuffer );
 8004272:	2c00      	cmp	r4, #0
 8004274:	d030      	beq.n	80042d8 <prvSetClock+0x94>
    pcParameter1[ xParameter1StringLength ] = 0x00;
 8004276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004278:	18fb      	adds	r3, r7, r3
 800427a:	2400      	movs	r4, #0
 800427c:	701c      	strb	r4, [r3, #0]
    pcParameter2[ xParameter2StringLength ] = 0x00;
 800427e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004280:	18f3      	adds	r3, r6, r3
 8004282:	701c      	strb	r4, [r3, #0]
    pcParameter3[ xParameter3StringLength ] = 0x00;
 8004284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004286:	18c3      	adds	r3, r0, r3
 8004288:	701c      	strb	r4, [r3, #0]
	hour = ascii2int(pcParameter1);
 800428a:	0038      	movs	r0, r7
 800428c:	f7ff fcb6 	bl	8003bfc <ascii2int>
 8004290:	b2c7      	uxtb	r7, r0
	min = ascii2int(pcParameter2);
 8004292:	0030      	movs	r0, r6
 8004294:	f7ff fcb2 	bl	8003bfc <ascii2int>
 8004298:	b2c6      	uxtb	r6, r0
	sec = ascii2int(pcParameter3);
 800429a:	0028      	movs	r0, r5
 800429c:	f7ff fcae 	bl	8003bfc <ascii2int>
	stimestructure.Hours = hour;
 80042a0:	a904      	add	r1, sp, #16
 80042a2:	700f      	strb	r7, [r1, #0]
	stimestructure.Minutes = min;
 80042a4:	704e      	strb	r6, [r1, #1]
	stimestructure.Seconds = sec;
 80042a6:	7088      	strb	r0, [r1, #2]
	stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 80042a8:	60cc      	str	r4, [r1, #12]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 80042aa:	610c      	str	r4, [r1, #16]
	if(HAL_RTC_SetTime(&hrtc,&stimestructure,RTC_FORMAT_BIN) != HAL_OK)
 80042ac:	2200      	movs	r2, #0
 80042ae:	480b      	ldr	r0, [pc, #44]	; (80042dc <prvSetClock+0x98>)
 80042b0:	f7fd fc30 	bl	8001b14 <HAL_RTC_SetTime>
 80042b4:	2800      	cmp	r0, #0
 80042b6:	d003      	beq.n	80042c0 <prvSetClock+0x7c>
		Error_Handler();
 80042b8:	4909      	ldr	r1, [pc, #36]	; (80042e0 <prvSetClock+0x9c>)
 80042ba:	480a      	ldr	r0, [pc, #40]	; (80042e4 <prvSetClock+0xa0>)
 80042bc:	f000 faa4 	bl	8004808 <_Error_Handler>
	sprintf(( char * ) pcWriteBuffer,"The clock has been set to %02d:%02d:%02d",stimestructure.Hours, stimestructure.Minutes, stimestructure.Seconds);
 80042c0:	a904      	add	r1, sp, #16
 80042c2:	780a      	ldrb	r2, [r1, #0]
 80042c4:	784b      	ldrb	r3, [r1, #1]
 80042c6:	7889      	ldrb	r1, [r1, #2]
 80042c8:	9100      	str	r1, [sp, #0]
 80042ca:	4907      	ldr	r1, [pc, #28]	; (80042e8 <prvSetClock+0xa4>)
 80042cc:	9803      	ldr	r0, [sp, #12]
 80042ce:	f001 f9ad 	bl	800562c <siprintf>
}
 80042d2:	2000      	movs	r0, #0
 80042d4:	b00d      	add	sp, #52	; 0x34
 80042d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 80042d8:	b672      	cpsid	i
 80042da:	e7fe      	b.n	80042da <prvSetClock+0x96>
 80042dc:	20000574 	.word	0x20000574
 80042e0:	00000201 	.word	0x00000201
 80042e4:	08006308 	.word	0x08006308
 80042e8:	080062dc 	.word	0x080062dc

080042ec <prvMode>:
{
 80042ec:	b510      	push	{r4, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	0004      	movs	r4, r0
 80042f2:	0010      	movs	r0, r2
pcParameter1 = FreeRTOS_CLIGetParameter
 80042f4:	aa01      	add	r2, sp, #4
 80042f6:	2101      	movs	r1, #1
 80042f8:	f7fe ffb6 	bl	8003268 <FreeRTOS_CLIGetParameter>
	modus = ascii2int(pcParameter1);
 80042fc:	f7ff fc7e 	bl	8003bfc <ascii2int>
 8004300:	4b07      	ldr	r3, [pc, #28]	; (8004320 <prvMode+0x34>)
 8004302:	7018      	strb	r0, [r3, #0]
	configASSERT( pcWriteBuffer );
 8004304:	2c00      	cmp	r4, #0
 8004306:	d101      	bne.n	800430c <prvMode+0x20>
 8004308:	b672      	cpsid	i
 800430a:	e7fe      	b.n	800430a <prvMode+0x1e>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessage );
 800430c:	2254      	movs	r2, #84	; 0x54
 800430e:	4905      	ldr	r1, [pc, #20]	; (8004324 <prvMode+0x38>)
 8004310:	0020      	movs	r0, r4
 8004312:	f001 f8bf 	bl	8005494 <memcpy>
	flashConfig();
 8004316:	f000 fb47 	bl	80049a8 <flashConfig>
}
 800431a:	2000      	movs	r0, #0
 800431c:	b002      	add	sp, #8
 800431e:	bd10      	pop	{r4, pc}
 8004320:	200004bb 	.word	0x200004bb
 8004324:	0800626c 	.word	0x0800626c

08004328 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{

	rx_ready = 1;
 8004328:	2201      	movs	r2, #1
 800432a:	4b01      	ldr	r3, [pc, #4]	; (8004330 <HAL_UART_RxCpltCallback+0x8>)
 800432c:	701a      	strb	r2, [r3, #0]
}
 800432e:	4770      	bx	lr
 8004330:	20000478 	.word	0x20000478

08004334 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004334:	b082      	sub	sp, #8
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004336:	4a05      	ldr	r2, [pc, #20]	; (800434c <MX_DMA_Init+0x18>)
 8004338:	6951      	ldr	r1, [r2, #20]
 800433a:	2301      	movs	r3, #1
 800433c:	4319      	orrs	r1, r3
 800433e:	6151      	str	r1, [r2, #20]
 8004340:	6952      	ldr	r2, [r2, #20]
 8004342:	4013      	ands	r3, r2
 8004344:	9301      	str	r3, [sp, #4]
 8004346:	9b01      	ldr	r3, [sp, #4]

}
 8004348:	b002      	add	sp, #8
 800434a:	4770      	bx	lr
 800434c:	40021000 	.word	0x40021000

08004350 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8004350:	b570      	push	{r4, r5, r6, lr}
 8004352:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004354:	4b23      	ldr	r3, [pc, #140]	; (80043e4 <MX_GPIO_Init+0x94>)
 8004356:	6959      	ldr	r1, [r3, #20]
 8004358:	2080      	movs	r0, #128	; 0x80
 800435a:	03c0      	lsls	r0, r0, #15
 800435c:	4301      	orrs	r1, r0
 800435e:	6159      	str	r1, [r3, #20]
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	4002      	ands	r2, r0
 8004364:	9200      	str	r2, [sp, #0]
 8004366:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004368:	6959      	ldr	r1, [r3, #20]
 800436a:	2080      	movs	r0, #128	; 0x80
 800436c:	0280      	lsls	r0, r0, #10
 800436e:	4301      	orrs	r1, r0
 8004370:	6159      	str	r1, [r3, #20]
 8004372:	695a      	ldr	r2, [r3, #20]
 8004374:	4002      	ands	r2, r0
 8004376:	9201      	str	r2, [sp, #4]
 8004378:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800437a:	695a      	ldr	r2, [r3, #20]
 800437c:	2180      	movs	r1, #128	; 0x80
 800437e:	02c9      	lsls	r1, r1, #11
 8004380:	430a      	orrs	r2, r1
 8004382:	615a      	str	r2, [r3, #20]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	400b      	ands	r3, r1
 8004388:	9302      	str	r3, [sp, #8]
 800438a:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CTRL_VUSB_Pin|RESET_Rasp_Pin, GPIO_PIN_RESET);
 800438c:	2490      	movs	r4, #144	; 0x90
 800438e:	05e4      	lsls	r4, r4, #23
 8004390:	2200      	movs	r2, #0
 8004392:	2109      	movs	r1, #9
 8004394:	0020      	movs	r0, r4
 8004396:	f7fc ff4f 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CTRL_VREG5_Pin|BOOST_EN_Pin|CTRL_L7987_Pin, GPIO_PIN_SET);
 800439a:	2201      	movs	r2, #1
 800439c:	2116      	movs	r1, #22
 800439e:	0020      	movs	r0, r4
 80043a0:	f7fc ff4a 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CTRL_VUSB_Pin */
  GPIO_InitStruct.Pin = CTRL_VUSB_Pin;
 80043a4:	2501      	movs	r5, #1
 80043a6:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043a8:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80043aa:	2302      	movs	r3, #2
 80043ac:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ae:	2600      	movs	r6, #0
 80043b0:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(CTRL_VUSB_GPIO_Port, &GPIO_InitStruct);
 80043b2:	a903      	add	r1, sp, #12
 80043b4:	0020      	movs	r0, r4
 80043b6:	f7fc fe7f 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CTRL_VREG5_Pin BOOST_EN_Pin CTRL_L7987_Pin */
  GPIO_InitStruct.Pin = CTRL_VREG5_Pin|BOOST_EN_Pin|CTRL_L7987_Pin;
 80043ba:	2316      	movs	r3, #22
 80043bc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043be:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043c0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043c2:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043c4:	a903      	add	r1, sp, #12
 80043c6:	0020      	movs	r0, r4
 80043c8:	f7fc fe76 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Rasp_Pin */
  GPIO_InitStruct.Pin = RESET_Rasp_Pin;
 80043cc:	2308      	movs	r3, #8
 80043ce:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043d0:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d2:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043d4:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(RESET_Rasp_GPIO_Port, &GPIO_InitStruct);
 80043d6:	a903      	add	r1, sp, #12
 80043d8:	0020      	movs	r0, r4
 80043da:	f7fc fe6d 	bl	80010b8 <HAL_GPIO_Init>

}
 80043de:	b008      	add	sp, #32
 80043e0:	bd70      	pop	{r4, r5, r6, pc}
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	40021000 	.word	0x40021000

080043e8 <MX_NVIC_Init>:
{
 80043e8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriority(ADC1_IRQn, 3, 0);
 80043ea:	2200      	movs	r2, #0
 80043ec:	2103      	movs	r1, #3
 80043ee:	200c      	movs	r0, #12
 80043f0:	f7fc fbb0 	bl	8000b54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80043f4:	200c      	movs	r0, #12
 80043f6:	f7fc fbdf 	bl	8000bb8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80043fa:	2200      	movs	r2, #0
 80043fc:	2103      	movs	r1, #3
 80043fe:	201b      	movs	r0, #27
 8004400:	f7fc fba8 	bl	8000b54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004404:	201b      	movs	r0, #27
 8004406:	f7fc fbd7 	bl	8000bb8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 800440a:	2200      	movs	r2, #0
 800440c:	2103      	movs	r1, #3
 800440e:	2009      	movs	r0, #9
 8004410:	f7fc fba0 	bl	8000b54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004414:	2009      	movs	r0, #9
 8004416:	f7fc fbcf 	bl	8000bb8 <HAL_NVIC_EnableIRQ>
}
 800441a:	bd10      	pop	{r4, pc}

0800441c <vApplicationStackOverflowHook>:
{
 800441c:	e7fe      	b.n	800441c <vApplicationStackOverflowHook>

0800441e <Power_Wide>:
 * 		- Power_Bat() deactivates the charging circuit and activates the PowerPath of the Battery
 * 		- Power_Off() deactivates all Powerpathes so the Raspberry Pi turns off completely
 */

void Power_Wide(void)
{
 800441e:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(CTRL_VREG5_GPIO_Port,CTRL_VREG5_Pin,GPIO_PIN_SET);
 8004420:	2490      	movs	r4, #144	; 0x90
 8004422:	05e4      	lsls	r4, r4, #23
 8004424:	2201      	movs	r2, #1
 8004426:	2102      	movs	r1, #2
 8004428:	0020      	movs	r0, r4
 800442a:	f7fc ff05 	bl	8001238 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BOOST_EN_GPIO_Port,BOOST_EN_Pin,GPIO_PIN_SET);
 800442e:	2201      	movs	r2, #1
 8004430:	2104      	movs	r1, #4
 8004432:	0020      	movs	r0, r4
 8004434:	f7fc ff00 	bl	8001238 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CTRL_VUSB_GPIO_Port,CTRL_VUSB_Pin,GPIO_PIN_RESET);
 8004438:	2200      	movs	r2, #0
 800443a:	2101      	movs	r1, #1
 800443c:	0020      	movs	r0, r4
 800443e:	f7fc fefb 	bl	8001238 <HAL_GPIO_WritePin>
}
 8004442:	bd10      	pop	{r4, pc}

08004444 <Power_USB>:

void Power_USB(void)
{
 8004444:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(CTRL_VUSB_GPIO_Port,CTRL_VUSB_Pin,GPIO_PIN_SET);
 8004446:	2490      	movs	r4, #144	; 0x90
 8004448:	05e4      	lsls	r4, r4, #23
 800444a:	2201      	movs	r2, #1
 800444c:	2101      	movs	r1, #1
 800444e:	0020      	movs	r0, r4
 8004450:	f7fc fef2 	bl	8001238 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CTRL_VREG5_GPIO_Port,CTRL_VREG5_Pin,GPIO_PIN_RESET);
 8004454:	2200      	movs	r2, #0
 8004456:	2102      	movs	r1, #2
 8004458:	0020      	movs	r0, r4
 800445a:	f7fc feed 	bl	8001238 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BOOST_EN_GPIO_Port,BOOST_EN_Pin,GPIO_PIN_SET);
 800445e:	2201      	movs	r2, #1
 8004460:	2104      	movs	r1, #4
 8004462:	0020      	movs	r0, r4
 8004464:	f7fc fee8 	bl	8001238 <HAL_GPIO_WritePin>
}
 8004468:	bd10      	pop	{r4, pc}

0800446a <Power_Bat>:

void Power_Bat(void)
{
 800446a:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(BOOST_EN_GPIO_Port,BOOST_EN_Pin,GPIO_PIN_RESET);
 800446c:	2490      	movs	r4, #144	; 0x90
 800446e:	05e4      	lsls	r4, r4, #23
 8004470:	2200      	movs	r2, #0
 8004472:	2104      	movs	r1, #4
 8004474:	0020      	movs	r0, r4
 8004476:	f7fc fedf 	bl	8001238 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CTRL_VREG5_GPIO_Port,CTRL_VREG5_Pin,GPIO_PIN_RESET);
 800447a:	2200      	movs	r2, #0
 800447c:	2102      	movs	r1, #2
 800447e:	0020      	movs	r0, r4
 8004480:	f7fc feda 	bl	8001238 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CTRL_VUSB_GPIO_Port,CTRL_VUSB_Pin,GPIO_PIN_RESET);
 8004484:	2200      	movs	r2, #0
 8004486:	2101      	movs	r1, #1
 8004488:	0020      	movs	r0, r4
 800448a:	f7fc fed5 	bl	8001238 <HAL_GPIO_WritePin>
}
 800448e:	bd10      	pop	{r4, pc}

08004490 <Power_Off>:

void Power_Off(void)
{
 8004490:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(CTRL_VREG5_GPIO_Port,CTRL_VREG5_Pin,GPIO_PIN_RESET);
 8004492:	2490      	movs	r4, #144	; 0x90
 8004494:	05e4      	lsls	r4, r4, #23
 8004496:	2200      	movs	r2, #0
 8004498:	2102      	movs	r1, #2
 800449a:	0020      	movs	r0, r4
 800449c:	f7fc fecc 	bl	8001238 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BOOST_EN_GPIO_Port,BOOST_EN_Pin,GPIO_PIN_SET);
 80044a0:	2201      	movs	r2, #1
 80044a2:	2104      	movs	r1, #4
 80044a4:	0020      	movs	r0, r4
 80044a6:	f7fc fec7 	bl	8001238 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CTRL_VUSB_GPIO_Port,CTRL_VUSB_Pin,GPIO_PIN_RESET);
 80044aa:	2200      	movs	r2, #0
 80044ac:	2101      	movs	r1, #1
 80044ae:	0020      	movs	r0, r4
 80044b0:	f7fc fec2 	bl	8001238 <HAL_GPIO_WritePin>
}
 80044b4:	bd10      	pop	{r4, pc}
	...

080044b8 <ShutdownRPi>:
 * 		- ShutdownRPi() sends the warning to shutdown the Raspberry Pi when the primary voltage source fails
 * 		- PowerBack() sends a message when the primary voltage source comes back
 * 		- PowerfailWarning() sends the warning when the primary voltage source fails but its message doesn't shutdown the RPi
 * 																							  ***/
void ShutdownRPi(void)
{
 80044b8:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&huart1, (uint8_t *)shutdownMessage, sizeof(shutdownMessage), sizeof(shutdownMessage));
 80044ba:	231c      	movs	r3, #28
 80044bc:	221c      	movs	r2, #28
 80044be:	4902      	ldr	r1, [pc, #8]	; (80044c8 <ShutdownRPi+0x10>)
 80044c0:	4802      	ldr	r0, [pc, #8]	; (80044cc <ShutdownRPi+0x14>)
 80044c2:	f7fd ff7d 	bl	80023c0 <HAL_UART_Transmit>
}
 80044c6:	bd10      	pop	{r4, pc}
 80044c8:	20000050 	.word	0x20000050
 80044cc:	20000504 	.word	0x20000504

080044d0 <PowerBack>:

void PowerBack(void)
{
 80044d0:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&huart1, (uint8_t *)powerBackMessage, sizeof(powerBackMessage), sizeof(powerBackMessage));
 80044d2:	231d      	movs	r3, #29
 80044d4:	221d      	movs	r2, #29
 80044d6:	4902      	ldr	r1, [pc, #8]	; (80044e0 <PowerBack+0x10>)
 80044d8:	4802      	ldr	r0, [pc, #8]	; (80044e4 <PowerBack+0x14>)
 80044da:	f7fd ff71 	bl	80023c0 <HAL_UART_Transmit>
}
 80044de:	bd10      	pop	{r4, pc}
 80044e0:	20000010 	.word	0x20000010
 80044e4:	20000504 	.word	0x20000504

080044e8 <PowerfailWarning>:

void PowerfailWarning(void)
{
 80044e8:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&huart1, (uint8_t *)powerfailMessage, sizeof(powerfailMessage), sizeof(powerfailMessage));
 80044ea:	231d      	movs	r3, #29
 80044ec:	221d      	movs	r2, #29
 80044ee:	4904      	ldr	r1, [pc, #16]	; (8004500 <PowerfailWarning+0x18>)
 80044f0:	4804      	ldr	r0, [pc, #16]	; (8004504 <PowerfailWarning+0x1c>)
 80044f2:	f7fd ff65 	bl	80023c0 <HAL_UART_Transmit>
	vTaskDelay(1 * 1000);
 80044f6:	20fa      	movs	r0, #250	; 0xfa
 80044f8:	0080      	lsls	r0, r0, #2
 80044fa:	f7fe fd71 	bl	8002fe0 <vTaskDelay>
}
 80044fe:	bd10      	pop	{r4, pc}
 8004500:	20000030 	.word	0x20000030
 8004504:	20000504 	.word	0x20000504

08004508 <HAL_ADC_LevelOutOfWindowCallback>:
 * 																							  ***/



void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004508:	b510      	push	{r4, lr}
 800450a:	0004      	movs	r4, r0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800450c:	b672      	cpsid	i
    *  The "warning_enable" flag is for the feature to make a powerfail warning without turning on the shutdowntimer
    *  and without shuting down the Raspberry Pi with the warning message through the serial interface.
    *
	 *   ***/

	if (modus == 1)
 800450e:	4b1c      	ldr	r3, [pc, #112]	; (8004580 <HAL_ADC_LevelOutOfWindowCallback+0x78>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d010      	beq.n	8004538 <HAL_ADC_LevelOutOfWindowCallback+0x30>
		if(warning_enable == 1)
		{
			warning_flag = 1;
		}
	}
	else if (modus == 2)
 8004516:	2b02      	cmp	r3, #2
 8004518:	d018      	beq.n	800454c <HAL_ADC_LevelOutOfWindowCallback+0x44>
		if(warning_enable == 1)
		{
			warning_flag = 1;
		}
	}
	else if (modus == 3 || modus == 4)
 800451a:	3b03      	subs	r3, #3
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b01      	cmp	r3, #1
 8004520:	d91e      	bls.n	8004560 <HAL_ADC_LevelOutOfWindowCallback+0x58>
	}


	/*** If the Shutdown-Timer is configured, then the shutdown_flag is activated here
	 * so the shutdown-timer can be started and the shutdown message for the raspberry pi can be sent through the serial interface ***/
	if (shutdown_enable == 1)
 8004522:	4b18      	ldr	r3, [pc, #96]	; (8004584 <HAL_ADC_LevelOutOfWindowCallback+0x7c>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d026      	beq.n	8004578 <HAL_ADC_LevelOutOfWindowCallback+0x70>

	/*** This line deactivates the ADC Watchdog
	 * Its main purpose is to make sure to register a powerfailure probably once
	 * and that the ADC Watchdog Callback wouldn't be retriggered before the powerfailure
	 * processing in the main task have finished ***/
	__HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 800452a:	6822      	ldr	r2, [r4, #0]
 800452c:	6853      	ldr	r3, [r2, #4]
 800452e:	2180      	movs	r1, #128	; 0x80
 8004530:	438b      	bics	r3, r1
 8004532:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8004534:	b662      	cpsie	i
	__enable_irq();
}
 8004536:	bd10      	pop	{r4, pc}
		Power_Wide();
 8004538:	f7ff ff71 	bl	800441e <Power_Wide>
		if(warning_enable == 1)
 800453c:	4b12      	ldr	r3, [pc, #72]	; (8004588 <HAL_ADC_LevelOutOfWindowCallback+0x80>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d1ee      	bne.n	8004522 <HAL_ADC_LevelOutOfWindowCallback+0x1a>
			warning_flag = 1;
 8004544:	2201      	movs	r2, #1
 8004546:	4b11      	ldr	r3, [pc, #68]	; (800458c <HAL_ADC_LevelOutOfWindowCallback+0x84>)
 8004548:	701a      	strb	r2, [r3, #0]
 800454a:	e7ea      	b.n	8004522 <HAL_ADC_LevelOutOfWindowCallback+0x1a>
		Power_USB();
 800454c:	f7ff ff7a 	bl	8004444 <Power_USB>
		if(warning_enable == 1)
 8004550:	4b0d      	ldr	r3, [pc, #52]	; (8004588 <HAL_ADC_LevelOutOfWindowCallback+0x80>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d1e4      	bne.n	8004522 <HAL_ADC_LevelOutOfWindowCallback+0x1a>
			warning_flag = 1;
 8004558:	2201      	movs	r2, #1
 800455a:	4b0c      	ldr	r3, [pc, #48]	; (800458c <HAL_ADC_LevelOutOfWindowCallback+0x84>)
 800455c:	701a      	strb	r2, [r3, #0]
 800455e:	e7e0      	b.n	8004522 <HAL_ADC_LevelOutOfWindowCallback+0x1a>
		Power_Bat();
 8004560:	f7ff ff83 	bl	800446a <Power_Bat>
		powerBat_flag = 1;
 8004564:	2201      	movs	r2, #1
 8004566:	4b0a      	ldr	r3, [pc, #40]	; (8004590 <HAL_ADC_LevelOutOfWindowCallback+0x88>)
 8004568:	701a      	strb	r2, [r3, #0]
		if(warning_enable == 1)
 800456a:	4b07      	ldr	r3, [pc, #28]	; (8004588 <HAL_ADC_LevelOutOfWindowCallback+0x80>)
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d1d7      	bne.n	8004522 <HAL_ADC_LevelOutOfWindowCallback+0x1a>
			warning_flag = 1;
 8004572:	4b06      	ldr	r3, [pc, #24]	; (800458c <HAL_ADC_LevelOutOfWindowCallback+0x84>)
 8004574:	701a      	strb	r2, [r3, #0]
 8004576:	e7d4      	b.n	8004522 <HAL_ADC_LevelOutOfWindowCallback+0x1a>
		shutdown_flag = 1;
 8004578:	2201      	movs	r2, #1
 800457a:	4b06      	ldr	r3, [pc, #24]	; (8004594 <HAL_ADC_LevelOutOfWindowCallback+0x8c>)
 800457c:	701a      	strb	r2, [r3, #0]
 800457e:	e7d4      	b.n	800452a <HAL_ADC_LevelOutOfWindowCallback+0x22>
 8004580:	200004bb 	.word	0x200004bb
 8004584:	200004ba 	.word	0x200004ba
 8004588:	200004b4 	.word	0x200004b4
 800458c:	200004b0 	.word	0x200004b0
 8004590:	200004ad 	.word	0x200004ad
 8004594:	200004b5 	.word	0x200004b5

08004598 <Alarm_Handler>:
 *
 *
 * 																			  ***/

void Alarm_Handler(void)
{
 8004598:	b510      	push	{r4, lr}
 800459a:	b086      	sub	sp, #24
	RTC_TimeTypeDef stimestructureget;
	RTC_DateTypeDef sdatestructureget;

	HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 800459c:	4c83      	ldr	r4, [pc, #524]	; (80047ac <Alarm_Handler+0x214>)
 800459e:	2200      	movs	r2, #0
 80045a0:	a901      	add	r1, sp, #4
 80045a2:	0020      	movs	r0, r4
 80045a4:	f7fd fbaa 	bl	8001cfc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 80045a8:	2200      	movs	r2, #0
 80045aa:	4669      	mov	r1, sp
 80045ac:	0020      	movs	r0, r4
 80045ae:	f7fd fbd1 	bl	8001d54 <HAL_RTC_GetDate>

 /*** This part handles the preprogrammed shutdown function  ***/
	if(alarmPoweroff == 1)
 80045b2:	4b7f      	ldr	r3, [pc, #508]	; (80047b0 <Alarm_Handler+0x218>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d005      	beq.n	80045c6 <Alarm_Handler+0x2e>
				ShutdownRPi();
		}
	}


	if(alarm_enable == 1)
 80045ba:	4b7e      	ldr	r3, [pc, #504]	; (80047b4 <Alarm_Handler+0x21c>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d013      	beq.n	80045ea <Alarm_Handler+0x52>
					  }
				  }
			}
		}
	}
}
 80045c2:	b006      	add	sp, #24
 80045c4:	bd10      	pop	{r4, pc}
		if (alarm_min_off == stimestructureget.Minutes
 80045c6:	ab01      	add	r3, sp, #4
 80045c8:	785a      	ldrb	r2, [r3, #1]
 80045ca:	4b7b      	ldr	r3, [pc, #492]	; (80047b8 <Alarm_Handler+0x220>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d1f3      	bne.n	80045ba <Alarm_Handler+0x22>
				&& alarm_hour_off == stimestructureget.Hours) {
 80045d2:	ab01      	add	r3, sp, #4
 80045d4:	781a      	ldrb	r2, [r3, #0]
 80045d6:	4b79      	ldr	r3, [pc, #484]	; (80047bc <Alarm_Handler+0x224>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d1ed      	bne.n	80045ba <Alarm_Handler+0x22>
			    poweroff_flag = 1;
 80045de:	2201      	movs	r2, #1
 80045e0:	4b77      	ldr	r3, [pc, #476]	; (80047c0 <Alarm_Handler+0x228>)
 80045e2:	701a      	strb	r2, [r3, #0]
				ShutdownRPi();
 80045e4:	f7ff ff68 	bl	80044b8 <ShutdownRPi>
 80045e8:	e7e7      	b.n	80045ba <Alarm_Handler+0x22>
		if(alarmTime == 1)
 80045ea:	4b76      	ldr	r3, [pc, #472]	; (80047c4 <Alarm_Handler+0x22c>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d040      	beq.n	8004674 <Alarm_Handler+0xdc>
		else if(alarmWeekDay == 1)
 80045f2:	4b75      	ldr	r3, [pc, #468]	; (80047c8 <Alarm_Handler+0x230>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d04c      	beq.n	8004694 <Alarm_Handler+0xfc>
		else if(alarmDate == 1)
 80045fa:	4b74      	ldr	r3, [pc, #464]	; (80047cc <Alarm_Handler+0x234>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d1df      	bne.n	80045c2 <Alarm_Handler+0x2a>
			if ( alarm_min == stimestructureget.Minutes && alarm_hour == stimestructureget.Hours && alarm_day == sdatestructureget.Date && alarm_month == sdatestructureget.Month)
 8004602:	ab01      	add	r3, sp, #4
 8004604:	785a      	ldrb	r2, [r3, #1]
 8004606:	4b72      	ldr	r3, [pc, #456]	; (80047d0 <Alarm_Handler+0x238>)
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	429a      	cmp	r2, r3
 800460c:	d1d9      	bne.n	80045c2 <Alarm_Handler+0x2a>
 800460e:	ab01      	add	r3, sp, #4
 8004610:	781a      	ldrb	r2, [r3, #0]
 8004612:	4b70      	ldr	r3, [pc, #448]	; (80047d4 <Alarm_Handler+0x23c>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	429a      	cmp	r2, r3
 8004618:	d1d3      	bne.n	80045c2 <Alarm_Handler+0x2a>
 800461a:	466b      	mov	r3, sp
 800461c:	789a      	ldrb	r2, [r3, #2]
 800461e:	4b6e      	ldr	r3, [pc, #440]	; (80047d8 <Alarm_Handler+0x240>)
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	429a      	cmp	r2, r3
 8004624:	d1cd      	bne.n	80045c2 <Alarm_Handler+0x2a>
 8004626:	466b      	mov	r3, sp
 8004628:	785a      	ldrb	r2, [r3, #1]
 800462a:	4b6c      	ldr	r3, [pc, #432]	; (80047dc <Alarm_Handler+0x244>)
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d1c7      	bne.n	80045c2 <Alarm_Handler+0x2a>
				  if (modus == 1 || modus == 3)
 8004632:	4b6b      	ldr	r3, [pc, #428]	; (80047e0 <Alarm_Handler+0x248>)
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d100      	bne.n	800463c <Alarm_Handler+0xa4>
 800463a:	e08b      	b.n	8004754 <Alarm_Handler+0x1bc>
 800463c:	2b03      	cmp	r3, #3
 800463e:	d100      	bne.n	8004642 <Alarm_Handler+0xaa>
 8004640:	e088      	b.n	8004754 <Alarm_Handler+0x1bc>
				  else if (modus == 2 || modus == 4)
 8004642:	2b02      	cmp	r3, #2
 8004644:	d001      	beq.n	800464a <Alarm_Handler+0xb2>
 8004646:	2b04      	cmp	r3, #4
 8004648:	d1bb      	bne.n	80045c2 <Alarm_Handler+0x2a>
					  if (rawValue[0] > minWide)
 800464a:	4a66      	ldr	r2, [pc, #408]	; (80047e4 <Alarm_Handler+0x24c>)
 800464c:	8811      	ldrh	r1, [r2, #0]
 800464e:	2296      	movs	r2, #150	; 0x96
 8004650:	0052      	lsls	r2, r2, #1
 8004652:	4291      	cmp	r1, r2
 8004654:	d900      	bls.n	8004658 <Alarm_Handler+0xc0>
 8004656:	e09d      	b.n	8004794 <Alarm_Handler+0x1fc>
					  else if (modus == 2)
 8004658:	2b02      	cmp	r3, #2
 800465a:	d100      	bne.n	800465e <Alarm_Handler+0xc6>
 800465c:	e0a0      	b.n	80047a0 <Alarm_Handler+0x208>
					  else if (modus == 4)
 800465e:	2b04      	cmp	r3, #4
 8004660:	d1af      	bne.n	80045c2 <Alarm_Handler+0x2a>
						  poweroff_flag = 0;
 8004662:	2200      	movs	r2, #0
 8004664:	4b56      	ldr	r3, [pc, #344]	; (80047c0 <Alarm_Handler+0x228>)
 8004666:	701a      	strb	r2, [r3, #0]
						  Power_Bat();
 8004668:	f7ff feff 	bl	800446a <Power_Bat>
						  powerBat_flag = 1;
 800466c:	2201      	movs	r2, #1
 800466e:	4b5e      	ldr	r3, [pc, #376]	; (80047e8 <Alarm_Handler+0x250>)
 8004670:	701a      	strb	r2, [r3, #0]
}
 8004672:	e7a6      	b.n	80045c2 <Alarm_Handler+0x2a>
			if (alarm_min == stimestructureget.Minutes && alarm_hour == stimestructureget.Hours)
 8004674:	ab01      	add	r3, sp, #4
 8004676:	785a      	ldrb	r2, [r3, #1]
 8004678:	4b55      	ldr	r3, [pc, #340]	; (80047d0 <Alarm_Handler+0x238>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	d1a0      	bne.n	80045c2 <Alarm_Handler+0x2a>
 8004680:	ab01      	add	r3, sp, #4
 8004682:	781a      	ldrb	r2, [r3, #0]
 8004684:	4b53      	ldr	r3, [pc, #332]	; (80047d4 <Alarm_Handler+0x23c>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d19a      	bne.n	80045c2 <Alarm_Handler+0x2a>
					poweroff_flag = 0;
 800468c:	2200      	movs	r2, #0
 800468e:	4b4c      	ldr	r3, [pc, #304]	; (80047c0 <Alarm_Handler+0x228>)
 8004690:	701a      	strb	r2, [r3, #0]
 8004692:	e796      	b.n	80045c2 <Alarm_Handler+0x2a>
			if ( alarm_min == stimestructureget.Minutes && alarm_hour == stimestructureget.Hours && alarm_weekday == sdatestructureget.WeekDay)
 8004694:	ab01      	add	r3, sp, #4
 8004696:	785a      	ldrb	r2, [r3, #1]
 8004698:	4b4d      	ldr	r3, [pc, #308]	; (80047d0 <Alarm_Handler+0x238>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d000      	beq.n	80046a2 <Alarm_Handler+0x10a>
 80046a0:	e78f      	b.n	80045c2 <Alarm_Handler+0x2a>
 80046a2:	ab01      	add	r3, sp, #4
 80046a4:	781a      	ldrb	r2, [r3, #0]
 80046a6:	4b4b      	ldr	r3, [pc, #300]	; (80047d4 <Alarm_Handler+0x23c>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d000      	beq.n	80046b0 <Alarm_Handler+0x118>
 80046ae:	e788      	b.n	80045c2 <Alarm_Handler+0x2a>
 80046b0:	466b      	mov	r3, sp
 80046b2:	781a      	ldrb	r2, [r3, #0]
 80046b4:	4b4d      	ldr	r3, [pc, #308]	; (80047ec <Alarm_Handler+0x254>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d000      	beq.n	80046be <Alarm_Handler+0x126>
 80046bc:	e781      	b.n	80045c2 <Alarm_Handler+0x2a>
				  if (modus == 1 || modus == 3)
 80046be:	4b48      	ldr	r3, [pc, #288]	; (80047e0 <Alarm_Handler+0x248>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d01a      	beq.n	80046fc <Alarm_Handler+0x164>
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	d018      	beq.n	80046fc <Alarm_Handler+0x164>
				  else if (modus == 2 || modus == 4)
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d002      	beq.n	80046d4 <Alarm_Handler+0x13c>
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d000      	beq.n	80046d4 <Alarm_Handler+0x13c>
 80046d2:	e776      	b.n	80045c2 <Alarm_Handler+0x2a>
					  if (rawValue[0] > minWide)
 80046d4:	4a43      	ldr	r2, [pc, #268]	; (80047e4 <Alarm_Handler+0x24c>)
 80046d6:	8811      	ldrh	r1, [r2, #0]
 80046d8:	2296      	movs	r2, #150	; 0x96
 80046da:	0052      	lsls	r2, r2, #1
 80046dc:	4291      	cmp	r1, r2
 80046de:	d82d      	bhi.n	800473c <Alarm_Handler+0x1a4>
					  else if (modus == 2)
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d031      	beq.n	8004748 <Alarm_Handler+0x1b0>
					  else if (modus == 4)
 80046e4:	2b04      	cmp	r3, #4
 80046e6:	d000      	beq.n	80046ea <Alarm_Handler+0x152>
 80046e8:	e76b      	b.n	80045c2 <Alarm_Handler+0x2a>
						  poweroff_flag = 0;
 80046ea:	2200      	movs	r2, #0
 80046ec:	4b34      	ldr	r3, [pc, #208]	; (80047c0 <Alarm_Handler+0x228>)
 80046ee:	701a      	strb	r2, [r3, #0]
						  Power_Bat();
 80046f0:	f7ff febb 	bl	800446a <Power_Bat>
						  powerBat_flag = 1;
 80046f4:	2201      	movs	r2, #1
 80046f6:	4b3c      	ldr	r3, [pc, #240]	; (80047e8 <Alarm_Handler+0x250>)
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	e762      	b.n	80045c2 <Alarm_Handler+0x2a>
					  if (rawValue[2] > minUSB)
 80046fc:	4a39      	ldr	r2, [pc, #228]	; (80047e4 <Alarm_Handler+0x24c>)
 80046fe:	8891      	ldrh	r1, [r2, #4]
 8004700:	22e1      	movs	r2, #225	; 0xe1
 8004702:	00d2      	lsls	r2, r2, #3
 8004704:	4291      	cmp	r1, r2
 8004706:	d80d      	bhi.n	8004724 <Alarm_Handler+0x18c>
					  else if (modus == 1)
 8004708:	2b01      	cmp	r3, #1
 800470a:	d011      	beq.n	8004730 <Alarm_Handler+0x198>
					  else if (modus == 3)
 800470c:	2b03      	cmp	r3, #3
 800470e:	d000      	beq.n	8004712 <Alarm_Handler+0x17a>
 8004710:	e757      	b.n	80045c2 <Alarm_Handler+0x2a>
						  poweroff_flag = 0;
 8004712:	2200      	movs	r2, #0
 8004714:	4b2a      	ldr	r3, [pc, #168]	; (80047c0 <Alarm_Handler+0x228>)
 8004716:	701a      	strb	r2, [r3, #0]
						  Power_Bat();
 8004718:	f7ff fea7 	bl	800446a <Power_Bat>
						  powerBat_flag = 1;
 800471c:	2201      	movs	r2, #1
 800471e:	4b32      	ldr	r3, [pc, #200]	; (80047e8 <Alarm_Handler+0x250>)
 8004720:	701a      	strb	r2, [r3, #0]
 8004722:	e74e      	b.n	80045c2 <Alarm_Handler+0x2a>
						  poweroff_flag = 0;
 8004724:	2200      	movs	r2, #0
 8004726:	4b26      	ldr	r3, [pc, #152]	; (80047c0 <Alarm_Handler+0x228>)
 8004728:	701a      	strb	r2, [r3, #0]
						  Power_USB();
 800472a:	f7ff fe8b 	bl	8004444 <Power_USB>
 800472e:	e748      	b.n	80045c2 <Alarm_Handler+0x2a>
						  poweroff_flag = 0;
 8004730:	2200      	movs	r2, #0
 8004732:	4b23      	ldr	r3, [pc, #140]	; (80047c0 <Alarm_Handler+0x228>)
 8004734:	701a      	strb	r2, [r3, #0]
						  Power_Wide();
 8004736:	f7ff fe72 	bl	800441e <Power_Wide>
 800473a:	e742      	b.n	80045c2 <Alarm_Handler+0x2a>
						  poweroff_flag = 0;
 800473c:	2200      	movs	r2, #0
 800473e:	4b20      	ldr	r3, [pc, #128]	; (80047c0 <Alarm_Handler+0x228>)
 8004740:	701a      	strb	r2, [r3, #0]
						  Power_Wide();
 8004742:	f7ff fe6c 	bl	800441e <Power_Wide>
 8004746:	e73c      	b.n	80045c2 <Alarm_Handler+0x2a>
						  poweroff_flag = 0;
 8004748:	2200      	movs	r2, #0
 800474a:	4b1d      	ldr	r3, [pc, #116]	; (80047c0 <Alarm_Handler+0x228>)
 800474c:	701a      	strb	r2, [r3, #0]
						  Power_USB();
 800474e:	f7ff fe79 	bl	8004444 <Power_USB>
 8004752:	e736      	b.n	80045c2 <Alarm_Handler+0x2a>
					  if (rawValue[2] > minUSB)
 8004754:	4a23      	ldr	r2, [pc, #140]	; (80047e4 <Alarm_Handler+0x24c>)
 8004756:	8891      	ldrh	r1, [r2, #4]
 8004758:	22e1      	movs	r2, #225	; 0xe1
 800475a:	00d2      	lsls	r2, r2, #3
 800475c:	4291      	cmp	r1, r2
 800475e:	d80d      	bhi.n	800477c <Alarm_Handler+0x1e4>
					  else if (modus == 1)
 8004760:	2b01      	cmp	r3, #1
 8004762:	d011      	beq.n	8004788 <Alarm_Handler+0x1f0>
					  else if (modus == 3)
 8004764:	2b03      	cmp	r3, #3
 8004766:	d000      	beq.n	800476a <Alarm_Handler+0x1d2>
 8004768:	e72b      	b.n	80045c2 <Alarm_Handler+0x2a>
						  poweroff_flag = 0;
 800476a:	2200      	movs	r2, #0
 800476c:	4b14      	ldr	r3, [pc, #80]	; (80047c0 <Alarm_Handler+0x228>)
 800476e:	701a      	strb	r2, [r3, #0]
						  Power_Bat();
 8004770:	f7ff fe7b 	bl	800446a <Power_Bat>
						  powerBat_flag = 1;
 8004774:	2201      	movs	r2, #1
 8004776:	4b1c      	ldr	r3, [pc, #112]	; (80047e8 <Alarm_Handler+0x250>)
 8004778:	701a      	strb	r2, [r3, #0]
 800477a:	e722      	b.n	80045c2 <Alarm_Handler+0x2a>
						  poweroff_flag = 0;
 800477c:	2200      	movs	r2, #0
 800477e:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <Alarm_Handler+0x228>)
 8004780:	701a      	strb	r2, [r3, #0]
						  Power_USB();
 8004782:	f7ff fe5f 	bl	8004444 <Power_USB>
 8004786:	e71c      	b.n	80045c2 <Alarm_Handler+0x2a>
						  poweroff_flag = 0;
 8004788:	2200      	movs	r2, #0
 800478a:	4b0d      	ldr	r3, [pc, #52]	; (80047c0 <Alarm_Handler+0x228>)
 800478c:	701a      	strb	r2, [r3, #0]
						  Power_Wide();
 800478e:	f7ff fe46 	bl	800441e <Power_Wide>
 8004792:	e716      	b.n	80045c2 <Alarm_Handler+0x2a>
						  poweroff_flag = 0;
 8004794:	2200      	movs	r2, #0
 8004796:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <Alarm_Handler+0x228>)
 8004798:	701a      	strb	r2, [r3, #0]
						  Power_Wide();
 800479a:	f7ff fe40 	bl	800441e <Power_Wide>
 800479e:	e710      	b.n	80045c2 <Alarm_Handler+0x2a>
						  poweroff_flag = 0;
 80047a0:	2200      	movs	r2, #0
 80047a2:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <Alarm_Handler+0x228>)
 80047a4:	701a      	strb	r2, [r3, #0]
						  Power_USB();
 80047a6:	f7ff fe4d 	bl	8004444 <Power_USB>
 80047aa:	e70a      	b.n	80045c2 <Alarm_Handler+0x2a>
 80047ac:	20000574 	.word	0x20000574
 80047b0:	200004a4 	.word	0x200004a4
 80047b4:	200004b3 	.word	0x200004b3
 80047b8:	200004a3 	.word	0x200004a3
 80047bc:	200004b2 	.word	0x200004b2
 80047c0:	200004b1 	.word	0x200004b1
 80047c4:	20000494 	.word	0x20000494
 80047c8:	200004b6 	.word	0x200004b6
 80047cc:	200004ae 	.word	0x200004ae
 80047d0:	200004b9 	.word	0x200004b9
 80047d4:	20000495 	.word	0x20000495
 80047d8:	200004af 	.word	0x200004af
 80047dc:	200004ac 	.word	0x200004ac
 80047e0:	200004bb 	.word	0x200004bb
 80047e4:	20000498 	.word	0x20000498
 80047e8:	200004ad 	.word	0x200004ad
 80047ec:	200004b8 	.word	0x200004b8

080047f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047f0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80047f2:	6802      	ldr	r2, [r0, #0]
 80047f4:	4b03      	ldr	r3, [pc, #12]	; (8004804 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d000      	beq.n	80047fc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80047fa:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 80047fc:	f7fb fe12 	bl	8000424 <HAL_IncTick>
}
 8004800:	e7fb      	b.n	80047fa <HAL_TIM_PeriodElapsedCallback+0xa>
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	40002000 	.word	0x40002000

08004808 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8004808:	e7fe      	b.n	8004808 <_Error_Handler>
	...

0800480c <MX_RTC_Init>:
{
 800480c:	b510      	push	{r4, lr}
  hrtc.Instance = RTC;
 800480e:	480a      	ldr	r0, [pc, #40]	; (8004838 <MX_RTC_Init+0x2c>)
 8004810:	4b0a      	ldr	r3, [pc, #40]	; (800483c <MX_RTC_Init+0x30>)
 8004812:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004814:	2300      	movs	r3, #0
 8004816:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 124;
 8004818:	227c      	movs	r2, #124	; 0x7c
 800481a:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 1999;
 800481c:	4a08      	ldr	r2, [pc, #32]	; (8004840 <MX_RTC_Init+0x34>)
 800481e:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004820:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004822:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004824:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004826:	f7fd f907 	bl	8001a38 <HAL_RTC_Init>
 800482a:	2800      	cmp	r0, #0
 800482c:	d100      	bne.n	8004830 <MX_RTC_Init+0x24>
}
 800482e:	bd10      	pop	{r4, pc}
    _Error_Handler(__FILE__, __LINE__);
 8004830:	4904      	ldr	r1, [pc, #16]	; (8004844 <MX_RTC_Init+0x38>)
 8004832:	4805      	ldr	r0, [pc, #20]	; (8004848 <MX_RTC_Init+0x3c>)
 8004834:	f7ff ffe8 	bl	8004808 <_Error_Handler>
 8004838:	20000574 	.word	0x20000574
 800483c:	40002800 	.word	0x40002800
 8004840:	000007cf 	.word	0x000007cf
 8004844:	00000212 	.word	0x00000212
 8004848:	08007010 	.word	0x08007010

0800484c <SystemClock_Config>:
{
 800484c:	b500      	push	{lr}
 800484e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8004850:	2311      	movs	r3, #17
 8004852:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004854:	3b10      	subs	r3, #16
 8004856:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8004858:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800485a:	330f      	adds	r3, #15
 800485c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800485e:	3b0e      	subs	r3, #14
 8004860:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004862:	2380      	movs	r3, #128	; 0x80
 8004864:	025b      	lsls	r3, r3, #9
 8004866:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8004868:	2380      	movs	r3, #128	; 0x80
 800486a:	035b      	lsls	r3, r3, #13
 800486c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800486e:	2300      	movs	r3, #0
 8004870:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004872:	a808      	add	r0, sp, #32
 8004874:	f7fc fce6 	bl	8001244 <HAL_RCC_OscConfig>
 8004878:	2800      	cmp	r0, #0
 800487a:	d12b      	bne.n	80048d4 <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800487c:	2307      	movs	r3, #7
 800487e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004880:	3b05      	subs	r3, #5
 8004882:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004884:	2300      	movs	r3, #0
 8004886:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004888:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800488a:	2101      	movs	r1, #1
 800488c:	a804      	add	r0, sp, #16
 800488e:	f7fc ff35 	bl	80016fc <HAL_RCC_ClockConfig>
 8004892:	2800      	cmp	r0, #0
 8004894:	d123      	bne.n	80048de <SystemClock_Config+0x92>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8004896:	4b17      	ldr	r3, [pc, #92]	; (80048f4 <SystemClock_Config+0xa8>)
 8004898:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800489a:	2300      	movs	r3, #0
 800489c:	9302      	str	r3, [sp, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800489e:	23c0      	movs	r3, #192	; 0xc0
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048a4:	4668      	mov	r0, sp
 80048a6:	f7fd f805 	bl	80018b4 <HAL_RCCEx_PeriphCLKConfig>
 80048aa:	2800      	cmp	r0, #0
 80048ac:	d11c      	bne.n	80048e8 <SystemClock_Config+0x9c>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80048ae:	f7fc ffcf 	bl	8001850 <HAL_RCC_GetHCLKFreq>
 80048b2:	21fa      	movs	r1, #250	; 0xfa
 80048b4:	0089      	lsls	r1, r1, #2
 80048b6:	f7fb fc2f 	bl	8000118 <__udivsi3>
 80048ba:	f7fc f987 	bl	8000bcc <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80048be:	2004      	movs	r0, #4
 80048c0:	f7fc f9a0 	bl	8000c04 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 3, 0);
 80048c4:	2200      	movs	r2, #0
 80048c6:	2103      	movs	r1, #3
 80048c8:	2001      	movs	r0, #1
 80048ca:	4240      	negs	r0, r0
 80048cc:	f7fc f942 	bl	8000b54 <HAL_NVIC_SetPriority>
}
 80048d0:	b015      	add	sp, #84	; 0x54
 80048d2:	bd00      	pop	{pc}
    _Error_Handler(__FILE__, __LINE__);
 80048d4:	21bd      	movs	r1, #189	; 0xbd
 80048d6:	0049      	lsls	r1, r1, #1
 80048d8:	4807      	ldr	r0, [pc, #28]	; (80048f8 <SystemClock_Config+0xac>)
 80048da:	f7ff ff95 	bl	8004808 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80048de:	2188      	movs	r1, #136	; 0x88
 80048e0:	31ff      	adds	r1, #255	; 0xff
 80048e2:	4805      	ldr	r0, [pc, #20]	; (80048f8 <SystemClock_Config+0xac>)
 80048e4:	f7ff ff90 	bl	8004808 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80048e8:	2190      	movs	r1, #144	; 0x90
 80048ea:	31ff      	adds	r1, #255	; 0xff
 80048ec:	4802      	ldr	r0, [pc, #8]	; (80048f8 <SystemClock_Config+0xac>)
 80048ee:	f7ff ff8b 	bl	8004808 <_Error_Handler>
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	00010001 	.word	0x00010001
 80048f8:	08007010 	.word	0x08007010

080048fc <configureAWD_USB>:
{
 80048fc:	b500      	push	{lr}
 80048fe:	b087      	sub	sp, #28
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8004900:	23c0      	movs	r3, #192	; 0xc0
 8004902:	041b      	lsls	r3, r3, #16
 8004904:	9301      	str	r3, [sp, #4]
  AnalogWDGConfig.Channel = ADC_CHANNEL_7;
 8004906:	2307      	movs	r3, #7
 8004908:	9302      	str	r3, [sp, #8]
  AnalogWDGConfig.ITMode = ENABLE;
 800490a:	3b06      	subs	r3, #6
 800490c:	9303      	str	r3, [sp, #12]
  AnalogWDGConfig.HighThreshold = 4095;
 800490e:	4b09      	ldr	r3, [pc, #36]	; (8004934 <configureAWD_USB+0x38>)
 8004910:	9304      	str	r3, [sp, #16]
  AnalogWDGConfig.LowThreshold = minUSB;
 8004912:	23e1      	movs	r3, #225	; 0xe1
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 8004918:	a901      	add	r1, sp, #4
 800491a:	4807      	ldr	r0, [pc, #28]	; (8004938 <configureAWD_USB+0x3c>)
 800491c:	f7fc f866 	bl	80009ec <HAL_ADC_AnalogWDGConfig>
 8004920:	2800      	cmp	r0, #0
 8004922:	d101      	bne.n	8004928 <configureAWD_USB+0x2c>
}
 8004924:	b007      	add	sp, #28
 8004926:	bd00      	pop	{pc}
    _Error_Handler(__FILE__, __LINE__);
 8004928:	21af      	movs	r1, #175	; 0xaf
 800492a:	0089      	lsls	r1, r1, #2
 800492c:	4803      	ldr	r0, [pc, #12]	; (800493c <configureAWD_USB+0x40>)
 800492e:	f7ff ff6b 	bl	8004808 <_Error_Handler>
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	00000fff 	.word	0x00000fff
 8004938:	200005d8 	.word	0x200005d8
 800493c:	08007010 	.word	0x08007010

08004940 <configureAWD_Wide>:
{
 8004940:	b500      	push	{lr}
 8004942:	b087      	sub	sp, #28
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8004944:	23c0      	movs	r3, #192	; 0xc0
 8004946:	041b      	lsls	r3, r3, #16
 8004948:	9301      	str	r3, [sp, #4]
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 800494a:	2305      	movs	r3, #5
 800494c:	9302      	str	r3, [sp, #8]
  AnalogWDGConfig.ITMode = ENABLE;
 800494e:	3b04      	subs	r3, #4
 8004950:	9303      	str	r3, [sp, #12]
  AnalogWDGConfig.HighThreshold = 4095;
 8004952:	4b08      	ldr	r3, [pc, #32]	; (8004974 <configureAWD_Wide+0x34>)
 8004954:	9304      	str	r3, [sp, #16]
  AnalogWDGConfig.LowThreshold = minWide;
 8004956:	2396      	movs	r3, #150	; 0x96
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 800495c:	a901      	add	r1, sp, #4
 800495e:	4806      	ldr	r0, [pc, #24]	; (8004978 <configureAWD_Wide+0x38>)
 8004960:	f7fc f844 	bl	80009ec <HAL_ADC_AnalogWDGConfig>
 8004964:	2800      	cmp	r0, #0
 8004966:	d101      	bne.n	800496c <configureAWD_Wide+0x2c>
}
 8004968:	b007      	add	sp, #28
 800496a:	bd00      	pop	{pc}
    _Error_Handler(__FILE__, __LINE__);
 800496c:	4903      	ldr	r1, [pc, #12]	; (800497c <configureAWD_Wide+0x3c>)
 800496e:	4804      	ldr	r0, [pc, #16]	; (8004980 <configureAWD_Wide+0x40>)
 8004970:	f7ff ff4a 	bl	8004808 <_Error_Handler>
 8004974:	00000fff 	.word	0x00000fff
 8004978:	200005d8 	.word	0x200005d8
 800497c:	000002ce 	.word	0x000002ce
 8004980:	08007010 	.word	0x08007010

08004984 <flashValue>:
{
 8004984:	b510      	push	{r4, lr}
 8004986:	000a      	movs	r2, r1
	 if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address , data) != HAL_OK)
 8004988:	2300      	movs	r3, #0
 800498a:	0001      	movs	r1, r0
 800498c:	2002      	movs	r0, #2
 800498e:	f7fc facf 	bl	8000f30 <HAL_FLASH_Program>
 8004992:	2800      	cmp	r0, #0
 8004994:	d100      	bne.n	8004998 <flashValue+0x14>
}
 8004996:	bd10      	pop	{r4, pc}
	    	_Error_Handler(__FILE__, __LINE__);
 8004998:	21d9      	movs	r1, #217	; 0xd9
 800499a:	0089      	lsls	r1, r1, #2
 800499c:	4801      	ldr	r0, [pc, #4]	; (80049a4 <flashValue+0x20>)
 800499e:	f7ff ff33 	bl	8004808 <_Error_Handler>
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	08007010 	.word	0x08007010

080049a8 <flashConfig>:
{
 80049a8:	b500      	push	{lr}
 80049aa:	b085      	sub	sp, #20
	HAL_FLASH_Unlock();
 80049ac:	f7fc fa74 	bl	8000e98 <HAL_FLASH_Unlock>
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80049b0:	2300      	movs	r3, #0
 80049b2:	9301      	str	r3, [sp, #4]
	EraseInitStruct.PageAddress = 0x8007C00;
 80049b4:	4b30      	ldr	r3, [pc, #192]	; (8004a78 <flashConfig+0xd0>)
 80049b6:	9302      	str	r3, [sp, #8]
	EraseInitStruct.NbPages     = 1;
 80049b8:	2301      	movs	r3, #1
 80049ba:	9303      	str	r3, [sp, #12]
	 if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80049bc:	492f      	ldr	r1, [pc, #188]	; (8004a7c <flashConfig+0xd4>)
 80049be:	a801      	add	r0, sp, #4
 80049c0:	f7fc fb28 	bl	8001014 <HAL_FLASHEx_Erase>
 80049c4:	2800      	cmp	r0, #0
 80049c6:	d153      	bne.n	8004a70 <flashConfig+0xc8>
	  flashValue(modus_FlashAdress,modus);
 80049c8:	4b2d      	ldr	r3, [pc, #180]	; (8004a80 <flashConfig+0xd8>)
 80049ca:	7819      	ldrb	r1, [r3, #0]
 80049cc:	482a      	ldr	r0, [pc, #168]	; (8004a78 <flashConfig+0xd0>)
 80049ce:	f7ff ffd9 	bl	8004984 <flashValue>
	  flashValue(alarmDate_FlashAdress,alarmDate);
 80049d2:	4b2c      	ldr	r3, [pc, #176]	; (8004a84 <flashConfig+0xdc>)
 80049d4:	7819      	ldrb	r1, [r3, #0]
 80049d6:	482c      	ldr	r0, [pc, #176]	; (8004a88 <flashConfig+0xe0>)
 80049d8:	f7ff ffd4 	bl	8004984 <flashValue>
	  flashValue(alarmWeekDay_FlashAdress,alarmWeekDay);
 80049dc:	4b2b      	ldr	r3, [pc, #172]	; (8004a8c <flashConfig+0xe4>)
 80049de:	7819      	ldrb	r1, [r3, #0]
 80049e0:	482b      	ldr	r0, [pc, #172]	; (8004a90 <flashConfig+0xe8>)
 80049e2:	f7ff ffcf 	bl	8004984 <flashValue>
	  flashValue(alarmTime_FlashAdress,alarmTime);
 80049e6:	4b2b      	ldr	r3, [pc, #172]	; (8004a94 <flashConfig+0xec>)
 80049e8:	7819      	ldrb	r1, [r3, #0]
 80049ea:	482b      	ldr	r0, [pc, #172]	; (8004a98 <flashConfig+0xf0>)
 80049ec:	f7ff ffca 	bl	8004984 <flashValue>
	  flashValue(alarmPoweroff_FlashAdress,alarmPoweroff);
 80049f0:	4b2a      	ldr	r3, [pc, #168]	; (8004a9c <flashConfig+0xf4>)
 80049f2:	7819      	ldrb	r1, [r3, #0]
 80049f4:	482a      	ldr	r0, [pc, #168]	; (8004aa0 <flashConfig+0xf8>)
 80049f6:	f7ff ffc5 	bl	8004984 <flashValue>
	  flashValue(alarm_min_FlashAdress,alarm_min);
 80049fa:	4b2a      	ldr	r3, [pc, #168]	; (8004aa4 <flashConfig+0xfc>)
 80049fc:	7819      	ldrb	r1, [r3, #0]
 80049fe:	482a      	ldr	r0, [pc, #168]	; (8004aa8 <flashConfig+0x100>)
 8004a00:	f7ff ffc0 	bl	8004984 <flashValue>
	  flashValue(alarm_hour_FlashAdress,alarm_hour);
 8004a04:	4b29      	ldr	r3, [pc, #164]	; (8004aac <flashConfig+0x104>)
 8004a06:	7819      	ldrb	r1, [r3, #0]
 8004a08:	4829      	ldr	r0, [pc, #164]	; (8004ab0 <flashConfig+0x108>)
 8004a0a:	f7ff ffbb 	bl	8004984 <flashValue>
	  flashValue(alarm_min_off_FlashAdress,alarm_min_off);
 8004a0e:	4b29      	ldr	r3, [pc, #164]	; (8004ab4 <flashConfig+0x10c>)
 8004a10:	7819      	ldrb	r1, [r3, #0]
 8004a12:	4829      	ldr	r0, [pc, #164]	; (8004ab8 <flashConfig+0x110>)
 8004a14:	f7ff ffb6 	bl	8004984 <flashValue>
	  flashValue(alarm_hour_off_FlashAdress,alarm_hour_off);
 8004a18:	4b28      	ldr	r3, [pc, #160]	; (8004abc <flashConfig+0x114>)
 8004a1a:	7819      	ldrb	r1, [r3, #0]
 8004a1c:	4828      	ldr	r0, [pc, #160]	; (8004ac0 <flashConfig+0x118>)
 8004a1e:	f7ff ffb1 	bl	8004984 <flashValue>
	  flashValue(alarm_day_FlashAdress,alarm_day);
 8004a22:	4b28      	ldr	r3, [pc, #160]	; (8004ac4 <flashConfig+0x11c>)
 8004a24:	7819      	ldrb	r1, [r3, #0]
 8004a26:	4828      	ldr	r0, [pc, #160]	; (8004ac8 <flashConfig+0x120>)
 8004a28:	f7ff ffac 	bl	8004984 <flashValue>
	  flashValue(alarm_month_FlashAdress,alarm_month);
 8004a2c:	4b27      	ldr	r3, [pc, #156]	; (8004acc <flashConfig+0x124>)
 8004a2e:	7819      	ldrb	r1, [r3, #0]
 8004a30:	4827      	ldr	r0, [pc, #156]	; (8004ad0 <flashConfig+0x128>)
 8004a32:	f7ff ffa7 	bl	8004984 <flashValue>
	  flashValue(alarm_weekday_FlashAdress,alarm_weekday);
 8004a36:	4b27      	ldr	r3, [pc, #156]	; (8004ad4 <flashConfig+0x12c>)
 8004a38:	7819      	ldrb	r1, [r3, #0]
 8004a3a:	4827      	ldr	r0, [pc, #156]	; (8004ad8 <flashConfig+0x130>)
 8004a3c:	f7ff ffa2 	bl	8004984 <flashValue>
	  flashValue(alarm_enable_FlashAdress,alarm_enable);
 8004a40:	4b26      	ldr	r3, [pc, #152]	; (8004adc <flashConfig+0x134>)
 8004a42:	7819      	ldrb	r1, [r3, #0]
 8004a44:	4826      	ldr	r0, [pc, #152]	; (8004ae0 <flashConfig+0x138>)
 8004a46:	f7ff ff9d 	bl	8004984 <flashValue>
	  flashValue(shutdown_enable_FlashAdress,shutdown_enable);
 8004a4a:	4b26      	ldr	r3, [pc, #152]	; (8004ae4 <flashConfig+0x13c>)
 8004a4c:	7819      	ldrb	r1, [r3, #0]
 8004a4e:	4826      	ldr	r0, [pc, #152]	; (8004ae8 <flashConfig+0x140>)
 8004a50:	f7ff ff98 	bl	8004984 <flashValue>
	  flashValue(shutdown_time_FlashAdress,shutdown_time);
 8004a54:	4b25      	ldr	r3, [pc, #148]	; (8004aec <flashConfig+0x144>)
 8004a56:	7819      	ldrb	r1, [r3, #0]
 8004a58:	4825      	ldr	r0, [pc, #148]	; (8004af0 <flashConfig+0x148>)
 8004a5a:	f7ff ff93 	bl	8004984 <flashValue>
	  flashValue(warning_enable_FlashAdress,warning_enable);
 8004a5e:	4b25      	ldr	r3, [pc, #148]	; (8004af4 <flashConfig+0x14c>)
 8004a60:	7819      	ldrb	r1, [r3, #0]
 8004a62:	4825      	ldr	r0, [pc, #148]	; (8004af8 <flashConfig+0x150>)
 8004a64:	f7ff ff8e 	bl	8004984 <flashValue>
	HAL_FLASH_Lock();
 8004a68:	f7fc fa2a 	bl	8000ec0 <HAL_FLASH_Lock>
}
 8004a6c:	b005      	add	sp, #20
 8004a6e:	bd00      	pop	{pc}
	    	_Error_Handler(__FILE__, __LINE__);
 8004a70:	4922      	ldr	r1, [pc, #136]	; (8004afc <flashConfig+0x154>)
 8004a72:	4823      	ldr	r0, [pc, #140]	; (8004b00 <flashConfig+0x158>)
 8004a74:	f7ff fec8 	bl	8004808 <_Error_Handler>
 8004a78:	08007c00 	.word	0x08007c00
 8004a7c:	20000480 	.word	0x20000480
 8004a80:	200004bb 	.word	0x200004bb
 8004a84:	200004ae 	.word	0x200004ae
 8004a88:	08007c10 	.word	0x08007c10
 8004a8c:	200004b6 	.word	0x200004b6
 8004a90:	08007c20 	.word	0x08007c20
 8004a94:	20000494 	.word	0x20000494
 8004a98:	08007c30 	.word	0x08007c30
 8004a9c:	200004a4 	.word	0x200004a4
 8004aa0:	08007c40 	.word	0x08007c40
 8004aa4:	200004b9 	.word	0x200004b9
 8004aa8:	08007c50 	.word	0x08007c50
 8004aac:	20000495 	.word	0x20000495
 8004ab0:	08007c60 	.word	0x08007c60
 8004ab4:	200004a3 	.word	0x200004a3
 8004ab8:	08007c70 	.word	0x08007c70
 8004abc:	200004b2 	.word	0x200004b2
 8004ac0:	08007c80 	.word	0x08007c80
 8004ac4:	200004af 	.word	0x200004af
 8004ac8:	08007c90 	.word	0x08007c90
 8004acc:	200004ac 	.word	0x200004ac
 8004ad0:	08007ca0 	.word	0x08007ca0
 8004ad4:	200004b8 	.word	0x200004b8
 8004ad8:	08007cb0 	.word	0x08007cb0
 8004adc:	200004b3 	.word	0x200004b3
 8004ae0:	08007cc0 	.word	0x08007cc0
 8004ae4:	200004ba 	.word	0x200004ba
 8004ae8:	08007cd0 	.word	0x08007cd0
 8004aec:	200004a2 	.word	0x200004a2
 8004af0:	08007ce0 	.word	0x08007ce0
 8004af4:	200004b4 	.word	0x200004b4
 8004af8:	08007cf0 	.word	0x08007cf0
 8004afc:	0000033e 	.word	0x0000033e
 8004b00:	08007010 	.word	0x08007010

08004b04 <initialCheck>:
{
 8004b04:	b510      	push	{r4, lr}
	  if (modus == 0xFF)
 8004b06:	4b15      	ldr	r3, [pc, #84]	; (8004b5c <initialCheck+0x58>)
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2bff      	cmp	r3, #255	; 0xff
 8004b0c:	d000      	beq.n	8004b10 <initialCheck+0xc>
}
 8004b0e:	bd10      	pop	{r4, pc}
		  modus = 1;
 8004b10:	2201      	movs	r2, #1
 8004b12:	4b12      	ldr	r3, [pc, #72]	; (8004b5c <initialCheck+0x58>)
 8004b14:	701a      	strb	r2, [r3, #0]
		  alarmDate = 0;
 8004b16:	2300      	movs	r3, #0
 8004b18:	4911      	ldr	r1, [pc, #68]	; (8004b60 <initialCheck+0x5c>)
 8004b1a:	700b      	strb	r3, [r1, #0]
		  alarmWeekDay = 0;
 8004b1c:	4911      	ldr	r1, [pc, #68]	; (8004b64 <initialCheck+0x60>)
 8004b1e:	700b      	strb	r3, [r1, #0]
		  alarmTime = 1;
 8004b20:	4911      	ldr	r1, [pc, #68]	; (8004b68 <initialCheck+0x64>)
 8004b22:	700a      	strb	r2, [r1, #0]
		  alarmPoweroff = 0;
 8004b24:	4911      	ldr	r1, [pc, #68]	; (8004b6c <initialCheck+0x68>)
 8004b26:	700b      	strb	r3, [r1, #0]
		  alarm_min = 0;
 8004b28:	4911      	ldr	r1, [pc, #68]	; (8004b70 <initialCheck+0x6c>)
 8004b2a:	700b      	strb	r3, [r1, #0]
		  alarm_hour = 0;
 8004b2c:	4911      	ldr	r1, [pc, #68]	; (8004b74 <initialCheck+0x70>)
 8004b2e:	700b      	strb	r3, [r1, #0]
		  alarm_min_off = 0;
 8004b30:	4911      	ldr	r1, [pc, #68]	; (8004b78 <initialCheck+0x74>)
 8004b32:	700b      	strb	r3, [r1, #0]
		  alarm_hour_off = 0;
 8004b34:	4911      	ldr	r1, [pc, #68]	; (8004b7c <initialCheck+0x78>)
 8004b36:	700b      	strb	r3, [r1, #0]
		  alarm_day = 1;
 8004b38:	4911      	ldr	r1, [pc, #68]	; (8004b80 <initialCheck+0x7c>)
 8004b3a:	700a      	strb	r2, [r1, #0]
		  alarm_month = 1;
 8004b3c:	4911      	ldr	r1, [pc, #68]	; (8004b84 <initialCheck+0x80>)
 8004b3e:	700a      	strb	r2, [r1, #0]
		  alarm_weekday = 1;
 8004b40:	4911      	ldr	r1, [pc, #68]	; (8004b88 <initialCheck+0x84>)
 8004b42:	700a      	strb	r2, [r1, #0]
		  alarm_enable = 0;
 8004b44:	4911      	ldr	r1, [pc, #68]	; (8004b8c <initialCheck+0x88>)
 8004b46:	700b      	strb	r3, [r1, #0]
		  shutdown_enable = 0;
 8004b48:	4911      	ldr	r1, [pc, #68]	; (8004b90 <initialCheck+0x8c>)
 8004b4a:	700b      	strb	r3, [r1, #0]
		  shutdown_time = 10;
 8004b4c:	210a      	movs	r1, #10
 8004b4e:	4b11      	ldr	r3, [pc, #68]	; (8004b94 <initialCheck+0x90>)
 8004b50:	7019      	strb	r1, [r3, #0]
		  warning_enable = 1;
 8004b52:	4b11      	ldr	r3, [pc, #68]	; (8004b98 <initialCheck+0x94>)
 8004b54:	701a      	strb	r2, [r3, #0]
		  flashConfig();
 8004b56:	f7ff ff27 	bl	80049a8 <flashConfig>
}
 8004b5a:	e7d8      	b.n	8004b0e <initialCheck+0xa>
 8004b5c:	200004bb 	.word	0x200004bb
 8004b60:	200004ae 	.word	0x200004ae
 8004b64:	200004b6 	.word	0x200004b6
 8004b68:	20000494 	.word	0x20000494
 8004b6c:	200004a4 	.word	0x200004a4
 8004b70:	200004b9 	.word	0x200004b9
 8004b74:	20000495 	.word	0x20000495
 8004b78:	200004a3 	.word	0x200004a3
 8004b7c:	200004b2 	.word	0x200004b2
 8004b80:	200004af 	.word	0x200004af
 8004b84:	200004ac 	.word	0x200004ac
 8004b88:	200004b8 	.word	0x200004b8
 8004b8c:	200004b3 	.word	0x200004b3
 8004b90:	200004ba 	.word	0x200004ba
 8004b94:	200004a2 	.word	0x200004a2
 8004b98:	200004b4 	.word	0x200004b4

08004b9c <main>:
{
 8004b9c:	b530      	push	{r4, r5, lr}
 8004b9e:	b087      	sub	sp, #28
  modus =  *(uint8_t *)modus_FlashAdress;
 8004ba0:	4b4b      	ldr	r3, [pc, #300]	; (8004cd0 <main+0x134>)
 8004ba2:	781a      	ldrb	r2, [r3, #0]
 8004ba4:	4b4b      	ldr	r3, [pc, #300]	; (8004cd4 <main+0x138>)
 8004ba6:	701a      	strb	r2, [r3, #0]
  alarmDate = *(uint8_t *)alarmDate_FlashAdress;
 8004ba8:	4b4b      	ldr	r3, [pc, #300]	; (8004cd8 <main+0x13c>)
 8004baa:	781a      	ldrb	r2, [r3, #0]
 8004bac:	4b4b      	ldr	r3, [pc, #300]	; (8004cdc <main+0x140>)
 8004bae:	701a      	strb	r2, [r3, #0]
  alarmWeekDay = *(uint8_t *)alarmWeekDay_FlashAdress;
 8004bb0:	4b4b      	ldr	r3, [pc, #300]	; (8004ce0 <main+0x144>)
 8004bb2:	781a      	ldrb	r2, [r3, #0]
 8004bb4:	4b4b      	ldr	r3, [pc, #300]	; (8004ce4 <main+0x148>)
 8004bb6:	701a      	strb	r2, [r3, #0]
  alarmTime = *(uint8_t *)alarmTime_FlashAdress;
 8004bb8:	4b4b      	ldr	r3, [pc, #300]	; (8004ce8 <main+0x14c>)
 8004bba:	781a      	ldrb	r2, [r3, #0]
 8004bbc:	4b4b      	ldr	r3, [pc, #300]	; (8004cec <main+0x150>)
 8004bbe:	701a      	strb	r2, [r3, #0]
  alarmPoweroff = *(uint8_t *)alarmPoweroff_FlashAdress;
 8004bc0:	4b4b      	ldr	r3, [pc, #300]	; (8004cf0 <main+0x154>)
 8004bc2:	781a      	ldrb	r2, [r3, #0]
 8004bc4:	4b4b      	ldr	r3, [pc, #300]	; (8004cf4 <main+0x158>)
 8004bc6:	701a      	strb	r2, [r3, #0]
  alarm_min = *(uint8_t *)alarm_min_FlashAdress;
 8004bc8:	4b4b      	ldr	r3, [pc, #300]	; (8004cf8 <main+0x15c>)
 8004bca:	781a      	ldrb	r2, [r3, #0]
 8004bcc:	4b4b      	ldr	r3, [pc, #300]	; (8004cfc <main+0x160>)
 8004bce:	701a      	strb	r2, [r3, #0]
  alarm_hour = *(uint8_t *)alarm_hour_FlashAdress;
 8004bd0:	4b4b      	ldr	r3, [pc, #300]	; (8004d00 <main+0x164>)
 8004bd2:	781a      	ldrb	r2, [r3, #0]
 8004bd4:	4b4b      	ldr	r3, [pc, #300]	; (8004d04 <main+0x168>)
 8004bd6:	701a      	strb	r2, [r3, #0]
  alarm_min_off = *(uint8_t *)alarm_min_off_FlashAdress;
 8004bd8:	4b4b      	ldr	r3, [pc, #300]	; (8004d08 <main+0x16c>)
 8004bda:	781a      	ldrb	r2, [r3, #0]
 8004bdc:	4b4b      	ldr	r3, [pc, #300]	; (8004d0c <main+0x170>)
 8004bde:	701a      	strb	r2, [r3, #0]
  alarm_hour_off = *(uint8_t *)alarm_hour_off_FlashAdress;
 8004be0:	4b4b      	ldr	r3, [pc, #300]	; (8004d10 <main+0x174>)
 8004be2:	781a      	ldrb	r2, [r3, #0]
 8004be4:	4b4b      	ldr	r3, [pc, #300]	; (8004d14 <main+0x178>)
 8004be6:	701a      	strb	r2, [r3, #0]
  alarm_day = *(uint8_t *)alarm_day_FlashAdress;
 8004be8:	4b4b      	ldr	r3, [pc, #300]	; (8004d18 <main+0x17c>)
 8004bea:	781a      	ldrb	r2, [r3, #0]
 8004bec:	4b4b      	ldr	r3, [pc, #300]	; (8004d1c <main+0x180>)
 8004bee:	701a      	strb	r2, [r3, #0]
  alarm_month = *(uint8_t *)alarm_month_FlashAdress;
 8004bf0:	4b4b      	ldr	r3, [pc, #300]	; (8004d20 <main+0x184>)
 8004bf2:	781a      	ldrb	r2, [r3, #0]
 8004bf4:	4b4b      	ldr	r3, [pc, #300]	; (8004d24 <main+0x188>)
 8004bf6:	701a      	strb	r2, [r3, #0]
  alarm_weekday = *(uint8_t *)alarm_weekday_FlashAdress;
 8004bf8:	4b4b      	ldr	r3, [pc, #300]	; (8004d28 <main+0x18c>)
 8004bfa:	781a      	ldrb	r2, [r3, #0]
 8004bfc:	4b4b      	ldr	r3, [pc, #300]	; (8004d2c <main+0x190>)
 8004bfe:	701a      	strb	r2, [r3, #0]
  alarm_enable = *(uint8_t *)alarm_enable_FlashAdress;
 8004c00:	4b4b      	ldr	r3, [pc, #300]	; (8004d30 <main+0x194>)
 8004c02:	781a      	ldrb	r2, [r3, #0]
 8004c04:	4b4b      	ldr	r3, [pc, #300]	; (8004d34 <main+0x198>)
 8004c06:	701a      	strb	r2, [r3, #0]
  shutdown_enable = *(uint8_t *)shutdown_enable_FlashAdress;
 8004c08:	4b4b      	ldr	r3, [pc, #300]	; (8004d38 <main+0x19c>)
 8004c0a:	781a      	ldrb	r2, [r3, #0]
 8004c0c:	4b4b      	ldr	r3, [pc, #300]	; (8004d3c <main+0x1a0>)
 8004c0e:	701a      	strb	r2, [r3, #0]
  shutdown_time = *(uint8_t *)shutdown_time_FlashAdress;
 8004c10:	4b4b      	ldr	r3, [pc, #300]	; (8004d40 <main+0x1a4>)
 8004c12:	781a      	ldrb	r2, [r3, #0]
 8004c14:	4b4b      	ldr	r3, [pc, #300]	; (8004d44 <main+0x1a8>)
 8004c16:	701a      	strb	r2, [r3, #0]
  warning_enable=  *(uint8_t *)warning_enable_FlashAdress;
 8004c18:	4b4b      	ldr	r3, [pc, #300]	; (8004d48 <main+0x1ac>)
 8004c1a:	781a      	ldrb	r2, [r3, #0]
 8004c1c:	4b4b      	ldr	r3, [pc, #300]	; (8004d4c <main+0x1b0>)
 8004c1e:	701a      	strb	r2, [r3, #0]
  poweroff_flag = 0;
 8004c20:	2200      	movs	r2, #0
 8004c22:	4b4b      	ldr	r3, [pc, #300]	; (8004d50 <main+0x1b4>)
 8004c24:	701a      	strb	r2, [r3, #0]
  HAL_Init();
 8004c26:	f7fb fbed 	bl	8000404 <HAL_Init>
  SystemClock_Config();
 8004c2a:	f7ff fe0f 	bl	800484c <SystemClock_Config>
  MX_GPIO_Init();
 8004c2e:	f7ff fb8f 	bl	8004350 <MX_GPIO_Init>
  MX_DMA_Init();
 8004c32:	f7ff fb7f 	bl	8004334 <MX_DMA_Init>
  MX_RTC_Init();
 8004c36:	f7ff fde9 	bl	800480c <MX_RTC_Init>
  MX_NVIC_Init();
 8004c3a:	f7ff fbd5 	bl	80043e8 <MX_NVIC_Init>
  initialCheck();
 8004c3e:	f7ff ff61 	bl	8004b04 <initialCheck>
  sdatestructure.Year = 0x18;
 8004c42:	4944      	ldr	r1, [pc, #272]	; (8004d54 <main+0x1b8>)
 8004c44:	2318      	movs	r3, #24
 8004c46:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = RTC_MONTH_MAY;
 8004c48:	3b13      	subs	r3, #19
 8004c4a:	704b      	strb	r3, [r1, #1]
  sdatestructure.Date = 0x01;
 8004c4c:	3b04      	subs	r3, #4
 8004c4e:	708b      	strb	r3, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_TUESDAY;
 8004c50:	3301      	adds	r3, #1
 8004c52:	700b      	strb	r3, [r1, #0]
  if(HAL_RTC_SetDate(&hrtc,&sdatestructure,RTC_FORMAT_BCD) != HAL_OK)
 8004c54:	2201      	movs	r2, #1
 8004c56:	4840      	ldr	r0, [pc, #256]	; (8004d58 <main+0x1bc>)
 8004c58:	f7fc ffda 	bl	8001c10 <HAL_RTC_SetDate>
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	d004      	beq.n	8004c6a <main+0xce>
    Error_Handler();
 8004c60:	2106      	movs	r1, #6
 8004c62:	31ff      	adds	r1, #255	; 0xff
 8004c64:	483d      	ldr	r0, [pc, #244]	; (8004d5c <main+0x1c0>)
 8004c66:	f7ff fdcf 	bl	8004808 <_Error_Handler>
  stimestructure.Hours = 0x00;
 8004c6a:	493d      	ldr	r1, [pc, #244]	; (8004d60 <main+0x1c4>)
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	700b      	strb	r3, [r1, #0]
  stimestructure.Minutes = 0x00;
 8004c70:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = 0x00;
 8004c72:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 8004c74:	70cb      	strb	r3, [r1, #3]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8004c76:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 8004c78:	610b      	str	r3, [r1, #16]
  if(HAL_RTC_SetTime(&hrtc,&stimestructure,RTC_FORMAT_BCD) != HAL_OK)
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	4836      	ldr	r0, [pc, #216]	; (8004d58 <main+0x1bc>)
 8004c7e:	f7fc ff49 	bl	8001b14 <HAL_RTC_SetTime>
 8004c82:	2800      	cmp	r0, #0
 8004c84:	d119      	bne.n	8004cba <main+0x11e>
  if (modus == 1 || modus == 3)
 8004c86:	4b13      	ldr	r3, [pc, #76]	; (8004cd4 <main+0x138>)
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d01a      	beq.n	8004cc4 <main+0x128>
 8004c8e:	2b03      	cmp	r3, #3
 8004c90:	d018      	beq.n	8004cc4 <main+0x128>
  else if (modus == 2 || modus == 4)
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d019      	beq.n	8004cca <main+0x12e>
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	d017      	beq.n	8004cca <main+0x12e>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 64);
 8004c9a:	a801      	add	r0, sp, #4
 8004c9c:	4931      	ldr	r1, [pc, #196]	; (8004d64 <main+0x1c8>)
 8004c9e:	0003      	movs	r3, r0
 8004ca0:	000a      	movs	r2, r1
 8004ca2:	ca32      	ldmia	r2!, {r1, r4, r5}
 8004ca4:	c332      	stmia	r3!, {r1, r4, r5}
 8004ca6:	ca12      	ldmia	r2!, {r1, r4}
 8004ca8:	c312      	stmia	r3!, {r1, r4}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004caa:	2100      	movs	r1, #0
 8004cac:	f7fd fda4 	bl	80027f8 <osThreadCreate>
 8004cb0:	4b2d      	ldr	r3, [pc, #180]	; (8004d68 <main+0x1cc>)
 8004cb2:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8004cb4:	f7fd fd9b 	bl	80027ee <osKernelStart>
 8004cb8:	e7fe      	b.n	8004cb8 <main+0x11c>
    Error_Handler();
 8004cba:	2189      	movs	r1, #137	; 0x89
 8004cbc:	0049      	lsls	r1, r1, #1
 8004cbe:	4827      	ldr	r0, [pc, #156]	; (8004d5c <main+0x1c0>)
 8004cc0:	f7ff fda2 	bl	8004808 <_Error_Handler>
	  Power_USB();
 8004cc4:	f7ff fbbe 	bl	8004444 <Power_USB>
 8004cc8:	e7e7      	b.n	8004c9a <main+0xfe>
	  Power_Wide();
 8004cca:	f7ff fba8 	bl	800441e <Power_Wide>
 8004cce:	e7e4      	b.n	8004c9a <main+0xfe>
 8004cd0:	08007c00 	.word	0x08007c00
 8004cd4:	200004bb 	.word	0x200004bb
 8004cd8:	08007c10 	.word	0x08007c10
 8004cdc:	200004ae 	.word	0x200004ae
 8004ce0:	08007c20 	.word	0x08007c20
 8004ce4:	200004b6 	.word	0x200004b6
 8004ce8:	08007c30 	.word	0x08007c30
 8004cec:	20000494 	.word	0x20000494
 8004cf0:	08007c40 	.word	0x08007c40
 8004cf4:	200004a4 	.word	0x200004a4
 8004cf8:	08007c50 	.word	0x08007c50
 8004cfc:	200004b9 	.word	0x200004b9
 8004d00:	08007c60 	.word	0x08007c60
 8004d04:	20000495 	.word	0x20000495
 8004d08:	08007c70 	.word	0x08007c70
 8004d0c:	200004a3 	.word	0x200004a3
 8004d10:	08007c80 	.word	0x08007c80
 8004d14:	200004b2 	.word	0x200004b2
 8004d18:	08007c90 	.word	0x08007c90
 8004d1c:	200004af 	.word	0x200004af
 8004d20:	08007ca0 	.word	0x08007ca0
 8004d24:	200004ac 	.word	0x200004ac
 8004d28:	08007cb0 	.word	0x08007cb0
 8004d2c:	200004b8 	.word	0x200004b8
 8004d30:	08007cc0 	.word	0x08007cc0
 8004d34:	200004b3 	.word	0x200004b3
 8004d38:	08007cd0 	.word	0x08007cd0
 8004d3c:	200004ba 	.word	0x200004ba
 8004d40:	08007ce0 	.word	0x08007ce0
 8004d44:	200004a2 	.word	0x200004a2
 8004d48:	08007cf0 	.word	0x08007cf0
 8004d4c:	200004b4 	.word	0x200004b4
 8004d50:	200004b1 	.word	0x200004b1
 8004d54:	200004e8 	.word	0x200004e8
 8004d58:	20000574 	.word	0x20000574
 8004d5c:	08007010 	.word	0x08007010
 8004d60:	200004f0 	.word	0x200004f0
 8004d64:	08005d9c 	.word	0x08005d9c
 8004d68:	200004ec 	.word	0x200004ec

08004d6c <MX_ADC_Init>:
{
 8004d6c:	b500      	push	{lr}
 8004d6e:	b089      	sub	sp, #36	; 0x24
  hadc.Instance = ADC1;
 8004d70:	483d      	ldr	r0, [pc, #244]	; (8004e68 <MX_ADC_Init+0xfc>)
 8004d72:	4b3e      	ldr	r3, [pc, #248]	; (8004e6c <MX_ADC_Init+0x100>)
 8004d74:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004d76:	2300      	movs	r3, #0
 8004d78:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004d7a:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004d7c:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004d7e:	2201      	movs	r2, #1
 8004d80:	6102      	str	r2, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004d82:	2104      	movs	r1, #4
 8004d84:	6141      	str	r1, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004d86:	6183      	str	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004d88:	61c3      	str	r3, [r0, #28]
  hadc.Init.ContinuousConvMode = ENABLE;
 8004d8a:	6202      	str	r2, [r0, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8004d8c:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004d8e:	21c2      	movs	r1, #194	; 0xc2
 8004d90:	31ff      	adds	r1, #255	; 0xff
 8004d92:	6281      	str	r1, [r0, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004d94:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = ENABLE;
 8004d96:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004d98:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004d9a:	f7fb fbab 	bl	80004f4 <HAL_ADC_Init>
 8004d9e:	2800      	cmp	r0, #0
 8004da0:	d004      	beq.n	8004dac <MX_ADC_Init+0x40>
    _Error_Handler(__FILE__, __LINE__);
 8004da2:	21e4      	movs	r1, #228	; 0xe4
 8004da4:	0049      	lsls	r1, r1, #1
 8004da6:	4832      	ldr	r0, [pc, #200]	; (8004e70 <MX_ADC_Init+0x104>)
 8004da8:	f7ff fd2e 	bl	8004808 <_Error_Handler>
  sConfig.Channel = ADC_CHANNEL_5;
 8004dac:	2305      	movs	r3, #5
 8004dae:	9305      	str	r3, [sp, #20]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004db0:	2380      	movs	r3, #128	; 0x80
 8004db2:	015b      	lsls	r3, r3, #5
 8004db4:	9306      	str	r3, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8004db6:	2307      	movs	r3, #7
 8004db8:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004dba:	a905      	add	r1, sp, #20
 8004dbc:	482a      	ldr	r0, [pc, #168]	; (8004e68 <MX_ADC_Init+0xfc>)
 8004dbe:	f7fb fd6f 	bl	80008a0 <HAL_ADC_ConfigChannel>
 8004dc2:	2800      	cmp	r0, #0
 8004dc4:	d004      	beq.n	8004dd0 <MX_ADC_Init+0x64>
    _Error_Handler(__FILE__, __LINE__);
 8004dc6:	21e9      	movs	r1, #233	; 0xe9
 8004dc8:	0049      	lsls	r1, r1, #1
 8004dca:	4829      	ldr	r0, [pc, #164]	; (8004e70 <MX_ADC_Init+0x104>)
 8004dcc:	f7ff fd1c 	bl	8004808 <_Error_Handler>
  sConfig.Channel = ADC_CHANNEL_6;
 8004dd0:	2306      	movs	r3, #6
 8004dd2:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004dd4:	a905      	add	r1, sp, #20
 8004dd6:	4824      	ldr	r0, [pc, #144]	; (8004e68 <MX_ADC_Init+0xfc>)
 8004dd8:	f7fb fd62 	bl	80008a0 <HAL_ADC_ConfigChannel>
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	d004      	beq.n	8004dea <MX_ADC_Init+0x7e>
    _Error_Handler(__FILE__, __LINE__);
 8004de0:	21ed      	movs	r1, #237	; 0xed
 8004de2:	0049      	lsls	r1, r1, #1
 8004de4:	4822      	ldr	r0, [pc, #136]	; (8004e70 <MX_ADC_Init+0x104>)
 8004de6:	f7ff fd0f 	bl	8004808 <_Error_Handler>
  sConfig.Channel = ADC_CHANNEL_7;
 8004dea:	2307      	movs	r3, #7
 8004dec:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004dee:	a905      	add	r1, sp, #20
 8004df0:	481d      	ldr	r0, [pc, #116]	; (8004e68 <MX_ADC_Init+0xfc>)
 8004df2:	f7fb fd55 	bl	80008a0 <HAL_ADC_ConfigChannel>
 8004df6:	2800      	cmp	r0, #0
 8004df8:	d004      	beq.n	8004e04 <MX_ADC_Init+0x98>
    _Error_Handler(__FILE__, __LINE__);
 8004dfa:	21f1      	movs	r1, #241	; 0xf1
 8004dfc:	0049      	lsls	r1, r1, #1
 8004dfe:	481c      	ldr	r0, [pc, #112]	; (8004e70 <MX_ADC_Init+0x104>)
 8004e00:	f7ff fd02 	bl	8004808 <_Error_Handler>
  sConfig.Channel = ADC_CHANNEL_9;
 8004e04:	2309      	movs	r3, #9
 8004e06:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004e08:	a905      	add	r1, sp, #20
 8004e0a:	4817      	ldr	r0, [pc, #92]	; (8004e68 <MX_ADC_Init+0xfc>)
 8004e0c:	f7fb fd48 	bl	80008a0 <HAL_ADC_ConfigChannel>
 8004e10:	2800      	cmp	r0, #0
 8004e12:	d004      	beq.n	8004e1e <MX_ADC_Init+0xb2>
    _Error_Handler(__FILE__, __LINE__);
 8004e14:	21f5      	movs	r1, #245	; 0xf5
 8004e16:	0049      	lsls	r1, r1, #1
 8004e18:	4815      	ldr	r0, [pc, #84]	; (8004e70 <MX_ADC_Init+0x104>)
 8004e1a:	f7ff fcf5 	bl	8004808 <_Error_Handler>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8004e1e:	2311      	movs	r3, #17
 8004e20:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004e22:	a905      	add	r1, sp, #20
 8004e24:	4810      	ldr	r0, [pc, #64]	; (8004e68 <MX_ADC_Init+0xfc>)
 8004e26:	f7fb fd3b 	bl	80008a0 <HAL_ADC_ConfigChannel>
 8004e2a:	2800      	cmp	r0, #0
 8004e2c:	d004      	beq.n	8004e38 <MX_ADC_Init+0xcc>
    _Error_Handler(__FILE__, __LINE__);
 8004e2e:	21f9      	movs	r1, #249	; 0xf9
 8004e30:	0049      	lsls	r1, r1, #1
 8004e32:	480f      	ldr	r0, [pc, #60]	; (8004e70 <MX_ADC_Init+0x104>)
 8004e34:	f7ff fce8 	bl	8004808 <_Error_Handler>
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8004e38:	23c0      	movs	r3, #192	; 0xc0
 8004e3a:	041b      	lsls	r3, r3, #16
 8004e3c:	9300      	str	r3, [sp, #0]
  AnalogWDGConfig.Channel = ADC_CHANNEL_7;
 8004e3e:	2307      	movs	r3, #7
 8004e40:	9301      	str	r3, [sp, #4]
  AnalogWDGConfig.ITMode = ENABLE;
 8004e42:	3b06      	subs	r3, #6
 8004e44:	9302      	str	r3, [sp, #8]
  AnalogWDGConfig.HighThreshold = 4095;
 8004e46:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <MX_ADC_Init+0x108>)
 8004e48:	9303      	str	r3, [sp, #12]
  AnalogWDGConfig.LowThreshold = 1850;
 8004e4a:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <MX_ADC_Init+0x10c>)
 8004e4c:	9304      	str	r3, [sp, #16]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 8004e4e:	4669      	mov	r1, sp
 8004e50:	4805      	ldr	r0, [pc, #20]	; (8004e68 <MX_ADC_Init+0xfc>)
 8004e52:	f7fb fdcb 	bl	80009ec <HAL_ADC_AnalogWDGConfig>
 8004e56:	2800      	cmp	r0, #0
 8004e58:	d004      	beq.n	8004e64 <MX_ADC_Init+0xf8>
    _Error_Handler(__FILE__, __LINE__);
 8004e5a:	21ff      	movs	r1, #255	; 0xff
 8004e5c:	0049      	lsls	r1, r1, #1
 8004e5e:	4804      	ldr	r0, [pc, #16]	; (8004e70 <MX_ADC_Init+0x104>)
 8004e60:	f7ff fcd2 	bl	8004808 <_Error_Handler>
}
 8004e64:	b009      	add	sp, #36	; 0x24
 8004e66:	bd00      	pop	{pc}
 8004e68:	200005d8 	.word	0x200005d8
 8004e6c:	40012400 	.word	0x40012400
 8004e70:	08007010 	.word	0x08007010
 8004e74:	00000fff 	.word	0x00000fff
 8004e78:	0000073a 	.word	0x0000073a

08004e7c <MX_USART1_UART_Init>:
{
 8004e7c:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8004e7e:	480c      	ldr	r0, [pc, #48]	; (8004eb0 <MX_USART1_UART_Init+0x34>)
 8004e80:	4b0c      	ldr	r3, [pc, #48]	; (8004eb4 <MX_USART1_UART_Init+0x38>)
 8004e82:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 38400;
 8004e84:	2396      	movs	r3, #150	; 0x96
 8004e86:	021b      	lsls	r3, r3, #8
 8004e88:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004e8e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004e90:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004e92:	220c      	movs	r2, #12
 8004e94:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e96:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e98:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004e9a:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004e9c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004e9e:	f7fd fb3d 	bl	800251c <HAL_UART_Init>
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	d003      	beq.n	8004eae <MX_USART1_UART_Init+0x32>
    _Error_Handler(__FILE__, __LINE__);
 8004ea6:	4904      	ldr	r1, [pc, #16]	; (8004eb8 <MX_USART1_UART_Init+0x3c>)
 8004ea8:	4804      	ldr	r0, [pc, #16]	; (8004ebc <MX_USART1_UART_Init+0x40>)
 8004eaa:	f7ff fcad 	bl	8004808 <_Error_Handler>
}
 8004eae:	bd10      	pop	{r4, pc}
 8004eb0:	20000504 	.word	0x20000504
 8004eb4:	40013800 	.word	0x40013800
 8004eb8:	00000227 	.word	0x00000227
 8004ebc:	08007010 	.word	0x08007010

08004ec0 <StartDefaultTask>:
{
 8004ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ec2:	46c6      	mov	lr, r8
 8004ec4:	b500      	push	{lr}
  if (initstart == 0)
 8004ec6:	4b90      	ldr	r3, [pc, #576]	; (8005108 <StartDefaultTask+0x248>)
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <StartDefaultTask+0x12>
{
 8004ece:	2700      	movs	r7, #0
 8004ed0:	e092      	b.n	8004ff8 <StartDefaultTask+0x138>
	  osDelay(500);
 8004ed2:	20fa      	movs	r0, #250	; 0xfa
 8004ed4:	0040      	lsls	r0, r0, #1
 8004ed6:	f7fd fca9 	bl	800282c <osDelay>
	  MX_ADC_Init();
 8004eda:	f7ff ff47 	bl	8004d6c <MX_ADC_Init>
	  if (modus == 1 || modus == 3)
 8004ede:	4b8b      	ldr	r3, [pc, #556]	; (800510c <StartDefaultTask+0x24c>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d001      	beq.n	8004eea <StartDefaultTask+0x2a>
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d117      	bne.n	8004f1a <StartDefaultTask+0x5a>
		  Power_USB();
 8004eea:	f7ff faab 	bl	8004444 <Power_USB>
		  configureAWD_USB();
 8004eee:	f7ff fd05 	bl	80048fc <configureAWD_USB>
	  HAL_ADCEx_Calibration_Start(&hadc);
 8004ef2:	4c87      	ldr	r4, [pc, #540]	; (8005110 <StartDefaultTask+0x250>)
 8004ef4:	0020      	movs	r0, r4
 8004ef6:	f7fb fdcd 	bl	8000a94 <HAL_ADCEx_Calibration_Start>
	  if (HAL_ADC_Start_DMA(&hadc, (uint32_t*)rawValue, 5) != HAL_OK)
 8004efa:	2205      	movs	r2, #5
 8004efc:	4985      	ldr	r1, [pc, #532]	; (8005114 <StartDefaultTask+0x254>)
 8004efe:	0020      	movs	r0, r4
 8004f00:	f7fb fbbe 	bl	8000680 <HAL_ADC_Start_DMA>
 8004f04:	2800      	cmp	r0, #0
 8004f06:	d000      	beq.n	8004f0a <StartDefaultTask+0x4a>
 8004f08:	e0fa      	b.n	8005100 <StartDefaultTask+0x240>
	  osDelay(5000);
 8004f0a:	4883      	ldr	r0, [pc, #524]	; (8005118 <StartDefaultTask+0x258>)
 8004f0c:	f7fd fc8e 	bl	800282c <osDelay>
	  MX_USART1_UART_Init();
 8004f10:	f7ff ffb4 	bl	8004e7c <MX_USART1_UART_Init>
	  vUARTCommandConsoleStart();
 8004f14:	f7fe fdf4 	bl	8003b00 <vUARTCommandConsoleStart>
 8004f18:	e7d9      	b.n	8004ece <StartDefaultTask+0xe>
	  else if (modus == 2 || modus == 4)
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d001      	beq.n	8004f22 <StartDefaultTask+0x62>
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d1e7      	bne.n	8004ef2 <StartDefaultTask+0x32>
		  Power_Wide();
 8004f22:	f7ff fa7c 	bl	800441e <Power_Wide>
		  configureAWD_Wide();
 8004f26:	f7ff fd0b 	bl	8004940 <configureAWD_Wide>
 8004f2a:	e7e2      	b.n	8004ef2 <StartDefaultTask+0x32>
		  Alarm_Handler();
 8004f2c:	f7ff fb34 	bl	8004598 <Alarm_Handler>
		  sek=0;
 8004f30:	2700      	movs	r7, #0
 8004f32:	e063      	b.n	8004ffc <StartDefaultTask+0x13c>
	  if (shutdown_enable == 1 && shutdown_flag == 1)
 8004f34:	4b79      	ldr	r3, [pc, #484]	; (800511c <StartDefaultTask+0x25c>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d06e      	beq.n	800501a <StartDefaultTask+0x15a>
	  if (warning_enable == 1 && warning_flag == 1 && shutdown_enable != 1)
 8004f3c:	4b78      	ldr	r3, [pc, #480]	; (8005120 <StartDefaultTask+0x260>)
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d100      	bne.n	8004f46 <StartDefaultTask+0x86>
 8004f44:	e07a      	b.n	800503c <StartDefaultTask+0x17c>
	  if (modus == 1 || modus== 3)
 8004f46:	4b71      	ldr	r3, [pc, #452]	; (800510c <StartDefaultTask+0x24c>)
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d100      	bne.n	8004f50 <StartDefaultTask+0x90>
 8004f4e:	e088      	b.n	8005062 <StartDefaultTask+0x1a2>
 8004f50:	2b03      	cmp	r3, #3
 8004f52:	d100      	bne.n	8004f56 <StartDefaultTask+0x96>
 8004f54:	e085      	b.n	8005062 <StartDefaultTask+0x1a2>
	  if (modus == 2 || modus== 4)
 8004f56:	4b6d      	ldr	r3, [pc, #436]	; (800510c <StartDefaultTask+0x24c>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d100      	bne.n	8004f60 <StartDefaultTask+0xa0>
 8004f5e:	e0a6      	b.n	80050ae <StartDefaultTask+0x1ee>
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d100      	bne.n	8004f66 <StartDefaultTask+0xa6>
 8004f64:	e0a3      	b.n	80050ae <StartDefaultTask+0x1ee>
	  HAL_ADCEx_Calibration_Start(&hadc);
 8004f66:	486a      	ldr	r0, [pc, #424]	; (8005110 <StartDefaultTask+0x250>)
 8004f68:	f7fb fd94 	bl	8000a94 <HAL_ADCEx_Calibration_Start>
	  VDDValue = 3300*(*((unsigned short*)0x1FFFF7BA)) / rawValue[4];
 8004f6c:	4b6d      	ldr	r3, [pc, #436]	; (8005124 <StartDefaultTask+0x264>)
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	486d      	ldr	r0, [pc, #436]	; (8005128 <StartDefaultTask+0x268>)
 8004f72:	4358      	muls	r0, r3
 8004f74:	4e67      	ldr	r6, [pc, #412]	; (8005114 <StartDefaultTask+0x254>)
 8004f76:	8931      	ldrh	r1, [r6, #8]
 8004f78:	f7fb f958 	bl	800022c <__divsi3>
 8004f7c:	0404      	lsls	r4, r0, #16
 8004f7e:	0c24      	lsrs	r4, r4, #16
	  measuredValue[0] = VDDValue*rawValue[0]/4095*105100/5100;
 8004f80:	8830      	ldrh	r0, [r6, #0]
 8004f82:	4360      	muls	r0, r4
 8004f84:	4969      	ldr	r1, [pc, #420]	; (800512c <StartDefaultTask+0x26c>)
 8004f86:	f7fb f951 	bl	800022c <__divsi3>
 8004f8a:	4b69      	ldr	r3, [pc, #420]	; (8005130 <StartDefaultTask+0x270>)
 8004f8c:	4358      	muls	r0, r3
 8004f8e:	4969      	ldr	r1, [pc, #420]	; (8005134 <StartDefaultTask+0x274>)
 8004f90:	f7fb f94c 	bl	800022c <__divsi3>
 8004f94:	4b68      	ldr	r3, [pc, #416]	; (8005138 <StartDefaultTask+0x278>)
 8004f96:	4698      	mov	r8, r3
 8004f98:	8018      	strh	r0, [r3, #0]
	  measuredValue[1] = VDDValue*rawValue[1]/4095*15100/5100;
 8004f9a:	8870      	ldrh	r0, [r6, #2]
 8004f9c:	4360      	muls	r0, r4
 8004f9e:	4963      	ldr	r1, [pc, #396]	; (800512c <StartDefaultTask+0x26c>)
 8004fa0:	f7fb f944 	bl	800022c <__divsi3>
 8004fa4:	4d65      	ldr	r5, [pc, #404]	; (800513c <StartDefaultTask+0x27c>)
 8004fa6:	4368      	muls	r0, r5
 8004fa8:	4962      	ldr	r1, [pc, #392]	; (8005134 <StartDefaultTask+0x274>)
 8004faa:	f7fb f93f 	bl	800022c <__divsi3>
 8004fae:	4643      	mov	r3, r8
 8004fb0:	8058      	strh	r0, [r3, #2]
	  measuredValue[2] = VDDValue*rawValue[2]/4095*15100/5100;
 8004fb2:	88b0      	ldrh	r0, [r6, #4]
 8004fb4:	4360      	muls	r0, r4
 8004fb6:	495d      	ldr	r1, [pc, #372]	; (800512c <StartDefaultTask+0x26c>)
 8004fb8:	f7fb f938 	bl	800022c <__divsi3>
 8004fbc:	4368      	muls	r0, r5
 8004fbe:	495d      	ldr	r1, [pc, #372]	; (8005134 <StartDefaultTask+0x274>)
 8004fc0:	f7fb f934 	bl	800022c <__divsi3>
 8004fc4:	4643      	mov	r3, r8
 8004fc6:	8098      	strh	r0, [r3, #4]
	  measuredValue[3] = VDDValue*rawValue[3]/4095*15100/5100;
 8004fc8:	88f0      	ldrh	r0, [r6, #6]
 8004fca:	4360      	muls	r0, r4
 8004fcc:	4957      	ldr	r1, [pc, #348]	; (800512c <StartDefaultTask+0x26c>)
 8004fce:	f7fb f92d 	bl	800022c <__divsi3>
 8004fd2:	4368      	muls	r0, r5
 8004fd4:	4957      	ldr	r1, [pc, #348]	; (8005134 <StartDefaultTask+0x274>)
 8004fd6:	f7fb f929 	bl	800022c <__divsi3>
 8004fda:	b280      	uxth	r0, r0
 8004fdc:	4643      	mov	r3, r8
 8004fde:	80d8      	strh	r0, [r3, #6]
	  if (measuredValue[3] < minBat && powerBat_flag == 1 )
 8004fe0:	4b57      	ldr	r3, [pc, #348]	; (8005140 <StartDefaultTask+0x280>)
 8004fe2:	4298      	cmp	r0, r3
 8004fe4:	d804      	bhi.n	8004ff0 <StartDefaultTask+0x130>
 8004fe6:	4b57      	ldr	r3, [pc, #348]	; (8005144 <StartDefaultTask+0x284>)
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d100      	bne.n	8004ff0 <StartDefaultTask+0x130>
 8004fee:	e084      	b.n	80050fa <StartDefaultTask+0x23a>
    osDelay(1000);
 8004ff0:	20fa      	movs	r0, #250	; 0xfa
 8004ff2:	0080      	lsls	r0, r0, #2
 8004ff4:	f7fd fc1a 	bl	800282c <osDelay>
	  if (sek == 60)
 8004ff8:	2f3c      	cmp	r7, #60	; 0x3c
 8004ffa:	d097      	beq.n	8004f2c <StartDefaultTask+0x6c>
	  sek++;
 8004ffc:	3701      	adds	r7, #1
 8004ffe:	b2ff      	uxtb	r7, r7
      if (shutdown_time_counter > 0)
 8005000:	4b51      	ldr	r3, [pc, #324]	; (8005148 <StartDefaultTask+0x288>)
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d095      	beq.n	8004f34 <StartDefaultTask+0x74>
		  shutdown_time_counter--;
 8005008:	3b01      	subs	r3, #1
 800500a:	b2db      	uxtb	r3, r3
 800500c:	4a4e      	ldr	r2, [pc, #312]	; (8005148 <StartDefaultTask+0x288>)
 800500e:	7013      	strb	r3, [r2, #0]
		  if (shutdown_time_counter == 0)
 8005010:	2b00      	cmp	r3, #0
 8005012:	d18f      	bne.n	8004f34 <StartDefaultTask+0x74>
			  Power_Off();
 8005014:	f7ff fa3c 	bl	8004490 <Power_Off>
 8005018:	e78c      	b.n	8004f34 <StartDefaultTask+0x74>
	  if (shutdown_enable == 1 && shutdown_flag == 1)
 800501a:	4b4c      	ldr	r3, [pc, #304]	; (800514c <StartDefaultTask+0x28c>)
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d18c      	bne.n	8004f3c <StartDefaultTask+0x7c>
		  shutdown_time_counter = shutdown_time;
 8005022:	4b4b      	ldr	r3, [pc, #300]	; (8005150 <StartDefaultTask+0x290>)
 8005024:	781a      	ldrb	r2, [r3, #0]
 8005026:	4b48      	ldr	r3, [pc, #288]	; (8005148 <StartDefaultTask+0x288>)
 8005028:	701a      	strb	r2, [r3, #0]
		  ShutdownRPi();
 800502a:	f7ff fa45 	bl	80044b8 <ShutdownRPi>
		  shutdown_flag = 0;
 800502e:	2200      	movs	r2, #0
 8005030:	4b46      	ldr	r3, [pc, #280]	; (800514c <StartDefaultTask+0x28c>)
 8005032:	701a      	strb	r2, [r3, #0]
		  powerback_flag = 1;
 8005034:	3201      	adds	r2, #1
 8005036:	4b47      	ldr	r3, [pc, #284]	; (8005154 <StartDefaultTask+0x294>)
 8005038:	701a      	strb	r2, [r3, #0]
 800503a:	e77f      	b.n	8004f3c <StartDefaultTask+0x7c>
	  if (warning_enable == 1 && warning_flag == 1 && shutdown_enable != 1)
 800503c:	4b46      	ldr	r3, [pc, #280]	; (8005158 <StartDefaultTask+0x298>)
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d000      	beq.n	8005046 <StartDefaultTask+0x186>
 8005044:	e77f      	b.n	8004f46 <StartDefaultTask+0x86>
 8005046:	4b35      	ldr	r3, [pc, #212]	; (800511c <StartDefaultTask+0x25c>)
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d100      	bne.n	8005050 <StartDefaultTask+0x190>
 800504e:	e77a      	b.n	8004f46 <StartDefaultTask+0x86>
		  	  PowerfailWarning();
 8005050:	f7ff fa4a 	bl	80044e8 <PowerfailWarning>
	  		  warning_flag = 0;
 8005054:	2200      	movs	r2, #0
 8005056:	4b40      	ldr	r3, [pc, #256]	; (8005158 <StartDefaultTask+0x298>)
 8005058:	701a      	strb	r2, [r3, #0]
	  		  powerback_flag = 1;
 800505a:	3201      	adds	r2, #1
 800505c:	4b3d      	ldr	r3, [pc, #244]	; (8005154 <StartDefaultTask+0x294>)
 800505e:	701a      	strb	r2, [r3, #0]
 8005060:	e771      	b.n	8004f46 <StartDefaultTask+0x86>
		  if (rawValue[2] > minUSB && poweroff_flag !=1)
 8005062:	4b2c      	ldr	r3, [pc, #176]	; (8005114 <StartDefaultTask+0x254>)
 8005064:	889a      	ldrh	r2, [r3, #4]
 8005066:	23e1      	movs	r3, #225	; 0xe1
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	429a      	cmp	r2, r3
 800506c:	d800      	bhi.n	8005070 <StartDefaultTask+0x1b0>
 800506e:	e772      	b.n	8004f56 <StartDefaultTask+0x96>
 8005070:	4b3a      	ldr	r3, [pc, #232]	; (800515c <StartDefaultTask+0x29c>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d100      	bne.n	800507a <StartDefaultTask+0x1ba>
 8005078:	e76d      	b.n	8004f56 <StartDefaultTask+0x96>
		  			Power_USB();
 800507a:	f7ff f9e3 	bl	8004444 <Power_USB>
		  			__HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_AWD);
 800507e:	4b24      	ldr	r3, [pc, #144]	; (8005110 <StartDefaultTask+0x250>)
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	2180      	movs	r1, #128	; 0x80
 8005084:	6011      	str	r1, [r2, #0]
		  			__HAL_ADC_ENABLE_IT(&hadc, ADC_IT_AWD);
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	6853      	ldr	r3, [r2, #4]
 800508a:	430b      	orrs	r3, r1
 800508c:	6053      	str	r3, [r2, #4]
		  			shutdown_time_counter = 0;
 800508e:	2300      	movs	r3, #0
 8005090:	4a2d      	ldr	r2, [pc, #180]	; (8005148 <StartDefaultTask+0x288>)
 8005092:	7013      	strb	r3, [r2, #0]
		  			powerBat_flag = 0;
 8005094:	4a2b      	ldr	r2, [pc, #172]	; (8005144 <StartDefaultTask+0x284>)
 8005096:	7013      	strb	r3, [r2, #0]
		  			if (powerback_flag == 1)
 8005098:	4b2e      	ldr	r3, [pc, #184]	; (8005154 <StartDefaultTask+0x294>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d000      	beq.n	80050a2 <StartDefaultTask+0x1e2>
 80050a0:	e759      	b.n	8004f56 <StartDefaultTask+0x96>
		  				PowerBack();
 80050a2:	f7ff fa15 	bl	80044d0 <PowerBack>
		  				powerback_flag = 0;
 80050a6:	2200      	movs	r2, #0
 80050a8:	4b2a      	ldr	r3, [pc, #168]	; (8005154 <StartDefaultTask+0x294>)
 80050aa:	701a      	strb	r2, [r3, #0]
 80050ac:	e753      	b.n	8004f56 <StartDefaultTask+0x96>
		  if (rawValue[0] > minWide && poweroff_flag !=1)
 80050ae:	4b19      	ldr	r3, [pc, #100]	; (8005114 <StartDefaultTask+0x254>)
 80050b0:	881a      	ldrh	r2, [r3, #0]
 80050b2:	2396      	movs	r3, #150	; 0x96
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d800      	bhi.n	80050bc <StartDefaultTask+0x1fc>
 80050ba:	e754      	b.n	8004f66 <StartDefaultTask+0xa6>
 80050bc:	4b27      	ldr	r3, [pc, #156]	; (800515c <StartDefaultTask+0x29c>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d100      	bne.n	80050c6 <StartDefaultTask+0x206>
 80050c4:	e74f      	b.n	8004f66 <StartDefaultTask+0xa6>
		  			Power_Wide();
 80050c6:	f7ff f9aa 	bl	800441e <Power_Wide>
		  			__HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_AWD);
 80050ca:	4b11      	ldr	r3, [pc, #68]	; (8005110 <StartDefaultTask+0x250>)
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	2180      	movs	r1, #128	; 0x80
 80050d0:	6011      	str	r1, [r2, #0]
		  			__HAL_ADC_ENABLE_IT(&hadc, ADC_IT_AWD);
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	6853      	ldr	r3, [r2, #4]
 80050d6:	430b      	orrs	r3, r1
 80050d8:	6053      	str	r3, [r2, #4]
		  			shutdown_time_counter = 0;
 80050da:	2300      	movs	r3, #0
 80050dc:	4a1a      	ldr	r2, [pc, #104]	; (8005148 <StartDefaultTask+0x288>)
 80050de:	7013      	strb	r3, [r2, #0]
		  			powerBat_flag = 0;
 80050e0:	4a18      	ldr	r2, [pc, #96]	; (8005144 <StartDefaultTask+0x284>)
 80050e2:	7013      	strb	r3, [r2, #0]
		  			if (powerback_flag == 1)
 80050e4:	4b1b      	ldr	r3, [pc, #108]	; (8005154 <StartDefaultTask+0x294>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d000      	beq.n	80050ee <StartDefaultTask+0x22e>
 80050ec:	e73b      	b.n	8004f66 <StartDefaultTask+0xa6>
		  				PowerBack();
 80050ee:	f7ff f9ef 	bl	80044d0 <PowerBack>
		  				powerback_flag = 0;
 80050f2:	2200      	movs	r2, #0
 80050f4:	4b17      	ldr	r3, [pc, #92]	; (8005154 <StartDefaultTask+0x294>)
 80050f6:	701a      	strb	r2, [r3, #0]
 80050f8:	e735      	b.n	8004f66 <StartDefaultTask+0xa6>
	  		  			Power_Off();
 80050fa:	f7ff f9c9 	bl	8004490 <Power_Off>
 80050fe:	e777      	b.n	8004ff0 <StartDefaultTask+0x130>
}
 8005100:	bc04      	pop	{r2}
 8005102:	4690      	mov	r8, r2
 8005104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005106:	46c0      	nop			; (mov r8, r8)
 8005108:	20000484 	.word	0x20000484
 800510c:	200004bb 	.word	0x200004bb
 8005110:	200005d8 	.word	0x200005d8
 8005114:	20000498 	.word	0x20000498
 8005118:	00001388 	.word	0x00001388
 800511c:	200004ba 	.word	0x200004ba
 8005120:	200004b4 	.word	0x200004b4
 8005124:	1ffff7ba 	.word	0x1ffff7ba
 8005128:	00000ce4 	.word	0x00000ce4
 800512c:	00000fff 	.word	0x00000fff
 8005130:	00019a8c 	.word	0x00019a8c
 8005134:	000013ec 	.word	0x000013ec
 8005138:	200004bc 	.word	0x200004bc
 800513c:	00003afc 	.word	0x00003afc
 8005140:	000009f5 	.word	0x000009f5
 8005144:	200004ad 	.word	0x200004ad
 8005148:	20000496 	.word	0x20000496
 800514c:	200004b5 	.word	0x200004b5
 8005150:	200004a2 	.word	0x200004a2
 8005154:	200004b7 	.word	0x200004b7
 8005158:	200004b0 	.word	0x200004b0
 800515c:	200004b1 	.word	0x200004b1

08005160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005160:	b500      	push	{lr}
 8005162:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005164:	4a0e      	ldr	r2, [pc, #56]	; (80051a0 <HAL_MspInit+0x40>)
 8005166:	6991      	ldr	r1, [r2, #24]
 8005168:	2301      	movs	r3, #1
 800516a:	4319      	orrs	r1, r3
 800516c:	6191      	str	r1, [r2, #24]
 800516e:	6992      	ldr	r2, [r2, #24]
 8005170:	4013      	ands	r3, r2
 8005172:	9301      	str	r3, [sp, #4]
 8005174:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8005176:	2200      	movs	r2, #0
 8005178:	2100      	movs	r1, #0
 800517a:	2005      	movs	r0, #5
 800517c:	4240      	negs	r0, r0
 800517e:	f7fb fce9 	bl	8000b54 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8005182:	2200      	movs	r2, #0
 8005184:	2103      	movs	r1, #3
 8005186:	2002      	movs	r0, #2
 8005188:	4240      	negs	r0, r0
 800518a:	f7fb fce3 	bl	8000b54 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 3, 0);
 800518e:	2200      	movs	r2, #0
 8005190:	2103      	movs	r1, #3
 8005192:	2001      	movs	r0, #1
 8005194:	4240      	negs	r0, r0
 8005196:	f7fb fcdd 	bl	8000b54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800519a:	b003      	add	sp, #12
 800519c:	bd00      	pop	{pc}
 800519e:	46c0      	nop			; (mov r8, r8)
 80051a0:	40021000 	.word	0x40021000

080051a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80051a4:	b570      	push	{r4, r5, r6, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80051aa:	4b1f      	ldr	r3, [pc, #124]	; (8005228 <HAL_ADC_MspInit+0x84>)
 80051ac:	6802      	ldr	r2, [r0, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d001      	beq.n	80051b6 <HAL_ADC_MspInit+0x12>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80051b2:	b006      	add	sp, #24
 80051b4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80051b6:	4a1d      	ldr	r2, [pc, #116]	; (800522c <HAL_ADC_MspInit+0x88>)
 80051b8:	6991      	ldr	r1, [r2, #24]
 80051ba:	2080      	movs	r0, #128	; 0x80
 80051bc:	0080      	lsls	r0, r0, #2
 80051be:	4301      	orrs	r1, r0
 80051c0:	6191      	str	r1, [r2, #24]
 80051c2:	6993      	ldr	r3, [r2, #24]
 80051c4:	4003      	ands	r3, r0
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = ADC_WIDE_Pin|ADC_VBAT_Pin|ADC_VUSB_Pin;
 80051ca:	23e0      	movs	r3, #224	; 0xe0
 80051cc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051ce:	2603      	movs	r6, #3
 80051d0:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d2:	2500      	movs	r5, #0
 80051d4:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051d6:	a901      	add	r1, sp, #4
 80051d8:	2090      	movs	r0, #144	; 0x90
 80051da:	05c0      	lsls	r0, r0, #23
 80051dc:	f7fb ff6c 	bl	80010b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC_VOUT_Pin;
 80051e0:	2302      	movs	r3, #2
 80051e2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051e4:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e6:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(ADC_VOUT_GPIO_Port, &GPIO_InitStruct);
 80051e8:	a901      	add	r1, sp, #4
 80051ea:	4811      	ldr	r0, [pc, #68]	; (8005230 <HAL_ADC_MspInit+0x8c>)
 80051ec:	f7fb ff64 	bl	80010b8 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 80051f0:	4810      	ldr	r0, [pc, #64]	; (8005234 <HAL_ADC_MspInit+0x90>)
 80051f2:	4b11      	ldr	r3, [pc, #68]	; (8005238 <HAL_ADC_MspInit+0x94>)
 80051f4:	6003      	str	r3, [r0, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051f6:	6045      	str	r5, [r0, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80051f8:	6085      	str	r5, [r0, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80051fa:	2380      	movs	r3, #128	; 0x80
 80051fc:	60c3      	str	r3, [r0, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80051fe:	3380      	adds	r3, #128	; 0x80
 8005200:	6103      	str	r3, [r0, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005202:	2380      	movs	r3, #128	; 0x80
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	6143      	str	r3, [r0, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8005208:	2320      	movs	r3, #32
 800520a:	6183      	str	r3, [r0, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800520c:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800520e:	f7fb fd33 	bl	8000c78 <HAL_DMA_Init>
 8005212:	2800      	cmp	r0, #0
 8005214:	d103      	bne.n	800521e <HAL_ADC_MspInit+0x7a>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8005216:	4b07      	ldr	r3, [pc, #28]	; (8005234 <HAL_ADC_MspInit+0x90>)
 8005218:	63e3      	str	r3, [r4, #60]	; 0x3c
 800521a:	625c      	str	r4, [r3, #36]	; 0x24
}
 800521c:	e7c9      	b.n	80051b2 <HAL_ADC_MspInit+0xe>
      _Error_Handler(__FILE__, __LINE__);
 800521e:	217a      	movs	r1, #122	; 0x7a
 8005220:	4806      	ldr	r0, [pc, #24]	; (800523c <HAL_ADC_MspInit+0x98>)
 8005222:	f7ff faf1 	bl	8004808 <_Error_Handler>
 8005226:	e7f6      	b.n	8005216 <HAL_ADC_MspInit+0x72>
 8005228:	40012400 	.word	0x40012400
 800522c:	40021000 	.word	0x40021000
 8005230:	48000400 	.word	0x48000400
 8005234:	20000594 	.word	0x20000594
 8005238:	40020008 	.word	0x40020008
 800523c:	0800702c 	.word	0x0800702c

08005240 <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 8005240:	6802      	ldr	r2, [r0, #0]
 8005242:	4b05      	ldr	r3, [pc, #20]	; (8005258 <HAL_RTC_MspInit+0x18>)
 8005244:	429a      	cmp	r2, r3
 8005246:	d000      	beq.n	800524a <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005248:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 800524a:	4a04      	ldr	r2, [pc, #16]	; (800525c <HAL_RTC_MspInit+0x1c>)
 800524c:	6a11      	ldr	r1, [r2, #32]
 800524e:	2380      	movs	r3, #128	; 0x80
 8005250:	021b      	lsls	r3, r3, #8
 8005252:	430b      	orrs	r3, r1
 8005254:	6213      	str	r3, [r2, #32]
}
 8005256:	e7f7      	b.n	8005248 <HAL_RTC_MspInit+0x8>
 8005258:	40002800 	.word	0x40002800
 800525c:	40021000 	.word	0x40021000

08005260 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005260:	b500      	push	{lr}
 8005262:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8005264:	6802      	ldr	r2, [r0, #0]
 8005266:	4b0f      	ldr	r3, [pc, #60]	; (80052a4 <HAL_UART_MspInit+0x44>)
 8005268:	429a      	cmp	r2, r3
 800526a:	d001      	beq.n	8005270 <HAL_UART_MspInit+0x10>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800526c:	b007      	add	sp, #28
 800526e:	bd00      	pop	{pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8005270:	4a0d      	ldr	r2, [pc, #52]	; (80052a8 <HAL_UART_MspInit+0x48>)
 8005272:	6991      	ldr	r1, [r2, #24]
 8005274:	2080      	movs	r0, #128	; 0x80
 8005276:	01c0      	lsls	r0, r0, #7
 8005278:	4301      	orrs	r1, r0
 800527a:	6191      	str	r1, [r2, #24]
 800527c:	6993      	ldr	r3, [r2, #24]
 800527e:	4003      	ands	r3, r0
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005284:	23c0      	movs	r3, #192	; 0xc0
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800528a:	2302      	movs	r3, #2
 800528c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800528e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005290:	3301      	adds	r3, #1
 8005292:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8005294:	3b02      	subs	r3, #2
 8005296:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005298:	a901      	add	r1, sp, #4
 800529a:	2090      	movs	r0, #144	; 0x90
 800529c:	05c0      	lsls	r0, r0, #23
 800529e:	f7fb ff0b 	bl	80010b8 <HAL_GPIO_Init>
}
 80052a2:	e7e3      	b.n	800526c <HAL_UART_MspInit+0xc>
 80052a4:	40013800 	.word	0x40013800
 80052a8:	40021000 	.word	0x40021000

080052ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052ac:	b500      	push	{lr}
 80052ae:	b087      	sub	sp, #28
 80052b0:	0001      	movs	r1, r0
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM14_IRQn, TickPriority ,0); 
 80052b2:	2200      	movs	r2, #0
 80052b4:	2013      	movs	r0, #19
 80052b6:	f7fb fc4d 	bl	8000b54 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM14_IRQn); 
 80052ba:	2013      	movs	r0, #19
 80052bc:	f7fb fc7c 	bl	8000bb8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80052c0:	4a13      	ldr	r2, [pc, #76]	; (8005310 <HAL_InitTick+0x64>)
 80052c2:	69d1      	ldr	r1, [r2, #28]
 80052c4:	2080      	movs	r0, #128	; 0x80
 80052c6:	0040      	lsls	r0, r0, #1
 80052c8:	4301      	orrs	r1, r0
 80052ca:	61d1      	str	r1, [r2, #28]
 80052cc:	69d3      	ldr	r3, [r2, #28]
 80052ce:	4003      	ands	r3, r0
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	9b00      	ldr	r3, [sp, #0]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80052d4:	a901      	add	r1, sp, #4
 80052d6:	a802      	add	r0, sp, #8
 80052d8:	f7fc fad0 	bl	800187c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80052dc:	f7fc fabe 	bl	800185c <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80052e0:	490c      	ldr	r1, [pc, #48]	; (8005314 <HAL_InitTick+0x68>)
 80052e2:	f7fa ff19 	bl	8000118 <__udivsi3>
 80052e6:	1e43      	subs	r3, r0, #1
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80052e8:	480b      	ldr	r0, [pc, #44]	; (8005318 <HAL_InitTick+0x6c>)
 80052ea:	4a0c      	ldr	r2, [pc, #48]	; (800531c <HAL_InitTick+0x70>)
 80052ec:	6002      	str	r2, [r0, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 80052ee:	4a0c      	ldr	r2, [pc, #48]	; (8005320 <HAL_InitTick+0x74>)
 80052f0:	60c2      	str	r2, [r0, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80052f2:	6043      	str	r3, [r0, #4]
  htim14.Init.ClockDivision = 0;
 80052f4:	2300      	movs	r3, #0
 80052f6:	6103      	str	r3, [r0, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052f8:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80052fa:	f7fc fe59 	bl	8001fb0 <HAL_TIM_Base_Init>
 80052fe:	2800      	cmp	r0, #0
 8005300:	d002      	beq.n	8005308 <HAL_InitTick+0x5c>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8005302:	2001      	movs	r0, #1
}
 8005304:	b007      	add	sp, #28
 8005306:	bd00      	pop	{pc}
    return HAL_TIM_Base_Start_IT(&htim14);
 8005308:	4803      	ldr	r0, [pc, #12]	; (8005318 <HAL_InitTick+0x6c>)
 800530a:	f7fc fd48 	bl	8001d9e <HAL_TIM_Base_Start_IT>
 800530e:	e7f9      	b.n	8005304 <HAL_InitTick+0x58>
 8005310:	40021000 	.word	0x40021000
 8005314:	000f4240 	.word	0x000f4240
 8005318:	20000624 	.word	0x20000624
 800531c:	40002000 	.word	0x40002000
 8005320:	000003e7 	.word	0x000003e7

08005324 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005324:	4770      	bx	lr

08005326 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8005326:	e7fe      	b.n	8005326 <HardFault_Handler>

08005328 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8005328:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800532a:	f7fd fa87 	bl	800283c <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800532e:	bd10      	pop	{r4, pc}

08005330 <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 8005330:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8005332:	4802      	ldr	r0, [pc, #8]	; (800533c <DMA1_Channel1_IRQHandler+0xc>)
 8005334:	f7fb fd2c 	bl	8000d90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005338:	bd10      	pop	{r4, pc}
 800533a:	46c0      	nop			; (mov r8, r8)
 800533c:	20000594 	.word	0x20000594

08005340 <ADC1_IRQHandler>:

/**
* @brief This function handles ADC interrupt.
*/
void ADC1_IRQHandler(void)
{
 8005340:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8005342:	4802      	ldr	r0, [pc, #8]	; (800534c <ADC1_IRQHandler+0xc>)
 8005344:	f7fb fa3e 	bl	80007c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8005348:	bd10      	pop	{r4, pc}
 800534a:	46c0      	nop			; (mov r8, r8)
 800534c:	200005d8 	.word	0x200005d8

08005350 <TIM14_IRQHandler>:

/**
* @brief This function handles TIM14 global interrupt.
*/
void TIM14_IRQHandler(void)
{
 8005350:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8005352:	4802      	ldr	r0, [pc, #8]	; (800535c <TIM14_IRQHandler+0xc>)
 8005354:	f7fc fd32 	bl	8001dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8005358:	bd10      	pop	{r4, pc}
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	20000624 	.word	0x20000624

08005360 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 8005360:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005362:	4802      	ldr	r0, [pc, #8]	; (800536c <USART1_IRQHandler+0xc>)
 8005364:	f7fd f99a 	bl	800269c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005368:	bd10      	pop	{r4, pc}
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	20000504 	.word	0x20000504

08005370 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8005370:	4b11      	ldr	r3, [pc, #68]	; (80053b8 <SystemInit+0x48>)
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	2101      	movs	r1, #1
 8005376:	430a      	orrs	r2, r1
 8005378:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	480f      	ldr	r0, [pc, #60]	; (80053bc <SystemInit+0x4c>)
 800537e:	4002      	ands	r2, r0
 8005380:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	480e      	ldr	r0, [pc, #56]	; (80053c0 <SystemInit+0x50>)
 8005386:	4002      	ands	r2, r0
 8005388:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	480d      	ldr	r0, [pc, #52]	; (80053c4 <SystemInit+0x54>)
 800538e:	4002      	ands	r2, r0
 8005390:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	480c      	ldr	r0, [pc, #48]	; (80053c8 <SystemInit+0x58>)
 8005396:	4002      	ands	r2, r0
 8005398:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800539a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539c:	200f      	movs	r0, #15
 800539e:	4382      	bics	r2, r0
 80053a0:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 80053a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053a4:	4809      	ldr	r0, [pc, #36]	; (80053cc <SystemInit+0x5c>)
 80053a6:	4002      	ands	r2, r0
 80053a8:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80053aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053ac:	438a      	bics	r2, r1
 80053ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80053b0:	2200      	movs	r2, #0
 80053b2:	609a      	str	r2, [r3, #8]

}
 80053b4:	4770      	bx	lr
 80053b6:	46c0      	nop			; (mov r8, r8)
 80053b8:	40021000 	.word	0x40021000
 80053bc:	08ffb80c 	.word	0x08ffb80c
 80053c0:	fef6ffff 	.word	0xfef6ffff
 80053c4:	fffbffff 	.word	0xfffbffff
 80053c8:	ffc0ffff 	.word	0xffc0ffff
 80053cc:	fffffeec 	.word	0xfffffeec

080053d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80053d0:	480d      	ldr	r0, [pc, #52]	; (8005408 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80053d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80053d4:	480d      	ldr	r0, [pc, #52]	; (800540c <LoopForever+0x6>)
  ldr r1, =_edata
 80053d6:	490e      	ldr	r1, [pc, #56]	; (8005410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80053d8:	4a0e      	ldr	r2, [pc, #56]	; (8005414 <LoopForever+0xe>)
  movs r3, #0
 80053da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80053dc:	e002      	b.n	80053e4 <LoopCopyDataInit>

080053de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80053e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80053e2:	3304      	adds	r3, #4

080053e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80053e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80053e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80053e8:	d3f9      	bcc.n	80053de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80053ea:	4a0b      	ldr	r2, [pc, #44]	; (8005418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80053ec:	4c0b      	ldr	r4, [pc, #44]	; (800541c <LoopForever+0x16>)
  movs r3, #0
 80053ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80053f0:	e001      	b.n	80053f6 <LoopFillZerobss>

080053f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80053f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80053f4:	3204      	adds	r2, #4

080053f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80053f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80053f8:	d3fb      	bcc.n	80053f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80053fa:	f7ff ffb9 	bl	8005370 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80053fe:	f000 f811 	bl	8005424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005402:	f7ff fbcb 	bl	8004b9c <main>

08005406 <LoopForever>:

LoopForever:
    b LoopForever
 8005406:	e7fe      	b.n	8005406 <LoopForever>
  ldr   r0, =_estack
 8005408:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800540c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005410:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8005414:	0800709c 	.word	0x0800709c
  ldr r2, =_sbss
 8005418:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 800541c:	20000668 	.word	0x20000668

08005420 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005420:	e7fe      	b.n	8005420 <DMA1_Channel2_3_IRQHandler>
	...

08005424 <__libc_init_array>:
 8005424:	b570      	push	{r4, r5, r6, lr}
 8005426:	2600      	movs	r6, #0
 8005428:	4d0c      	ldr	r5, [pc, #48]	; (800545c <__libc_init_array+0x38>)
 800542a:	4c0d      	ldr	r4, [pc, #52]	; (8005460 <__libc_init_array+0x3c>)
 800542c:	1b64      	subs	r4, r4, r5
 800542e:	10a4      	asrs	r4, r4, #2
 8005430:	42a6      	cmp	r6, r4
 8005432:	d109      	bne.n	8005448 <__libc_init_array+0x24>
 8005434:	2600      	movs	r6, #0
 8005436:	f000 fc95 	bl	8005d64 <_init>
 800543a:	4d0a      	ldr	r5, [pc, #40]	; (8005464 <__libc_init_array+0x40>)
 800543c:	4c0a      	ldr	r4, [pc, #40]	; (8005468 <__libc_init_array+0x44>)
 800543e:	1b64      	subs	r4, r4, r5
 8005440:	10a4      	asrs	r4, r4, #2
 8005442:	42a6      	cmp	r6, r4
 8005444:	d105      	bne.n	8005452 <__libc_init_array+0x2e>
 8005446:	bd70      	pop	{r4, r5, r6, pc}
 8005448:	00b3      	lsls	r3, r6, #2
 800544a:	58eb      	ldr	r3, [r5, r3]
 800544c:	4798      	blx	r3
 800544e:	3601      	adds	r6, #1
 8005450:	e7ee      	b.n	8005430 <__libc_init_array+0xc>
 8005452:	00b3      	lsls	r3, r6, #2
 8005454:	58eb      	ldr	r3, [r5, r3]
 8005456:	4798      	blx	r3
 8005458:	3601      	adds	r6, #1
 800545a:	e7f2      	b.n	8005442 <__libc_init_array+0x1e>
 800545c:	08007094 	.word	0x08007094
 8005460:	08007094 	.word	0x08007094
 8005464:	08007094 	.word	0x08007094
 8005468:	08007098 	.word	0x08007098

0800546c <malloc>:
 800546c:	b510      	push	{r4, lr}
 800546e:	4b03      	ldr	r3, [pc, #12]	; (800547c <malloc+0x10>)
 8005470:	0001      	movs	r1, r0
 8005472:	6818      	ldr	r0, [r3, #0]
 8005474:	f000 f86a 	bl	800554c <_malloc_r>
 8005478:	bd10      	pop	{r4, pc}
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	20000070 	.word	0x20000070

08005480 <free>:
 8005480:	b510      	push	{r4, lr}
 8005482:	4b03      	ldr	r3, [pc, #12]	; (8005490 <free+0x10>)
 8005484:	0001      	movs	r1, r0
 8005486:	6818      	ldr	r0, [r3, #0]
 8005488:	f000 f816 	bl	80054b8 <_free_r>
 800548c:	bd10      	pop	{r4, pc}
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	20000070 	.word	0x20000070

08005494 <memcpy>:
 8005494:	2300      	movs	r3, #0
 8005496:	b510      	push	{r4, lr}
 8005498:	429a      	cmp	r2, r3
 800549a:	d100      	bne.n	800549e <memcpy+0xa>
 800549c:	bd10      	pop	{r4, pc}
 800549e:	5ccc      	ldrb	r4, [r1, r3]
 80054a0:	54c4      	strb	r4, [r0, r3]
 80054a2:	3301      	adds	r3, #1
 80054a4:	e7f8      	b.n	8005498 <memcpy+0x4>

080054a6 <memset>:
 80054a6:	0003      	movs	r3, r0
 80054a8:	1882      	adds	r2, r0, r2
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d100      	bne.n	80054b0 <memset+0xa>
 80054ae:	4770      	bx	lr
 80054b0:	7019      	strb	r1, [r3, #0]
 80054b2:	3301      	adds	r3, #1
 80054b4:	e7f9      	b.n	80054aa <memset+0x4>
	...

080054b8 <_free_r>:
 80054b8:	b570      	push	{r4, r5, r6, lr}
 80054ba:	0005      	movs	r5, r0
 80054bc:	2900      	cmp	r1, #0
 80054be:	d010      	beq.n	80054e2 <_free_r+0x2a>
 80054c0:	1f0c      	subs	r4, r1, #4
 80054c2:	6823      	ldr	r3, [r4, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	da00      	bge.n	80054ca <_free_r+0x12>
 80054c8:	18e4      	adds	r4, r4, r3
 80054ca:	0028      	movs	r0, r5
 80054cc:	f000 f8fe 	bl	80056cc <__malloc_lock>
 80054d0:	4a1d      	ldr	r2, [pc, #116]	; (8005548 <_free_r+0x90>)
 80054d2:	6813      	ldr	r3, [r2, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d105      	bne.n	80054e4 <_free_r+0x2c>
 80054d8:	6063      	str	r3, [r4, #4]
 80054da:	6014      	str	r4, [r2, #0]
 80054dc:	0028      	movs	r0, r5
 80054de:	f000 f8f6 	bl	80056ce <__malloc_unlock>
 80054e2:	bd70      	pop	{r4, r5, r6, pc}
 80054e4:	42a3      	cmp	r3, r4
 80054e6:	d909      	bls.n	80054fc <_free_r+0x44>
 80054e8:	6821      	ldr	r1, [r4, #0]
 80054ea:	1860      	adds	r0, r4, r1
 80054ec:	4283      	cmp	r3, r0
 80054ee:	d1f3      	bne.n	80054d8 <_free_r+0x20>
 80054f0:	6818      	ldr	r0, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	1841      	adds	r1, r0, r1
 80054f6:	6021      	str	r1, [r4, #0]
 80054f8:	e7ee      	b.n	80054d8 <_free_r+0x20>
 80054fa:	0013      	movs	r3, r2
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	2a00      	cmp	r2, #0
 8005500:	d001      	beq.n	8005506 <_free_r+0x4e>
 8005502:	42a2      	cmp	r2, r4
 8005504:	d9f9      	bls.n	80054fa <_free_r+0x42>
 8005506:	6819      	ldr	r1, [r3, #0]
 8005508:	1858      	adds	r0, r3, r1
 800550a:	42a0      	cmp	r0, r4
 800550c:	d10b      	bne.n	8005526 <_free_r+0x6e>
 800550e:	6820      	ldr	r0, [r4, #0]
 8005510:	1809      	adds	r1, r1, r0
 8005512:	1858      	adds	r0, r3, r1
 8005514:	6019      	str	r1, [r3, #0]
 8005516:	4282      	cmp	r2, r0
 8005518:	d1e0      	bne.n	80054dc <_free_r+0x24>
 800551a:	6810      	ldr	r0, [r2, #0]
 800551c:	6852      	ldr	r2, [r2, #4]
 800551e:	1841      	adds	r1, r0, r1
 8005520:	6019      	str	r1, [r3, #0]
 8005522:	605a      	str	r2, [r3, #4]
 8005524:	e7da      	b.n	80054dc <_free_r+0x24>
 8005526:	42a0      	cmp	r0, r4
 8005528:	d902      	bls.n	8005530 <_free_r+0x78>
 800552a:	230c      	movs	r3, #12
 800552c:	602b      	str	r3, [r5, #0]
 800552e:	e7d5      	b.n	80054dc <_free_r+0x24>
 8005530:	6821      	ldr	r1, [r4, #0]
 8005532:	1860      	adds	r0, r4, r1
 8005534:	4282      	cmp	r2, r0
 8005536:	d103      	bne.n	8005540 <_free_r+0x88>
 8005538:	6810      	ldr	r0, [r2, #0]
 800553a:	6852      	ldr	r2, [r2, #4]
 800553c:	1841      	adds	r1, r0, r1
 800553e:	6021      	str	r1, [r4, #0]
 8005540:	6062      	str	r2, [r4, #4]
 8005542:	605c      	str	r4, [r3, #4]
 8005544:	e7ca      	b.n	80054dc <_free_r+0x24>
 8005546:	46c0      	nop			; (mov r8, r8)
 8005548:	20000488 	.word	0x20000488

0800554c <_malloc_r>:
 800554c:	2303      	movs	r3, #3
 800554e:	b570      	push	{r4, r5, r6, lr}
 8005550:	1ccd      	adds	r5, r1, #3
 8005552:	439d      	bics	r5, r3
 8005554:	3508      	adds	r5, #8
 8005556:	0006      	movs	r6, r0
 8005558:	2d0c      	cmp	r5, #12
 800555a:	d21e      	bcs.n	800559a <_malloc_r+0x4e>
 800555c:	250c      	movs	r5, #12
 800555e:	42a9      	cmp	r1, r5
 8005560:	d81d      	bhi.n	800559e <_malloc_r+0x52>
 8005562:	0030      	movs	r0, r6
 8005564:	f000 f8b2 	bl	80056cc <__malloc_lock>
 8005568:	4a25      	ldr	r2, [pc, #148]	; (8005600 <_malloc_r+0xb4>)
 800556a:	6814      	ldr	r4, [r2, #0]
 800556c:	0021      	movs	r1, r4
 800556e:	2900      	cmp	r1, #0
 8005570:	d119      	bne.n	80055a6 <_malloc_r+0x5a>
 8005572:	4c24      	ldr	r4, [pc, #144]	; (8005604 <_malloc_r+0xb8>)
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d103      	bne.n	8005582 <_malloc_r+0x36>
 800557a:	0030      	movs	r0, r6
 800557c:	f000 f844 	bl	8005608 <_sbrk_r>
 8005580:	6020      	str	r0, [r4, #0]
 8005582:	0029      	movs	r1, r5
 8005584:	0030      	movs	r0, r6
 8005586:	f000 f83f 	bl	8005608 <_sbrk_r>
 800558a:	1c43      	adds	r3, r0, #1
 800558c:	d12c      	bne.n	80055e8 <_malloc_r+0x9c>
 800558e:	230c      	movs	r3, #12
 8005590:	0030      	movs	r0, r6
 8005592:	6033      	str	r3, [r6, #0]
 8005594:	f000 f89b 	bl	80056ce <__malloc_unlock>
 8005598:	e003      	b.n	80055a2 <_malloc_r+0x56>
 800559a:	2d00      	cmp	r5, #0
 800559c:	dadf      	bge.n	800555e <_malloc_r+0x12>
 800559e:	230c      	movs	r3, #12
 80055a0:	6033      	str	r3, [r6, #0]
 80055a2:	2000      	movs	r0, #0
 80055a4:	bd70      	pop	{r4, r5, r6, pc}
 80055a6:	680b      	ldr	r3, [r1, #0]
 80055a8:	1b5b      	subs	r3, r3, r5
 80055aa:	d41a      	bmi.n	80055e2 <_malloc_r+0x96>
 80055ac:	2b0b      	cmp	r3, #11
 80055ae:	d903      	bls.n	80055b8 <_malloc_r+0x6c>
 80055b0:	600b      	str	r3, [r1, #0]
 80055b2:	18cc      	adds	r4, r1, r3
 80055b4:	6025      	str	r5, [r4, #0]
 80055b6:	e003      	b.n	80055c0 <_malloc_r+0x74>
 80055b8:	428c      	cmp	r4, r1
 80055ba:	d10e      	bne.n	80055da <_malloc_r+0x8e>
 80055bc:	6863      	ldr	r3, [r4, #4]
 80055be:	6013      	str	r3, [r2, #0]
 80055c0:	0030      	movs	r0, r6
 80055c2:	f000 f884 	bl	80056ce <__malloc_unlock>
 80055c6:	0020      	movs	r0, r4
 80055c8:	2207      	movs	r2, #7
 80055ca:	300b      	adds	r0, #11
 80055cc:	1d23      	adds	r3, r4, #4
 80055ce:	4390      	bics	r0, r2
 80055d0:	1ac3      	subs	r3, r0, r3
 80055d2:	d0e7      	beq.n	80055a4 <_malloc_r+0x58>
 80055d4:	425a      	negs	r2, r3
 80055d6:	50e2      	str	r2, [r4, r3]
 80055d8:	e7e4      	b.n	80055a4 <_malloc_r+0x58>
 80055da:	684b      	ldr	r3, [r1, #4]
 80055dc:	6063      	str	r3, [r4, #4]
 80055de:	000c      	movs	r4, r1
 80055e0:	e7ee      	b.n	80055c0 <_malloc_r+0x74>
 80055e2:	000c      	movs	r4, r1
 80055e4:	6849      	ldr	r1, [r1, #4]
 80055e6:	e7c2      	b.n	800556e <_malloc_r+0x22>
 80055e8:	2303      	movs	r3, #3
 80055ea:	1cc4      	adds	r4, r0, #3
 80055ec:	439c      	bics	r4, r3
 80055ee:	42a0      	cmp	r0, r4
 80055f0:	d0e0      	beq.n	80055b4 <_malloc_r+0x68>
 80055f2:	1a21      	subs	r1, r4, r0
 80055f4:	0030      	movs	r0, r6
 80055f6:	f000 f807 	bl	8005608 <_sbrk_r>
 80055fa:	1c43      	adds	r3, r0, #1
 80055fc:	d1da      	bne.n	80055b4 <_malloc_r+0x68>
 80055fe:	e7c6      	b.n	800558e <_malloc_r+0x42>
 8005600:	20000488 	.word	0x20000488
 8005604:	2000048c 	.word	0x2000048c

08005608 <_sbrk_r>:
 8005608:	2300      	movs	r3, #0
 800560a:	b570      	push	{r4, r5, r6, lr}
 800560c:	4c06      	ldr	r4, [pc, #24]	; (8005628 <_sbrk_r+0x20>)
 800560e:	0005      	movs	r5, r0
 8005610:	0008      	movs	r0, r1
 8005612:	6023      	str	r3, [r4, #0]
 8005614:	f000 fb96 	bl	8005d44 <_sbrk>
 8005618:	1c43      	adds	r3, r0, #1
 800561a:	d103      	bne.n	8005624 <_sbrk_r+0x1c>
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d000      	beq.n	8005624 <_sbrk_r+0x1c>
 8005622:	602b      	str	r3, [r5, #0]
 8005624:	bd70      	pop	{r4, r5, r6, pc}
 8005626:	46c0      	nop			; (mov r8, r8)
 8005628:	20000664 	.word	0x20000664

0800562c <siprintf>:
 800562c:	b40e      	push	{r1, r2, r3}
 800562e:	b510      	push	{r4, lr}
 8005630:	b09d      	sub	sp, #116	; 0x74
 8005632:	a902      	add	r1, sp, #8
 8005634:	9002      	str	r0, [sp, #8]
 8005636:	6108      	str	r0, [r1, #16]
 8005638:	480b      	ldr	r0, [pc, #44]	; (8005668 <siprintf+0x3c>)
 800563a:	2482      	movs	r4, #130	; 0x82
 800563c:	6088      	str	r0, [r1, #8]
 800563e:	6148      	str	r0, [r1, #20]
 8005640:	2001      	movs	r0, #1
 8005642:	4240      	negs	r0, r0
 8005644:	ab1f      	add	r3, sp, #124	; 0x7c
 8005646:	81c8      	strh	r0, [r1, #14]
 8005648:	4808      	ldr	r0, [pc, #32]	; (800566c <siprintf+0x40>)
 800564a:	cb04      	ldmia	r3!, {r2}
 800564c:	00a4      	lsls	r4, r4, #2
 800564e:	6800      	ldr	r0, [r0, #0]
 8005650:	9301      	str	r3, [sp, #4]
 8005652:	818c      	strh	r4, [r1, #12]
 8005654:	f000 f89e 	bl	8005794 <_svfiprintf_r>
 8005658:	2300      	movs	r3, #0
 800565a:	9a02      	ldr	r2, [sp, #8]
 800565c:	7013      	strb	r3, [r2, #0]
 800565e:	b01d      	add	sp, #116	; 0x74
 8005660:	bc10      	pop	{r4}
 8005662:	bc08      	pop	{r3}
 8005664:	b003      	add	sp, #12
 8005666:	4718      	bx	r3
 8005668:	7fffffff 	.word	0x7fffffff
 800566c:	20000070 	.word	0x20000070

08005670 <strcpy>:
 8005670:	1c03      	adds	r3, r0, #0
 8005672:	780a      	ldrb	r2, [r1, #0]
 8005674:	3101      	adds	r1, #1
 8005676:	701a      	strb	r2, [r3, #0]
 8005678:	3301      	adds	r3, #1
 800567a:	2a00      	cmp	r2, #0
 800567c:	d1f9      	bne.n	8005672 <strcpy+0x2>
 800567e:	4770      	bx	lr

08005680 <strncmp>:
 8005680:	2300      	movs	r3, #0
 8005682:	b530      	push	{r4, r5, lr}
 8005684:	429a      	cmp	r2, r3
 8005686:	d00a      	beq.n	800569e <strncmp+0x1e>
 8005688:	3a01      	subs	r2, #1
 800568a:	5cc4      	ldrb	r4, [r0, r3]
 800568c:	5ccd      	ldrb	r5, [r1, r3]
 800568e:	42ac      	cmp	r4, r5
 8005690:	d104      	bne.n	800569c <strncmp+0x1c>
 8005692:	429a      	cmp	r2, r3
 8005694:	d002      	beq.n	800569c <strncmp+0x1c>
 8005696:	3301      	adds	r3, #1
 8005698:	2c00      	cmp	r4, #0
 800569a:	d1f6      	bne.n	800568a <strncmp+0xa>
 800569c:	1b63      	subs	r3, r4, r5
 800569e:	0018      	movs	r0, r3
 80056a0:	bd30      	pop	{r4, r5, pc}

080056a2 <strncpy>:
 80056a2:	b570      	push	{r4, r5, r6, lr}
 80056a4:	0004      	movs	r4, r0
 80056a6:	2a00      	cmp	r2, #0
 80056a8:	d100      	bne.n	80056ac <strncpy+0xa>
 80056aa:	bd70      	pop	{r4, r5, r6, pc}
 80056ac:	780d      	ldrb	r5, [r1, #0]
 80056ae:	1e56      	subs	r6, r2, #1
 80056b0:	1c63      	adds	r3, r4, #1
 80056b2:	7025      	strb	r5, [r4, #0]
 80056b4:	3101      	adds	r1, #1
 80056b6:	2d00      	cmp	r5, #0
 80056b8:	d105      	bne.n	80056c6 <strncpy+0x24>
 80056ba:	18a4      	adds	r4, r4, r2
 80056bc:	429c      	cmp	r4, r3
 80056be:	d0f4      	beq.n	80056aa <strncpy+0x8>
 80056c0:	701d      	strb	r5, [r3, #0]
 80056c2:	3301      	adds	r3, #1
 80056c4:	e7fa      	b.n	80056bc <strncpy+0x1a>
 80056c6:	001c      	movs	r4, r3
 80056c8:	0032      	movs	r2, r6
 80056ca:	e7ec      	b.n	80056a6 <strncpy+0x4>

080056cc <__malloc_lock>:
 80056cc:	4770      	bx	lr

080056ce <__malloc_unlock>:
 80056ce:	4770      	bx	lr

080056d0 <__ssputs_r>:
 80056d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056d2:	688e      	ldr	r6, [r1, #8]
 80056d4:	b085      	sub	sp, #20
 80056d6:	0007      	movs	r7, r0
 80056d8:	000c      	movs	r4, r1
 80056da:	9203      	str	r2, [sp, #12]
 80056dc:	9301      	str	r3, [sp, #4]
 80056de:	429e      	cmp	r6, r3
 80056e0:	d839      	bhi.n	8005756 <__ssputs_r+0x86>
 80056e2:	2390      	movs	r3, #144	; 0x90
 80056e4:	898a      	ldrh	r2, [r1, #12]
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	421a      	tst	r2, r3
 80056ea:	d034      	beq.n	8005756 <__ssputs_r+0x86>
 80056ec:	2503      	movs	r5, #3
 80056ee:	6909      	ldr	r1, [r1, #16]
 80056f0:	6823      	ldr	r3, [r4, #0]
 80056f2:	1a5b      	subs	r3, r3, r1
 80056f4:	9302      	str	r3, [sp, #8]
 80056f6:	6963      	ldr	r3, [r4, #20]
 80056f8:	9802      	ldr	r0, [sp, #8]
 80056fa:	435d      	muls	r5, r3
 80056fc:	0feb      	lsrs	r3, r5, #31
 80056fe:	195d      	adds	r5, r3, r5
 8005700:	9b01      	ldr	r3, [sp, #4]
 8005702:	106d      	asrs	r5, r5, #1
 8005704:	3301      	adds	r3, #1
 8005706:	181b      	adds	r3, r3, r0
 8005708:	42ab      	cmp	r3, r5
 800570a:	d900      	bls.n	800570e <__ssputs_r+0x3e>
 800570c:	001d      	movs	r5, r3
 800570e:	0553      	lsls	r3, r2, #21
 8005710:	d532      	bpl.n	8005778 <__ssputs_r+0xa8>
 8005712:	0029      	movs	r1, r5
 8005714:	0038      	movs	r0, r7
 8005716:	f7ff ff19 	bl	800554c <_malloc_r>
 800571a:	1e06      	subs	r6, r0, #0
 800571c:	d109      	bne.n	8005732 <__ssputs_r+0x62>
 800571e:	230c      	movs	r3, #12
 8005720:	603b      	str	r3, [r7, #0]
 8005722:	2340      	movs	r3, #64	; 0x40
 8005724:	2001      	movs	r0, #1
 8005726:	89a2      	ldrh	r2, [r4, #12]
 8005728:	4240      	negs	r0, r0
 800572a:	4313      	orrs	r3, r2
 800572c:	81a3      	strh	r3, [r4, #12]
 800572e:	b005      	add	sp, #20
 8005730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005732:	9a02      	ldr	r2, [sp, #8]
 8005734:	6921      	ldr	r1, [r4, #16]
 8005736:	f7ff fead 	bl	8005494 <memcpy>
 800573a:	89a3      	ldrh	r3, [r4, #12]
 800573c:	4a14      	ldr	r2, [pc, #80]	; (8005790 <__ssputs_r+0xc0>)
 800573e:	401a      	ands	r2, r3
 8005740:	2380      	movs	r3, #128	; 0x80
 8005742:	4313      	orrs	r3, r2
 8005744:	81a3      	strh	r3, [r4, #12]
 8005746:	9b02      	ldr	r3, [sp, #8]
 8005748:	6126      	str	r6, [r4, #16]
 800574a:	18f6      	adds	r6, r6, r3
 800574c:	6026      	str	r6, [r4, #0]
 800574e:	6165      	str	r5, [r4, #20]
 8005750:	9e01      	ldr	r6, [sp, #4]
 8005752:	1aed      	subs	r5, r5, r3
 8005754:	60a5      	str	r5, [r4, #8]
 8005756:	9b01      	ldr	r3, [sp, #4]
 8005758:	42b3      	cmp	r3, r6
 800575a:	d200      	bcs.n	800575e <__ssputs_r+0x8e>
 800575c:	001e      	movs	r6, r3
 800575e:	0032      	movs	r2, r6
 8005760:	9903      	ldr	r1, [sp, #12]
 8005762:	6820      	ldr	r0, [r4, #0]
 8005764:	f000 faad 	bl	8005cc2 <memmove>
 8005768:	68a3      	ldr	r3, [r4, #8]
 800576a:	2000      	movs	r0, #0
 800576c:	1b9b      	subs	r3, r3, r6
 800576e:	60a3      	str	r3, [r4, #8]
 8005770:	6823      	ldr	r3, [r4, #0]
 8005772:	199e      	adds	r6, r3, r6
 8005774:	6026      	str	r6, [r4, #0]
 8005776:	e7da      	b.n	800572e <__ssputs_r+0x5e>
 8005778:	002a      	movs	r2, r5
 800577a:	0038      	movs	r0, r7
 800577c:	f000 fab3 	bl	8005ce6 <_realloc_r>
 8005780:	1e06      	subs	r6, r0, #0
 8005782:	d1e0      	bne.n	8005746 <__ssputs_r+0x76>
 8005784:	6921      	ldr	r1, [r4, #16]
 8005786:	0038      	movs	r0, r7
 8005788:	f7ff fe96 	bl	80054b8 <_free_r>
 800578c:	e7c7      	b.n	800571e <__ssputs_r+0x4e>
 800578e:	46c0      	nop			; (mov r8, r8)
 8005790:	fffffb7f 	.word	0xfffffb7f

08005794 <_svfiprintf_r>:
 8005794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005796:	b09f      	sub	sp, #124	; 0x7c
 8005798:	9002      	str	r0, [sp, #8]
 800579a:	9305      	str	r3, [sp, #20]
 800579c:	898b      	ldrh	r3, [r1, #12]
 800579e:	000f      	movs	r7, r1
 80057a0:	0016      	movs	r6, r2
 80057a2:	061b      	lsls	r3, r3, #24
 80057a4:	d511      	bpl.n	80057ca <_svfiprintf_r+0x36>
 80057a6:	690b      	ldr	r3, [r1, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10e      	bne.n	80057ca <_svfiprintf_r+0x36>
 80057ac:	2140      	movs	r1, #64	; 0x40
 80057ae:	f7ff fecd 	bl	800554c <_malloc_r>
 80057b2:	6038      	str	r0, [r7, #0]
 80057b4:	6138      	str	r0, [r7, #16]
 80057b6:	2800      	cmp	r0, #0
 80057b8:	d105      	bne.n	80057c6 <_svfiprintf_r+0x32>
 80057ba:	230c      	movs	r3, #12
 80057bc:	9a02      	ldr	r2, [sp, #8]
 80057be:	3801      	subs	r0, #1
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	b01f      	add	sp, #124	; 0x7c
 80057c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057c6:	2340      	movs	r3, #64	; 0x40
 80057c8:	617b      	str	r3, [r7, #20]
 80057ca:	2300      	movs	r3, #0
 80057cc:	ad06      	add	r5, sp, #24
 80057ce:	616b      	str	r3, [r5, #20]
 80057d0:	3320      	adds	r3, #32
 80057d2:	766b      	strb	r3, [r5, #25]
 80057d4:	3310      	adds	r3, #16
 80057d6:	76ab      	strb	r3, [r5, #26]
 80057d8:	0034      	movs	r4, r6
 80057da:	7823      	ldrb	r3, [r4, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d147      	bne.n	8005870 <_svfiprintf_r+0xdc>
 80057e0:	1ba3      	subs	r3, r4, r6
 80057e2:	9304      	str	r3, [sp, #16]
 80057e4:	d00d      	beq.n	8005802 <_svfiprintf_r+0x6e>
 80057e6:	1ba3      	subs	r3, r4, r6
 80057e8:	0032      	movs	r2, r6
 80057ea:	0039      	movs	r1, r7
 80057ec:	9802      	ldr	r0, [sp, #8]
 80057ee:	f7ff ff6f 	bl	80056d0 <__ssputs_r>
 80057f2:	1c43      	adds	r3, r0, #1
 80057f4:	d100      	bne.n	80057f8 <_svfiprintf_r+0x64>
 80057f6:	e0b5      	b.n	8005964 <_svfiprintf_r+0x1d0>
 80057f8:	696a      	ldr	r2, [r5, #20]
 80057fa:	9b04      	ldr	r3, [sp, #16]
 80057fc:	4694      	mov	ip, r2
 80057fe:	4463      	add	r3, ip
 8005800:	616b      	str	r3, [r5, #20]
 8005802:	7823      	ldrb	r3, [r4, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d100      	bne.n	800580a <_svfiprintf_r+0x76>
 8005808:	e0ac      	b.n	8005964 <_svfiprintf_r+0x1d0>
 800580a:	2201      	movs	r2, #1
 800580c:	2300      	movs	r3, #0
 800580e:	4252      	negs	r2, r2
 8005810:	606a      	str	r2, [r5, #4]
 8005812:	a902      	add	r1, sp, #8
 8005814:	3254      	adds	r2, #84	; 0x54
 8005816:	1852      	adds	r2, r2, r1
 8005818:	3401      	adds	r4, #1
 800581a:	602b      	str	r3, [r5, #0]
 800581c:	60eb      	str	r3, [r5, #12]
 800581e:	60ab      	str	r3, [r5, #8]
 8005820:	7013      	strb	r3, [r2, #0]
 8005822:	65ab      	str	r3, [r5, #88]	; 0x58
 8005824:	4e58      	ldr	r6, [pc, #352]	; (8005988 <_svfiprintf_r+0x1f4>)
 8005826:	2205      	movs	r2, #5
 8005828:	7821      	ldrb	r1, [r4, #0]
 800582a:	0030      	movs	r0, r6
 800582c:	f000 fa3e 	bl	8005cac <memchr>
 8005830:	1c62      	adds	r2, r4, #1
 8005832:	2800      	cmp	r0, #0
 8005834:	d120      	bne.n	8005878 <_svfiprintf_r+0xe4>
 8005836:	6829      	ldr	r1, [r5, #0]
 8005838:	06cb      	lsls	r3, r1, #27
 800583a:	d504      	bpl.n	8005846 <_svfiprintf_r+0xb2>
 800583c:	2353      	movs	r3, #83	; 0x53
 800583e:	ae02      	add	r6, sp, #8
 8005840:	3020      	adds	r0, #32
 8005842:	199b      	adds	r3, r3, r6
 8005844:	7018      	strb	r0, [r3, #0]
 8005846:	070b      	lsls	r3, r1, #28
 8005848:	d504      	bpl.n	8005854 <_svfiprintf_r+0xc0>
 800584a:	2353      	movs	r3, #83	; 0x53
 800584c:	202b      	movs	r0, #43	; 0x2b
 800584e:	ae02      	add	r6, sp, #8
 8005850:	199b      	adds	r3, r3, r6
 8005852:	7018      	strb	r0, [r3, #0]
 8005854:	7823      	ldrb	r3, [r4, #0]
 8005856:	2b2a      	cmp	r3, #42	; 0x2a
 8005858:	d016      	beq.n	8005888 <_svfiprintf_r+0xf4>
 800585a:	2000      	movs	r0, #0
 800585c:	210a      	movs	r1, #10
 800585e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005860:	7822      	ldrb	r2, [r4, #0]
 8005862:	3a30      	subs	r2, #48	; 0x30
 8005864:	2a09      	cmp	r2, #9
 8005866:	d955      	bls.n	8005914 <_svfiprintf_r+0x180>
 8005868:	2800      	cmp	r0, #0
 800586a:	d015      	beq.n	8005898 <_svfiprintf_r+0x104>
 800586c:	9309      	str	r3, [sp, #36]	; 0x24
 800586e:	e013      	b.n	8005898 <_svfiprintf_r+0x104>
 8005870:	2b25      	cmp	r3, #37	; 0x25
 8005872:	d0b5      	beq.n	80057e0 <_svfiprintf_r+0x4c>
 8005874:	3401      	adds	r4, #1
 8005876:	e7b0      	b.n	80057da <_svfiprintf_r+0x46>
 8005878:	2301      	movs	r3, #1
 800587a:	1b80      	subs	r0, r0, r6
 800587c:	4083      	lsls	r3, r0
 800587e:	6829      	ldr	r1, [r5, #0]
 8005880:	0014      	movs	r4, r2
 8005882:	430b      	orrs	r3, r1
 8005884:	602b      	str	r3, [r5, #0]
 8005886:	e7cd      	b.n	8005824 <_svfiprintf_r+0x90>
 8005888:	9b05      	ldr	r3, [sp, #20]
 800588a:	1d18      	adds	r0, r3, #4
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	9005      	str	r0, [sp, #20]
 8005890:	2b00      	cmp	r3, #0
 8005892:	db39      	blt.n	8005908 <_svfiprintf_r+0x174>
 8005894:	9309      	str	r3, [sp, #36]	; 0x24
 8005896:	0014      	movs	r4, r2
 8005898:	7823      	ldrb	r3, [r4, #0]
 800589a:	2b2e      	cmp	r3, #46	; 0x2e
 800589c:	d10b      	bne.n	80058b6 <_svfiprintf_r+0x122>
 800589e:	7863      	ldrb	r3, [r4, #1]
 80058a0:	1c62      	adds	r2, r4, #1
 80058a2:	2b2a      	cmp	r3, #42	; 0x2a
 80058a4:	d13e      	bne.n	8005924 <_svfiprintf_r+0x190>
 80058a6:	9b05      	ldr	r3, [sp, #20]
 80058a8:	3402      	adds	r4, #2
 80058aa:	1d1a      	adds	r2, r3, #4
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	9205      	str	r2, [sp, #20]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	db34      	blt.n	800591e <_svfiprintf_r+0x18a>
 80058b4:	9307      	str	r3, [sp, #28]
 80058b6:	4e35      	ldr	r6, [pc, #212]	; (800598c <_svfiprintf_r+0x1f8>)
 80058b8:	7821      	ldrb	r1, [r4, #0]
 80058ba:	2203      	movs	r2, #3
 80058bc:	0030      	movs	r0, r6
 80058be:	f000 f9f5 	bl	8005cac <memchr>
 80058c2:	2800      	cmp	r0, #0
 80058c4:	d006      	beq.n	80058d4 <_svfiprintf_r+0x140>
 80058c6:	2340      	movs	r3, #64	; 0x40
 80058c8:	1b80      	subs	r0, r0, r6
 80058ca:	4083      	lsls	r3, r0
 80058cc:	682a      	ldr	r2, [r5, #0]
 80058ce:	3401      	adds	r4, #1
 80058d0:	4313      	orrs	r3, r2
 80058d2:	602b      	str	r3, [r5, #0]
 80058d4:	7821      	ldrb	r1, [r4, #0]
 80058d6:	2206      	movs	r2, #6
 80058d8:	482d      	ldr	r0, [pc, #180]	; (8005990 <_svfiprintf_r+0x1fc>)
 80058da:	1c66      	adds	r6, r4, #1
 80058dc:	7629      	strb	r1, [r5, #24]
 80058de:	f000 f9e5 	bl	8005cac <memchr>
 80058e2:	2800      	cmp	r0, #0
 80058e4:	d046      	beq.n	8005974 <_svfiprintf_r+0x1e0>
 80058e6:	4b2b      	ldr	r3, [pc, #172]	; (8005994 <_svfiprintf_r+0x200>)
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d12f      	bne.n	800594c <_svfiprintf_r+0x1b8>
 80058ec:	6829      	ldr	r1, [r5, #0]
 80058ee:	9b05      	ldr	r3, [sp, #20]
 80058f0:	2207      	movs	r2, #7
 80058f2:	05c9      	lsls	r1, r1, #23
 80058f4:	d528      	bpl.n	8005948 <_svfiprintf_r+0x1b4>
 80058f6:	189b      	adds	r3, r3, r2
 80058f8:	4393      	bics	r3, r2
 80058fa:	3308      	adds	r3, #8
 80058fc:	9305      	str	r3, [sp, #20]
 80058fe:	696b      	ldr	r3, [r5, #20]
 8005900:	9a03      	ldr	r2, [sp, #12]
 8005902:	189b      	adds	r3, r3, r2
 8005904:	616b      	str	r3, [r5, #20]
 8005906:	e767      	b.n	80057d8 <_svfiprintf_r+0x44>
 8005908:	425b      	negs	r3, r3
 800590a:	60eb      	str	r3, [r5, #12]
 800590c:	2302      	movs	r3, #2
 800590e:	430b      	orrs	r3, r1
 8005910:	602b      	str	r3, [r5, #0]
 8005912:	e7c0      	b.n	8005896 <_svfiprintf_r+0x102>
 8005914:	434b      	muls	r3, r1
 8005916:	3401      	adds	r4, #1
 8005918:	189b      	adds	r3, r3, r2
 800591a:	2001      	movs	r0, #1
 800591c:	e7a0      	b.n	8005860 <_svfiprintf_r+0xcc>
 800591e:	2301      	movs	r3, #1
 8005920:	425b      	negs	r3, r3
 8005922:	e7c7      	b.n	80058b4 <_svfiprintf_r+0x120>
 8005924:	2300      	movs	r3, #0
 8005926:	0014      	movs	r4, r2
 8005928:	200a      	movs	r0, #10
 800592a:	001a      	movs	r2, r3
 800592c:	606b      	str	r3, [r5, #4]
 800592e:	7821      	ldrb	r1, [r4, #0]
 8005930:	3930      	subs	r1, #48	; 0x30
 8005932:	2909      	cmp	r1, #9
 8005934:	d903      	bls.n	800593e <_svfiprintf_r+0x1aa>
 8005936:	2b00      	cmp	r3, #0
 8005938:	d0bd      	beq.n	80058b6 <_svfiprintf_r+0x122>
 800593a:	9207      	str	r2, [sp, #28]
 800593c:	e7bb      	b.n	80058b6 <_svfiprintf_r+0x122>
 800593e:	4342      	muls	r2, r0
 8005940:	3401      	adds	r4, #1
 8005942:	1852      	adds	r2, r2, r1
 8005944:	2301      	movs	r3, #1
 8005946:	e7f2      	b.n	800592e <_svfiprintf_r+0x19a>
 8005948:	3307      	adds	r3, #7
 800594a:	e7d5      	b.n	80058f8 <_svfiprintf_r+0x164>
 800594c:	ab05      	add	r3, sp, #20
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	003a      	movs	r2, r7
 8005952:	4b11      	ldr	r3, [pc, #68]	; (8005998 <_svfiprintf_r+0x204>)
 8005954:	0029      	movs	r1, r5
 8005956:	9802      	ldr	r0, [sp, #8]
 8005958:	e000      	b.n	800595c <_svfiprintf_r+0x1c8>
 800595a:	bf00      	nop
 800595c:	9003      	str	r0, [sp, #12]
 800595e:	9b03      	ldr	r3, [sp, #12]
 8005960:	3301      	adds	r3, #1
 8005962:	d1cc      	bne.n	80058fe <_svfiprintf_r+0x16a>
 8005964:	89bb      	ldrh	r3, [r7, #12]
 8005966:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005968:	065b      	lsls	r3, r3, #25
 800596a:	d400      	bmi.n	800596e <_svfiprintf_r+0x1da>
 800596c:	e729      	b.n	80057c2 <_svfiprintf_r+0x2e>
 800596e:	2001      	movs	r0, #1
 8005970:	4240      	negs	r0, r0
 8005972:	e726      	b.n	80057c2 <_svfiprintf_r+0x2e>
 8005974:	ab05      	add	r3, sp, #20
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	003a      	movs	r2, r7
 800597a:	4b07      	ldr	r3, [pc, #28]	; (8005998 <_svfiprintf_r+0x204>)
 800597c:	0029      	movs	r1, r5
 800597e:	9802      	ldr	r0, [sp, #8]
 8005980:	f000 f87a 	bl	8005a78 <_printf_i>
 8005984:	e7ea      	b.n	800595c <_svfiprintf_r+0x1c8>
 8005986:	46c0      	nop			; (mov r8, r8)
 8005988:	08007060 	.word	0x08007060
 800598c:	08007066 	.word	0x08007066
 8005990:	0800706a 	.word	0x0800706a
 8005994:	00000000 	.word	0x00000000
 8005998:	080056d1 	.word	0x080056d1

0800599c <_printf_common>:
 800599c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800599e:	0015      	movs	r5, r2
 80059a0:	9301      	str	r3, [sp, #4]
 80059a2:	688a      	ldr	r2, [r1, #8]
 80059a4:	690b      	ldr	r3, [r1, #16]
 80059a6:	9000      	str	r0, [sp, #0]
 80059a8:	000c      	movs	r4, r1
 80059aa:	4293      	cmp	r3, r2
 80059ac:	da00      	bge.n	80059b0 <_printf_common+0x14>
 80059ae:	0013      	movs	r3, r2
 80059b0:	0022      	movs	r2, r4
 80059b2:	602b      	str	r3, [r5, #0]
 80059b4:	3243      	adds	r2, #67	; 0x43
 80059b6:	7812      	ldrb	r2, [r2, #0]
 80059b8:	2a00      	cmp	r2, #0
 80059ba:	d001      	beq.n	80059c0 <_printf_common+0x24>
 80059bc:	3301      	adds	r3, #1
 80059be:	602b      	str	r3, [r5, #0]
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	069b      	lsls	r3, r3, #26
 80059c4:	d502      	bpl.n	80059cc <_printf_common+0x30>
 80059c6:	682b      	ldr	r3, [r5, #0]
 80059c8:	3302      	adds	r3, #2
 80059ca:	602b      	str	r3, [r5, #0]
 80059cc:	2706      	movs	r7, #6
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	401f      	ands	r7, r3
 80059d2:	d027      	beq.n	8005a24 <_printf_common+0x88>
 80059d4:	0023      	movs	r3, r4
 80059d6:	3343      	adds	r3, #67	; 0x43
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	1e5a      	subs	r2, r3, #1
 80059dc:	4193      	sbcs	r3, r2
 80059de:	6822      	ldr	r2, [r4, #0]
 80059e0:	0692      	lsls	r2, r2, #26
 80059e2:	d430      	bmi.n	8005a46 <_printf_common+0xaa>
 80059e4:	0022      	movs	r2, r4
 80059e6:	9901      	ldr	r1, [sp, #4]
 80059e8:	3243      	adds	r2, #67	; 0x43
 80059ea:	9800      	ldr	r0, [sp, #0]
 80059ec:	9e08      	ldr	r6, [sp, #32]
 80059ee:	47b0      	blx	r6
 80059f0:	1c43      	adds	r3, r0, #1
 80059f2:	d025      	beq.n	8005a40 <_printf_common+0xa4>
 80059f4:	2306      	movs	r3, #6
 80059f6:	6820      	ldr	r0, [r4, #0]
 80059f8:	682a      	ldr	r2, [r5, #0]
 80059fa:	68e1      	ldr	r1, [r4, #12]
 80059fc:	4003      	ands	r3, r0
 80059fe:	2500      	movs	r5, #0
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d103      	bne.n	8005a0c <_printf_common+0x70>
 8005a04:	1a8d      	subs	r5, r1, r2
 8005a06:	43eb      	mvns	r3, r5
 8005a08:	17db      	asrs	r3, r3, #31
 8005a0a:	401d      	ands	r5, r3
 8005a0c:	68a3      	ldr	r3, [r4, #8]
 8005a0e:	6922      	ldr	r2, [r4, #16]
 8005a10:	4293      	cmp	r3, r2
 8005a12:	dd01      	ble.n	8005a18 <_printf_common+0x7c>
 8005a14:	1a9b      	subs	r3, r3, r2
 8005a16:	18ed      	adds	r5, r5, r3
 8005a18:	2700      	movs	r7, #0
 8005a1a:	42bd      	cmp	r5, r7
 8005a1c:	d120      	bne.n	8005a60 <_printf_common+0xc4>
 8005a1e:	2000      	movs	r0, #0
 8005a20:	e010      	b.n	8005a44 <_printf_common+0xa8>
 8005a22:	3701      	adds	r7, #1
 8005a24:	68e3      	ldr	r3, [r4, #12]
 8005a26:	682a      	ldr	r2, [r5, #0]
 8005a28:	1a9b      	subs	r3, r3, r2
 8005a2a:	429f      	cmp	r7, r3
 8005a2c:	dad2      	bge.n	80059d4 <_printf_common+0x38>
 8005a2e:	0022      	movs	r2, r4
 8005a30:	2301      	movs	r3, #1
 8005a32:	3219      	adds	r2, #25
 8005a34:	9901      	ldr	r1, [sp, #4]
 8005a36:	9800      	ldr	r0, [sp, #0]
 8005a38:	9e08      	ldr	r6, [sp, #32]
 8005a3a:	47b0      	blx	r6
 8005a3c:	1c43      	adds	r3, r0, #1
 8005a3e:	d1f0      	bne.n	8005a22 <_printf_common+0x86>
 8005a40:	2001      	movs	r0, #1
 8005a42:	4240      	negs	r0, r0
 8005a44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a46:	2030      	movs	r0, #48	; 0x30
 8005a48:	18e1      	adds	r1, r4, r3
 8005a4a:	3143      	adds	r1, #67	; 0x43
 8005a4c:	7008      	strb	r0, [r1, #0]
 8005a4e:	0021      	movs	r1, r4
 8005a50:	1c5a      	adds	r2, r3, #1
 8005a52:	3145      	adds	r1, #69	; 0x45
 8005a54:	7809      	ldrb	r1, [r1, #0]
 8005a56:	18a2      	adds	r2, r4, r2
 8005a58:	3243      	adds	r2, #67	; 0x43
 8005a5a:	3302      	adds	r3, #2
 8005a5c:	7011      	strb	r1, [r2, #0]
 8005a5e:	e7c1      	b.n	80059e4 <_printf_common+0x48>
 8005a60:	0022      	movs	r2, r4
 8005a62:	2301      	movs	r3, #1
 8005a64:	321a      	adds	r2, #26
 8005a66:	9901      	ldr	r1, [sp, #4]
 8005a68:	9800      	ldr	r0, [sp, #0]
 8005a6a:	9e08      	ldr	r6, [sp, #32]
 8005a6c:	47b0      	blx	r6
 8005a6e:	1c43      	adds	r3, r0, #1
 8005a70:	d0e6      	beq.n	8005a40 <_printf_common+0xa4>
 8005a72:	3701      	adds	r7, #1
 8005a74:	e7d1      	b.n	8005a1a <_printf_common+0x7e>
	...

08005a78 <_printf_i>:
 8005a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a7a:	b08b      	sub	sp, #44	; 0x2c
 8005a7c:	9206      	str	r2, [sp, #24]
 8005a7e:	000a      	movs	r2, r1
 8005a80:	3243      	adds	r2, #67	; 0x43
 8005a82:	9307      	str	r3, [sp, #28]
 8005a84:	9005      	str	r0, [sp, #20]
 8005a86:	9204      	str	r2, [sp, #16]
 8005a88:	7e0a      	ldrb	r2, [r1, #24]
 8005a8a:	000c      	movs	r4, r1
 8005a8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a8e:	2a6e      	cmp	r2, #110	; 0x6e
 8005a90:	d100      	bne.n	8005a94 <_printf_i+0x1c>
 8005a92:	e08f      	b.n	8005bb4 <_printf_i+0x13c>
 8005a94:	d817      	bhi.n	8005ac6 <_printf_i+0x4e>
 8005a96:	2a63      	cmp	r2, #99	; 0x63
 8005a98:	d02c      	beq.n	8005af4 <_printf_i+0x7c>
 8005a9a:	d808      	bhi.n	8005aae <_printf_i+0x36>
 8005a9c:	2a00      	cmp	r2, #0
 8005a9e:	d100      	bne.n	8005aa2 <_printf_i+0x2a>
 8005aa0:	e099      	b.n	8005bd6 <_printf_i+0x15e>
 8005aa2:	2a58      	cmp	r2, #88	; 0x58
 8005aa4:	d054      	beq.n	8005b50 <_printf_i+0xd8>
 8005aa6:	0026      	movs	r6, r4
 8005aa8:	3642      	adds	r6, #66	; 0x42
 8005aaa:	7032      	strb	r2, [r6, #0]
 8005aac:	e029      	b.n	8005b02 <_printf_i+0x8a>
 8005aae:	2a64      	cmp	r2, #100	; 0x64
 8005ab0:	d001      	beq.n	8005ab6 <_printf_i+0x3e>
 8005ab2:	2a69      	cmp	r2, #105	; 0x69
 8005ab4:	d1f7      	bne.n	8005aa6 <_printf_i+0x2e>
 8005ab6:	6821      	ldr	r1, [r4, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	0608      	lsls	r0, r1, #24
 8005abc:	d523      	bpl.n	8005b06 <_printf_i+0x8e>
 8005abe:	1d11      	adds	r1, r2, #4
 8005ac0:	6019      	str	r1, [r3, #0]
 8005ac2:	6815      	ldr	r5, [r2, #0]
 8005ac4:	e025      	b.n	8005b12 <_printf_i+0x9a>
 8005ac6:	2a73      	cmp	r2, #115	; 0x73
 8005ac8:	d100      	bne.n	8005acc <_printf_i+0x54>
 8005aca:	e088      	b.n	8005bde <_printf_i+0x166>
 8005acc:	d808      	bhi.n	8005ae0 <_printf_i+0x68>
 8005ace:	2a6f      	cmp	r2, #111	; 0x6f
 8005ad0:	d029      	beq.n	8005b26 <_printf_i+0xae>
 8005ad2:	2a70      	cmp	r2, #112	; 0x70
 8005ad4:	d1e7      	bne.n	8005aa6 <_printf_i+0x2e>
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	6809      	ldr	r1, [r1, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	6022      	str	r2, [r4, #0]
 8005ade:	e003      	b.n	8005ae8 <_printf_i+0x70>
 8005ae0:	2a75      	cmp	r2, #117	; 0x75
 8005ae2:	d020      	beq.n	8005b26 <_printf_i+0xae>
 8005ae4:	2a78      	cmp	r2, #120	; 0x78
 8005ae6:	d1de      	bne.n	8005aa6 <_printf_i+0x2e>
 8005ae8:	0022      	movs	r2, r4
 8005aea:	2178      	movs	r1, #120	; 0x78
 8005aec:	3245      	adds	r2, #69	; 0x45
 8005aee:	7011      	strb	r1, [r2, #0]
 8005af0:	4a6c      	ldr	r2, [pc, #432]	; (8005ca4 <_printf_i+0x22c>)
 8005af2:	e030      	b.n	8005b56 <_printf_i+0xde>
 8005af4:	000e      	movs	r6, r1
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	3642      	adds	r6, #66	; 0x42
 8005afa:	1d11      	adds	r1, r2, #4
 8005afc:	6019      	str	r1, [r3, #0]
 8005afe:	6813      	ldr	r3, [r2, #0]
 8005b00:	7033      	strb	r3, [r6, #0]
 8005b02:	2301      	movs	r3, #1
 8005b04:	e079      	b.n	8005bfa <_printf_i+0x182>
 8005b06:	0649      	lsls	r1, r1, #25
 8005b08:	d5d9      	bpl.n	8005abe <_printf_i+0x46>
 8005b0a:	1d11      	adds	r1, r2, #4
 8005b0c:	6019      	str	r1, [r3, #0]
 8005b0e:	2300      	movs	r3, #0
 8005b10:	5ed5      	ldrsh	r5, [r2, r3]
 8005b12:	2d00      	cmp	r5, #0
 8005b14:	da03      	bge.n	8005b1e <_printf_i+0xa6>
 8005b16:	232d      	movs	r3, #45	; 0x2d
 8005b18:	9a04      	ldr	r2, [sp, #16]
 8005b1a:	426d      	negs	r5, r5
 8005b1c:	7013      	strb	r3, [r2, #0]
 8005b1e:	4b62      	ldr	r3, [pc, #392]	; (8005ca8 <_printf_i+0x230>)
 8005b20:	270a      	movs	r7, #10
 8005b22:	9303      	str	r3, [sp, #12]
 8005b24:	e02f      	b.n	8005b86 <_printf_i+0x10e>
 8005b26:	6820      	ldr	r0, [r4, #0]
 8005b28:	6819      	ldr	r1, [r3, #0]
 8005b2a:	0605      	lsls	r5, r0, #24
 8005b2c:	d503      	bpl.n	8005b36 <_printf_i+0xbe>
 8005b2e:	1d08      	adds	r0, r1, #4
 8005b30:	6018      	str	r0, [r3, #0]
 8005b32:	680d      	ldr	r5, [r1, #0]
 8005b34:	e005      	b.n	8005b42 <_printf_i+0xca>
 8005b36:	0640      	lsls	r0, r0, #25
 8005b38:	d5f9      	bpl.n	8005b2e <_printf_i+0xb6>
 8005b3a:	680d      	ldr	r5, [r1, #0]
 8005b3c:	1d08      	adds	r0, r1, #4
 8005b3e:	6018      	str	r0, [r3, #0]
 8005b40:	b2ad      	uxth	r5, r5
 8005b42:	4b59      	ldr	r3, [pc, #356]	; (8005ca8 <_printf_i+0x230>)
 8005b44:	2708      	movs	r7, #8
 8005b46:	9303      	str	r3, [sp, #12]
 8005b48:	2a6f      	cmp	r2, #111	; 0x6f
 8005b4a:	d018      	beq.n	8005b7e <_printf_i+0x106>
 8005b4c:	270a      	movs	r7, #10
 8005b4e:	e016      	b.n	8005b7e <_printf_i+0x106>
 8005b50:	3145      	adds	r1, #69	; 0x45
 8005b52:	700a      	strb	r2, [r1, #0]
 8005b54:	4a54      	ldr	r2, [pc, #336]	; (8005ca8 <_printf_i+0x230>)
 8005b56:	9203      	str	r2, [sp, #12]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	6821      	ldr	r1, [r4, #0]
 8005b5c:	1d10      	adds	r0, r2, #4
 8005b5e:	6018      	str	r0, [r3, #0]
 8005b60:	6815      	ldr	r5, [r2, #0]
 8005b62:	0608      	lsls	r0, r1, #24
 8005b64:	d522      	bpl.n	8005bac <_printf_i+0x134>
 8005b66:	07cb      	lsls	r3, r1, #31
 8005b68:	d502      	bpl.n	8005b70 <_printf_i+0xf8>
 8005b6a:	2320      	movs	r3, #32
 8005b6c:	4319      	orrs	r1, r3
 8005b6e:	6021      	str	r1, [r4, #0]
 8005b70:	2710      	movs	r7, #16
 8005b72:	2d00      	cmp	r5, #0
 8005b74:	d103      	bne.n	8005b7e <_printf_i+0x106>
 8005b76:	2320      	movs	r3, #32
 8005b78:	6822      	ldr	r2, [r4, #0]
 8005b7a:	439a      	bics	r2, r3
 8005b7c:	6022      	str	r2, [r4, #0]
 8005b7e:	0023      	movs	r3, r4
 8005b80:	2200      	movs	r2, #0
 8005b82:	3343      	adds	r3, #67	; 0x43
 8005b84:	701a      	strb	r2, [r3, #0]
 8005b86:	6863      	ldr	r3, [r4, #4]
 8005b88:	60a3      	str	r3, [r4, #8]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	db5c      	blt.n	8005c48 <_printf_i+0x1d0>
 8005b8e:	2204      	movs	r2, #4
 8005b90:	6821      	ldr	r1, [r4, #0]
 8005b92:	4391      	bics	r1, r2
 8005b94:	6021      	str	r1, [r4, #0]
 8005b96:	2d00      	cmp	r5, #0
 8005b98:	d158      	bne.n	8005c4c <_printf_i+0x1d4>
 8005b9a:	9e04      	ldr	r6, [sp, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d064      	beq.n	8005c6a <_printf_i+0x1f2>
 8005ba0:	0026      	movs	r6, r4
 8005ba2:	9b03      	ldr	r3, [sp, #12]
 8005ba4:	3642      	adds	r6, #66	; 0x42
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	7033      	strb	r3, [r6, #0]
 8005baa:	e05e      	b.n	8005c6a <_printf_i+0x1f2>
 8005bac:	0648      	lsls	r0, r1, #25
 8005bae:	d5da      	bpl.n	8005b66 <_printf_i+0xee>
 8005bb0:	b2ad      	uxth	r5, r5
 8005bb2:	e7d8      	b.n	8005b66 <_printf_i+0xee>
 8005bb4:	6809      	ldr	r1, [r1, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	0608      	lsls	r0, r1, #24
 8005bba:	d505      	bpl.n	8005bc8 <_printf_i+0x150>
 8005bbc:	1d11      	adds	r1, r2, #4
 8005bbe:	6019      	str	r1, [r3, #0]
 8005bc0:	6813      	ldr	r3, [r2, #0]
 8005bc2:	6962      	ldr	r2, [r4, #20]
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	e006      	b.n	8005bd6 <_printf_i+0x15e>
 8005bc8:	0649      	lsls	r1, r1, #25
 8005bca:	d5f7      	bpl.n	8005bbc <_printf_i+0x144>
 8005bcc:	1d11      	adds	r1, r2, #4
 8005bce:	6019      	str	r1, [r3, #0]
 8005bd0:	6813      	ldr	r3, [r2, #0]
 8005bd2:	8aa2      	ldrh	r2, [r4, #20]
 8005bd4:	801a      	strh	r2, [r3, #0]
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	9e04      	ldr	r6, [sp, #16]
 8005bda:	6123      	str	r3, [r4, #16]
 8005bdc:	e054      	b.n	8005c88 <_printf_i+0x210>
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	1d11      	adds	r1, r2, #4
 8005be2:	6019      	str	r1, [r3, #0]
 8005be4:	6816      	ldr	r6, [r2, #0]
 8005be6:	2100      	movs	r1, #0
 8005be8:	6862      	ldr	r2, [r4, #4]
 8005bea:	0030      	movs	r0, r6
 8005bec:	f000 f85e 	bl	8005cac <memchr>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	d001      	beq.n	8005bf8 <_printf_i+0x180>
 8005bf4:	1b80      	subs	r0, r0, r6
 8005bf6:	6060      	str	r0, [r4, #4]
 8005bf8:	6863      	ldr	r3, [r4, #4]
 8005bfa:	6123      	str	r3, [r4, #16]
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	9a04      	ldr	r2, [sp, #16]
 8005c00:	7013      	strb	r3, [r2, #0]
 8005c02:	e041      	b.n	8005c88 <_printf_i+0x210>
 8005c04:	6923      	ldr	r3, [r4, #16]
 8005c06:	0032      	movs	r2, r6
 8005c08:	9906      	ldr	r1, [sp, #24]
 8005c0a:	9805      	ldr	r0, [sp, #20]
 8005c0c:	9d07      	ldr	r5, [sp, #28]
 8005c0e:	47a8      	blx	r5
 8005c10:	1c43      	adds	r3, r0, #1
 8005c12:	d043      	beq.n	8005c9c <_printf_i+0x224>
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	2500      	movs	r5, #0
 8005c18:	079b      	lsls	r3, r3, #30
 8005c1a:	d40f      	bmi.n	8005c3c <_printf_i+0x1c4>
 8005c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c1e:	68e0      	ldr	r0, [r4, #12]
 8005c20:	4298      	cmp	r0, r3
 8005c22:	da3d      	bge.n	8005ca0 <_printf_i+0x228>
 8005c24:	0018      	movs	r0, r3
 8005c26:	e03b      	b.n	8005ca0 <_printf_i+0x228>
 8005c28:	0022      	movs	r2, r4
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	3219      	adds	r2, #25
 8005c2e:	9906      	ldr	r1, [sp, #24]
 8005c30:	9805      	ldr	r0, [sp, #20]
 8005c32:	9e07      	ldr	r6, [sp, #28]
 8005c34:	47b0      	blx	r6
 8005c36:	1c43      	adds	r3, r0, #1
 8005c38:	d030      	beq.n	8005c9c <_printf_i+0x224>
 8005c3a:	3501      	adds	r5, #1
 8005c3c:	68e3      	ldr	r3, [r4, #12]
 8005c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c40:	1a9b      	subs	r3, r3, r2
 8005c42:	429d      	cmp	r5, r3
 8005c44:	dbf0      	blt.n	8005c28 <_printf_i+0x1b0>
 8005c46:	e7e9      	b.n	8005c1c <_printf_i+0x1a4>
 8005c48:	2d00      	cmp	r5, #0
 8005c4a:	d0a9      	beq.n	8005ba0 <_printf_i+0x128>
 8005c4c:	9e04      	ldr	r6, [sp, #16]
 8005c4e:	0028      	movs	r0, r5
 8005c50:	0039      	movs	r1, r7
 8005c52:	f7fa fae7 	bl	8000224 <__aeabi_uidivmod>
 8005c56:	9b03      	ldr	r3, [sp, #12]
 8005c58:	3e01      	subs	r6, #1
 8005c5a:	5c5b      	ldrb	r3, [r3, r1]
 8005c5c:	0028      	movs	r0, r5
 8005c5e:	7033      	strb	r3, [r6, #0]
 8005c60:	0039      	movs	r1, r7
 8005c62:	f7fa fa59 	bl	8000118 <__udivsi3>
 8005c66:	1e05      	subs	r5, r0, #0
 8005c68:	d1f1      	bne.n	8005c4e <_printf_i+0x1d6>
 8005c6a:	2f08      	cmp	r7, #8
 8005c6c:	d109      	bne.n	8005c82 <_printf_i+0x20a>
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	07db      	lsls	r3, r3, #31
 8005c72:	d506      	bpl.n	8005c82 <_printf_i+0x20a>
 8005c74:	6863      	ldr	r3, [r4, #4]
 8005c76:	6922      	ldr	r2, [r4, #16]
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	dc02      	bgt.n	8005c82 <_printf_i+0x20a>
 8005c7c:	2330      	movs	r3, #48	; 0x30
 8005c7e:	3e01      	subs	r6, #1
 8005c80:	7033      	strb	r3, [r6, #0]
 8005c82:	9b04      	ldr	r3, [sp, #16]
 8005c84:	1b9b      	subs	r3, r3, r6
 8005c86:	6123      	str	r3, [r4, #16]
 8005c88:	9b07      	ldr	r3, [sp, #28]
 8005c8a:	aa09      	add	r2, sp, #36	; 0x24
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	0021      	movs	r1, r4
 8005c90:	9b06      	ldr	r3, [sp, #24]
 8005c92:	9805      	ldr	r0, [sp, #20]
 8005c94:	f7ff fe82 	bl	800599c <_printf_common>
 8005c98:	1c43      	adds	r3, r0, #1
 8005c9a:	d1b3      	bne.n	8005c04 <_printf_i+0x18c>
 8005c9c:	2001      	movs	r0, #1
 8005c9e:	4240      	negs	r0, r0
 8005ca0:	b00b      	add	sp, #44	; 0x2c
 8005ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ca4:	08007082 	.word	0x08007082
 8005ca8:	08007071 	.word	0x08007071

08005cac <memchr>:
 8005cac:	b2c9      	uxtb	r1, r1
 8005cae:	1882      	adds	r2, r0, r2
 8005cb0:	4290      	cmp	r0, r2
 8005cb2:	d101      	bne.n	8005cb8 <memchr+0xc>
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	4770      	bx	lr
 8005cb8:	7803      	ldrb	r3, [r0, #0]
 8005cba:	428b      	cmp	r3, r1
 8005cbc:	d0fb      	beq.n	8005cb6 <memchr+0xa>
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	e7f6      	b.n	8005cb0 <memchr+0x4>

08005cc2 <memmove>:
 8005cc2:	b510      	push	{r4, lr}
 8005cc4:	4288      	cmp	r0, r1
 8005cc6:	d902      	bls.n	8005cce <memmove+0xc>
 8005cc8:	188b      	adds	r3, r1, r2
 8005cca:	4298      	cmp	r0, r3
 8005ccc:	d308      	bcc.n	8005ce0 <memmove+0x1e>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d007      	beq.n	8005ce4 <memmove+0x22>
 8005cd4:	5ccc      	ldrb	r4, [r1, r3]
 8005cd6:	54c4      	strb	r4, [r0, r3]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	e7f9      	b.n	8005cd0 <memmove+0xe>
 8005cdc:	5c8b      	ldrb	r3, [r1, r2]
 8005cde:	5483      	strb	r3, [r0, r2]
 8005ce0:	3a01      	subs	r2, #1
 8005ce2:	d2fb      	bcs.n	8005cdc <memmove+0x1a>
 8005ce4:	bd10      	pop	{r4, pc}

08005ce6 <_realloc_r>:
 8005ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce8:	0007      	movs	r7, r0
 8005cea:	000d      	movs	r5, r1
 8005cec:	0016      	movs	r6, r2
 8005cee:	2900      	cmp	r1, #0
 8005cf0:	d105      	bne.n	8005cfe <_realloc_r+0x18>
 8005cf2:	0011      	movs	r1, r2
 8005cf4:	f7ff fc2a 	bl	800554c <_malloc_r>
 8005cf8:	0004      	movs	r4, r0
 8005cfa:	0020      	movs	r0, r4
 8005cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cfe:	2a00      	cmp	r2, #0
 8005d00:	d103      	bne.n	8005d0a <_realloc_r+0x24>
 8005d02:	f7ff fbd9 	bl	80054b8 <_free_r>
 8005d06:	0034      	movs	r4, r6
 8005d08:	e7f7      	b.n	8005cfa <_realloc_r+0x14>
 8005d0a:	f000 f812 	bl	8005d32 <_malloc_usable_size_r>
 8005d0e:	002c      	movs	r4, r5
 8005d10:	4286      	cmp	r6, r0
 8005d12:	d9f2      	bls.n	8005cfa <_realloc_r+0x14>
 8005d14:	0031      	movs	r1, r6
 8005d16:	0038      	movs	r0, r7
 8005d18:	f7ff fc18 	bl	800554c <_malloc_r>
 8005d1c:	1e04      	subs	r4, r0, #0
 8005d1e:	d0ec      	beq.n	8005cfa <_realloc_r+0x14>
 8005d20:	0029      	movs	r1, r5
 8005d22:	0032      	movs	r2, r6
 8005d24:	f7ff fbb6 	bl	8005494 <memcpy>
 8005d28:	0029      	movs	r1, r5
 8005d2a:	0038      	movs	r0, r7
 8005d2c:	f7ff fbc4 	bl	80054b8 <_free_r>
 8005d30:	e7e3      	b.n	8005cfa <_realloc_r+0x14>

08005d32 <_malloc_usable_size_r>:
 8005d32:	1f0b      	subs	r3, r1, #4
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	1f18      	subs	r0, r3, #4
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	da01      	bge.n	8005d40 <_malloc_usable_size_r+0xe>
 8005d3c:	580b      	ldr	r3, [r1, r0]
 8005d3e:	18c0      	adds	r0, r0, r3
 8005d40:	4770      	bx	lr
	...

08005d44 <_sbrk>:
 8005d44:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <_sbrk+0x18>)
 8005d46:	0002      	movs	r2, r0
 8005d48:	6819      	ldr	r1, [r3, #0]
 8005d4a:	2900      	cmp	r1, #0
 8005d4c:	d101      	bne.n	8005d52 <_sbrk+0xe>
 8005d4e:	4904      	ldr	r1, [pc, #16]	; (8005d60 <_sbrk+0x1c>)
 8005d50:	6019      	str	r1, [r3, #0]
 8005d52:	6818      	ldr	r0, [r3, #0]
 8005d54:	1882      	adds	r2, r0, r2
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	4770      	bx	lr
 8005d5a:	46c0      	nop			; (mov r8, r8)
 8005d5c:	20000490 	.word	0x20000490
 8005d60:	20000668 	.word	0x20000668

08005d64 <_init>:
 8005d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d66:	46c0      	nop			; (mov r8, r8)
 8005d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d6a:	bc08      	pop	{r3}
 8005d6c:	469e      	mov	lr, r3
 8005d6e:	4770      	bx	lr

08005d70 <_fini>:
 8005d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d72:	46c0      	nop			; (mov r8, r8)
 8005d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d76:	bc08      	pop	{r3}
 8005d78:	469e      	mov	lr, r3
 8005d7a:	4770      	bx	lr
